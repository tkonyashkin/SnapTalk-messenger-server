syntax = "proto3";

package messenger;

// Общие типы сообщений
enum MessageType {
  TEXT = 0;
  AUDIO = 1;
  VIDEO = 2;
  VOICE = 5;
  STICKER = 3;
  EMOJI = 4;
  
  // Технические
  USER_AVATAR_CHANGED = 6;
  USER_NAME_CHANGED = 7;
  CHAT_NAME_CHANGED = 8;
  CHAT_AVATAR_CHANGED = 9;
  USER_JOINED_CHAT = 10;
  USER_LEFT_CHAT = 11;
  USER_KICKED_FROM_CHAT = 12;
  USER_BANNED_FROM_CHAT = 13;
  USER_UNBANNED_FROM_CHAT = 14;
  ROLE_ASSIGNED = 15;
  ROLE_REVOKED = 16;
//   CHAT_MEMBER_STATUS_CHANGED = 17;
  PERMISSIONS_UPDATED = 17;
  CHAT_DESCRIPTION_CHANGED = 18; // Изменение описания чата
  CHAT_SETTINGS_UPDATED = 19; // Обновление настроек чата
  MESSAGE_PINNED = 20; // Сообщение закреплено
  MESSAGE_UNPINNED = 21; // Сообщение откреплено
  CHAT_MEMBERS_ADDED = 22; // Добавлены новые участники
  CHAT_MEMBERS_REMOVED = 23; // Участники удалены из чата
  PRIVACY_SETTINGS_UPDATED = 24; // Обновление настроек приватности
  SECURITY_SETTINGS_UPDATED = 25; // Обновление настроек безопасности
  GROUP_CHAT_CREATED = 26; // Создание группового чата
  GROUP_CHAT_DISBANDED = 27; // Роспуск группового чата
//   CHAT_MEMBER_PROMOTED = 29; // Повышение участника чата
//   CHAT_MEMBER_DEMOTED = 30; // Понижение участника чата
//   READ_RECEIPTS_ENABLED = 31; // Включены подтверждения прочтения
//   READ_RECEIPTS_DISABLED = 32; // Выключены подтверждения прочтения
//   CHAT_ENCRYPTION_ENABLED = 33; // Включено шифрование чата
//   CHAT_ENCRYPTION_DISABLED = 34; // Выключено шифрование чата
  USER_STATUS_CHANGED = 28; // Изменение статуса пользователя (например, онлайн, оффлайн)
  CUSTOM_NOTIFICATIONS_UPDATED = 29; // Обновление пользовательских настроек уведомлений
  CHAT_ARCHIVED = 30; // Чат архивирован
  CHAT_UNARCHIVED = 31; // Чат разархивирован
  NEW_DEVICE_SIGNED_IN = 32; // Новое устройство вошло в систему
  DEVICE_SIGNED_OUT = 33; // Устройство вышло из системы
  
}

// Типов файлов
enum FileType {
  UNKNOWN_FILE = 0;
  DOCUMENT_FILE = 1;
  IMAGE_FILE = 2;
  AUDIO_FILE = 3;
  VIDEO_FILE = 4;
}

// Cтатус сообщения
enum MessageStatus {
  SENT = 0;
  DELIVERED = 1;
  READ = 2;
}

// Типы статусов пользователя
enum UserStatus {
  ONLINE = 0;
  OFFLINE = 1;
}

// Аутентификация и управление пользователями
message RegisterRequest {
  string username = 1;
  string password = 2;
}

message RegisterResponse {
  bool success = 1;
  string error = 2;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  bool success = 1;
  string error = 2;
  string token = 3; // Токен для аутентификации
}

message LogoutRequest {
  string token = 1;
}

message LogoutResponse {
  bool success = 1;
  string error = 2;
}

message UserProfile {
  string userId = 1;
  string username = 2;
  UserStatus status = 3;
}

message UpdateUserProfileRequest {
  UserProfile profile = 1;
}

message UpdateUserProfileResponse {
  bool success = 1;
  string error = 2;
}

message UpdateMessageStatusRequest {
  string messageId = 1;
  MessageStatus status = 2;
}

message UpdateMessageStatusResponse {
  bool success = 1;
  string error = 2;
}

// Управления контактами
message AddContactRequest {
  string userId = 1;
  string contactId = 2;
}

message AddContactResponse {
  bool success = 1;
  string error = 2;
}

message RemoveContactRequest {
  string userId = 1;
  string contactId = 2;
}

message RemoveContactResponse {
  bool success = 1;
  string error = 2;
}

message ContactList {
  string userId = 1;
  repeated string contactIds = 2;
}

// Сообщение в чате
message SentMessage {
  string id = 1;
  MessageType type = 2;
  string content = 3; // Для текстовых сообщений или ссылки на медиа
}

/////////

message GetMessagesOffsetRequest {
  string chatId = 1;
}

message GetMessagesOffsetResponse {
  int64 offset = 1;
}

message GetMessagesConversionRequest {
  string chatId = 1;
  int64 offset = 2;
  int32 count = 3;
}

message GetMessagesConversionResponse {
  repeated ChatMessage messages = 1;
}

/////


// Сообщение в чате
message ChatMessage {
  string id = 1;
  string senderId = 2; // не нужно, на
  MessageType type = 3;
  bytes content = 4; // Для текстовых сообщений, ссылок на медиа и воис
}

// Сообщения для удаления и редактирования сообщений
message DeleteMessageRequest {
  string messageId = 1;
}

message DeleteMessageResponse {
  bool success = 1;
  string error = 2;
}

message EditMessageRequest {
  string messageId = 1;
  bytes newContent = 2;
}

message EditMessageResponse {
  bool success = 1;
  string error = 2;
}

// Групповой чат
message GroupChat {
  string id = 1;
  string name = 2;
  repeated string memberIds = 3;
  repeated Role roles = 4;
  string folderId = 5; // разделить на создание и добавление в папку TODO
}

/////

message GetNewMessagesRequest {
  string chatId = 1;
  int64 offset = 2;
}

message GetGroupChatsOffsetRequest {
  string userId = 1;
}

message GetGroupChatsOffsetResponse {
  int64 offset = 1;
}

message GetGroupChatsConversionRequest {
  string userId = 1;
  int64 offset = 2;
  int32 count = 3;
}

message GetGroupChatsConversionResponse {
  repeated GroupChat chats = 1;
}

message GetNewGroupChatsRequest {
  string userId = 1;
  int64 offset = 2;
}

/////

// Сообщения для управления участниками группы
message AddGroupMemberRequest {
  string groupId = 1;
  string memberId = 2;
}

message AddGroupMemberResponse {
  bool success = 1;
  string error = 2;
}

message RemoveGroupMemberRequest {
  string groupId = 1;
  string memberId = 2;
}

message RemoveGroupMemberResponse {
  bool success = 1;
  string error = 2;
}

// Папка для группировки чатов
message ChatFolder {
  string id = 1;
  string userId = 2;
  string name = 3;
  repeated string groupChatIds = 4; // Идентификаторы групповых чатов в папке
}

// Запросы и ответы для управления папками чатов

message CreateChatFolderRequest {
  string userId = 1;
  string name = 2;
}

message CreateChatFolderResponse {
  ChatFolder folder = 1;
}

message UpdateChatFolderRequest {
  string folderId = 1;
  string newName = 2;
}

message UpdateChatFolderResponse {
  bool success = 1;
}

message DeleteChatFolderRequest {
  string folderId = 1;
}

message DeleteChatFolderResponse {
  bool success = 1;
}

message GetFoldersOffsetRequest {
  string userId = 1;
}

message GetFoldersOffsetResponse {
  int64 offset = 1; // Смещение для новых или непрочитанных папок
}

// Запрос для получения списка папок, начиная с определенного смещения
message GetFoldersRequest {
  string userId = 1;
  int64 offset = 2; // Смещение для начала списка
  int32 count = 3; // Количество папок для получения
}

message GetFoldersResponse {
  repeated ChatFolder folders = 1; // Возвращаемые папки
}

// Запрос для подписки на поток новых папок
message GetNewFoldersRequest {
  string userId = 1;
}

message AddChatToFolderRequest {
  string folderId = 1;
  string chatId = 2;
}

message AddChatToFolderResponse {
  bool success = 1;
}

message RemoveChatFromFolderRequest {
  string folderId = 1;
  string chatId = 2;
}

message RemoveChatFromFolderResponse {
  bool success = 1;
}

// Описания файла
message FileMessage {
  string id = 1;
  string senderId = 2;
  FileType type = 3;
  string filename = 4;
  bytes data = 5;
}

// Запроса поиска
message SearchRequest {
  string query = 1; // Поисковый запрос
  string userId = 2; // Идентификатор пользователя, который инициирует поиск
  int32 limit = 3; // Ограничение на количество результатов
}

// Ответа поиска по сообщениям
message SearchMessagesResponse {
  repeated ChatMessage messages = 1;
}

// Ответа поиска по чатам
message SearchChatsResponse {
  repeated GroupChat chats = 1;
}

message Permissions {
    bool write = 1;
    bool ban = 2; // TODO
}

// Роль в групповом чате
message Role {
  string name = 1;
  Permissions permissions = 2; // Список строковых идентификаторов прав
}

// Напоминание
message Reminder {
  string id = 1;
  string userId = 2;
  string message = 3;
  int64 timestamp = 4; // Время, когда напоминание должно быть отправлено
}

// Управление уведомлениями
message NotificationSettings {
  string userId = 1;
  bool enableNotifications = 2;
}

message UpdateNotificationSettingsRequest {
  NotificationSettings settings = 1;
}

message UpdateNotificationSettingsResponse {
  bool success = 1;
  string error = 2;
}

// Задача в списке дел
message ToDoItem {
  string id = 1;
  string userId = 2;
  string description = 3;
  bool completed = 4;
}

message GetToDoItemsOffsetRequest {
  string userId = 1;
}

message GetToDoItemsOffsetResponse {
  int64 offset = 1; // Смещение
}

message GetToDoItemsRequest {
  string userId = 1;
  int64 offset = 2;
  int32 count = 3;
}

message GetToDoItemsResponse {
  repeated ToDoItem items = 1;
}

message GetNewToDoItemsRequest {
  string userId = 1;
  int64 offset = 2;
}

// Сервисы
service MessengerService {
  rpc SendMessage(SentMessage) returns (ChatMessage);
  rpc CreateGroupChat(GroupChat) returns (GroupChat);
  rpc UpdateGroupChat(GroupChat) returns (GroupChat);
  rpc AssignRoleToUser(Role) returns (Role);
  rpc CreateReminder(Reminder) returns (Reminder);
  rpc MarkToDoItemCompleted(ToDoItem) returns (ToDoItem);

  // Методы для удаления и редактирования сообщений
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);
  rpc EditMessage(EditMessageRequest) returns (EditMessageResponse);

  // Методы для аутентификации и управления пользователями
  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Logout(LogoutRequest) returns (LogoutResponse);
  rpc UpdateUserProfile(UpdateUserProfileRequest) returns (UpdateUserProfileResponse);
  rpc UpdateMessageStatus(UpdateMessageStatusRequest) returns (UpdateMessageStatusResponse);

  // Методы для управления контактами
  rpc AddContact(AddContactRequest) returns (AddContactResponse);
  rpc RemoveContact(RemoveContactRequest) returns (RemoveContactResponse);

  // Методы для работы с папками чатов
  rpc CreateChatFolder(CreateChatFolderRequest) returns (CreateChatFolderResponse);
  rpc UpdateChatFolder(UpdateChatFolderRequest) returns (UpdateChatFolderResponse);
  rpc DeleteChatFolder(DeleteChatFolderRequest) returns (DeleteChatFolderResponse);
  
  rpc GetFoldersOffset(GetFoldersOffsetRequest) returns (GetFoldersOffsetResponse);
  rpc GetFolders(GetFoldersRequest) returns (GetFoldersResponse);
  rpc GetNewFolders(GetNewFoldersRequest) returns (stream ChatFolder); // Поток новых папок

  rpc AddChatToFolder(AddChatToFolderRequest) returns (AddChatToFolderResponse);
  rpc RemoveChatFromFolder(RemoveChatFromFolderRequest) returns (RemoveChatFromFolderResponse);
  
  // Методы для управления участниками группы
  rpc AddGroupMember(AddGroupMemberRequest) returns (AddGroupMemberResponse);
  rpc RemoveGroupMember(RemoveGroupMemberRequest) returns (RemoveGroupMemberResponse);

  // Методы для получения списка чатов и сообщений
  // rpc GetGroupChats(string) returns (stream GroupChat);
  // rpc GetChatMessages(string) returns (stream ChatMessage);
  rpc GetMessagesOffset(GetMessagesOffsetRequest) returns (GetMessagesOffsetResponse);
  rpc GetMessagesConversion(GetMessagesConversionRequest) returns (GetMessagesConversionResponse);
  rpc GetNewMessages(GetNewMessagesRequest) returns (stream ChatMessage);

  rpc GetGroupChatsOffset(GetGroupChatsOffsetRequest) returns (GetGroupChatsOffsetResponse);
  rpc GetGroupChatsConversion(GetGroupChatsConversionRequest) returns (GetGroupChatsConversionResponse);
  rpc GetNewGroupChats(GetNewGroupChatsRequest) returns (stream GroupChat);
  // Метод для отправки файла
  rpc SendFile(FileMessage) returns (FileMessage);

  // Методы поиска
  rpc SearchMessages(SearchRequest) returns (SearchMessagesResponse);
  rpc SearchChats(SearchRequest) returns (SearchChatsResponse);

  // Методы для управления напоминаниями
  rpc UpdateReminder(Reminder) returns (Reminder);
  rpc DeleteReminder(Reminder) returns (Reminder);
  // rpc GetReminders(string) returns (stream Reminder);

  // Методы для управления уведомлениями
  rpc UpdateNotificationSettings(UpdateNotificationSettingsRequest) returns (UpdateNotificationSettingsResponse);

  // Методы для управления списком дел
  rpc CreateToDoItem(ToDoItem) returns (ToDoItem);
  rpc UpdateToDoItem(ToDoItem) returns (ToDoItem);
  rpc DeleteToDoItem(ToDoItem) returns (ToDoItem);
  // rpc GetToDoList(string) returns (stream ToDoItem);

  // Методы для получения задач из списка дел
  rpc GetToDoItemsOffset(GetToDoItemsOffsetRequest) returns (GetToDoItemsOffsetResponse);
  rpc GetToDoItems(GetToDoItemsRequest) returns (GetToDoItemsResponse);
  rpc GetNewToDoItems(GetNewToDoItemsRequest) returns (stream ToDoItem); // Поток новых задач
}


// Сценарий регистрации: Register/Login 
// JWT token
// (auth_token, refresh_token) - у человека всегда
// auth_token - быстро протухает(5 минут), он во всех всех сообщениях фигурирует;
// refresh_token - долго действует (30 дней), одноразовый: referesh_token -> refresh_token_new, auth_token

// GetOffset(chatId)
// GetMessages(chatId, offset, message_count)
// GetNewMessages(chatId, offset) -> stream Message

// План:
// Посмотреть про поддержку токенов в gRPC
// Переделать протофайлик - вместе
// Прислать мне
// Начинать работу
//    Создать в 2 репозиториях канбан доску (backend - просто все rpc методы в backlog). Frontend - подумать вам :)
//    Под все rpc методы написать заглушки, проверить - фронтенд мог сразу проверять
//    Начинать канбан доску разбирать



