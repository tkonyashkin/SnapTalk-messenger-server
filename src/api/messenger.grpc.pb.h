// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messenger.proto
#ifndef GRPC_messenger_2eproto__INCLUDED
#define GRPC_messenger_2eproto__INCLUDED

#include "messenger.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace messenger {

// Сервисы
class MessengerService final {
 public:
  static constexpr char const* service_full_name() {
    return "messenger.MessengerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::messenger::ChatMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::messenger::ChatMessage>> AsyncSendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::messenger::ChatMessage>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::messenger::ChatMessage>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::messenger::ChatMessage>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    // rpc CreateGroupChat(GroupChat) returns (GroupChat);
    // rpc UpdateGroupChat(GroupChat) returns (GroupChat);
    // rpc AssignRoleToUser(Role) returns (Role);
    // rpc CreateReminder(Reminder) returns (Reminder);
    // rpc MarkToDoItemCompleted(ToDoItem) returns (ToDoItem);
    // Методы для удаления и редактирования сообщений
    // rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);
    // rpc EditMessage(EditMessageRequest) returns (EditMessageResponse);
    //
    // Методы для аутентификации и управления пользователями
    // rpc Register(RegisterRequest) returns (RegisterResponse);
    // rpc Login(LoginRequest) returns (LoginResponse);
    // rpc Logout(LogoutRequest) returns (LogoutResponse);
    // rpc UpdateUserProfile(UpdateUserProfileRequest) returns (UpdateUserProfileResponse);
    // rpc UpdateMessageStatus(UpdateMessageStatusRequest) returns (UpdateMessageStatusResponse);
    //
    // Методы для управления контактами
    // rpc AddContact(AddContactRequest) returns (AddContactResponse);
    // rpc RemoveContact(RemoveContactRequest) returns (RemoveContactResponse);
    //
    // Методы для работы с папками чатов
    // rpc CreateChatFolder(CreateChatFolderRequest) returns (CreateChatFolderResponse);
    // rpc UpdateChatFolder(UpdateChatFolderRequest) returns (UpdateChatFolderResponse);
    // rpc DeleteChatFolder(DeleteChatFolderRequest) returns (DeleteChatFolderResponse);
    //
    // rpc GetFoldersOffset(GetFoldersOffsetRequest) returns (GetFoldersOffsetResponse);
    // rpc GetFolders(GetFoldersRequest) returns (GetFoldersResponse);
    // rpc GetNewFolders(GetNewFoldersRequest) returns (stream ChatFolder); // Поток новых папок
    //
    // rpc AddChatToFolder(AddChatToFolderRequest) returns (AddChatToFolderResponse);
    // rpc RemoveChatFromFolder(RemoveChatFromFolderRequest) returns (RemoveChatFromFolderResponse);
    //
    // // Методы для управления участниками группы
    // rpc AddGroupMember(AddGroupMemberRequest) returns (AddGroupMemberResponse);
    // rpc RemoveGroupMember(RemoveGroupMemberRequest) returns (RemoveGroupMemberResponse);
    //
    // Методы для получения списка чатов и сообщений
    // rpc GetGroupChats(string) returns (stream GroupChat);
    // rpc GetChatMessages(string) returns (stream ChatMessage);
    virtual ::grpc::Status GetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::messenger::GetMessagesOffsetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::messenger::GetMessagesOffsetResponse>> AsyncGetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::messenger::GetMessagesOffsetResponse>>(AsyncGetMessagesOffsetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::messenger::GetMessagesOffsetResponse>> PrepareAsyncGetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::messenger::GetMessagesOffsetResponse>>(PrepareAsyncGetMessagesOffsetRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::messenger::GetMessagesConversionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::messenger::GetMessagesConversionResponse>> AsyncGetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::messenger::GetMessagesConversionResponse>>(AsyncGetMessagesConversionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::messenger::GetMessagesConversionResponse>> PrepareAsyncGetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::messenger::GetMessagesConversionResponse>>(PrepareAsyncGetMessagesConversionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::messenger::ChatMessage>> GetNewMessages(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::messenger::ChatMessage>>(GetNewMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::messenger::ChatMessage>> AsyncGetNewMessages(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::messenger::ChatMessage>>(AsyncGetNewMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::messenger::ChatMessage>> PrepareAsyncGetNewMessages(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::messenger::ChatMessage>>(PrepareAsyncGetNewMessagesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage* request, ::messenger::ChatMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage* request, ::messenger::ChatMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // rpc CreateGroupChat(GroupChat) returns (GroupChat);
      // rpc UpdateGroupChat(GroupChat) returns (GroupChat);
      // rpc AssignRoleToUser(Role) returns (Role);
      // rpc CreateReminder(Reminder) returns (Reminder);
      // rpc MarkToDoItemCompleted(ToDoItem) returns (ToDoItem);
      // Методы для удаления и редактирования сообщений
      // rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);
      // rpc EditMessage(EditMessageRequest) returns (EditMessageResponse);
      //
      // Методы для аутентификации и управления пользователями
      // rpc Register(RegisterRequest) returns (RegisterResponse);
      // rpc Login(LoginRequest) returns (LoginResponse);
      // rpc Logout(LogoutRequest) returns (LogoutResponse);
      // rpc UpdateUserProfile(UpdateUserProfileRequest) returns (UpdateUserProfileResponse);
      // rpc UpdateMessageStatus(UpdateMessageStatusRequest) returns (UpdateMessageStatusResponse);
      //
      // Методы для управления контактами
      // rpc AddContact(AddContactRequest) returns (AddContactResponse);
      // rpc RemoveContact(RemoveContactRequest) returns (RemoveContactResponse);
      //
      // Методы для работы с папками чатов
      // rpc CreateChatFolder(CreateChatFolderRequest) returns (CreateChatFolderResponse);
      // rpc UpdateChatFolder(UpdateChatFolderRequest) returns (UpdateChatFolderResponse);
      // rpc DeleteChatFolder(DeleteChatFolderRequest) returns (DeleteChatFolderResponse);
      //
      // rpc GetFoldersOffset(GetFoldersOffsetRequest) returns (GetFoldersOffsetResponse);
      // rpc GetFolders(GetFoldersRequest) returns (GetFoldersResponse);
      // rpc GetNewFolders(GetNewFoldersRequest) returns (stream ChatFolder); // Поток новых папок
      //
      // rpc AddChatToFolder(AddChatToFolderRequest) returns (AddChatToFolderResponse);
      // rpc RemoveChatFromFolder(RemoveChatFromFolderRequest) returns (RemoveChatFromFolderResponse);
      //
      // // Методы для управления участниками группы
      // rpc AddGroupMember(AddGroupMemberRequest) returns (AddGroupMemberResponse);
      // rpc RemoveGroupMember(RemoveGroupMemberRequest) returns (RemoveGroupMemberResponse);
      //
      // Методы для получения списка чатов и сообщений
      // rpc GetGroupChats(string) returns (stream GroupChat);
      // rpc GetChatMessages(string) returns (stream ChatMessage);
      virtual void GetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest* request, ::messenger::GetMessagesOffsetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest* request, ::messenger::GetMessagesOffsetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest* request, ::messenger::GetMessagesConversionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest* request, ::messenger::GetMessagesConversionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNewMessages(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest* request, ::grpc::ClientReadReactor< ::messenger::ChatMessage>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::messenger::ChatMessage>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::messenger::ChatMessage>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::messenger::GetMessagesOffsetResponse>* AsyncGetMessagesOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::messenger::GetMessagesOffsetResponse>* PrepareAsyncGetMessagesOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::messenger::GetMessagesConversionResponse>* AsyncGetMessagesConversionRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::messenger::GetMessagesConversionResponse>* PrepareAsyncGetMessagesConversionRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::messenger::ChatMessage>* GetNewMessagesRaw(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::messenger::ChatMessage>* AsyncGetNewMessagesRaw(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::messenger::ChatMessage>* PrepareAsyncGetNewMessagesRaw(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::messenger::ChatMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::messenger::ChatMessage>> AsyncSendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::messenger::ChatMessage>>(AsyncSendMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::messenger::ChatMessage>> PrepareAsyncSendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::messenger::ChatMessage>>(PrepareAsyncSendMessageRaw(context, request, cq));
    }
    ::grpc::Status GetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::messenger::GetMessagesOffsetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesOffsetResponse>> AsyncGetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesOffsetResponse>>(AsyncGetMessagesOffsetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesOffsetResponse>> PrepareAsyncGetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesOffsetResponse>>(PrepareAsyncGetMessagesOffsetRaw(context, request, cq));
    }
    ::grpc::Status GetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::messenger::GetMessagesConversionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesConversionResponse>> AsyncGetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesConversionResponse>>(AsyncGetMessagesConversionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesConversionResponse>> PrepareAsyncGetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesConversionResponse>>(PrepareAsyncGetMessagesConversionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::messenger::ChatMessage>> GetNewMessages(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::messenger::ChatMessage>>(GetNewMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::messenger::ChatMessage>> AsyncGetNewMessages(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::messenger::ChatMessage>>(AsyncGetNewMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::messenger::ChatMessage>> PrepareAsyncGetNewMessages(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::messenger::ChatMessage>>(PrepareAsyncGetNewMessagesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage* request, ::messenger::ChatMessage* response, std::function<void(::grpc::Status)>) override;
      void SendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage* request, ::messenger::ChatMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest* request, ::messenger::GetMessagesOffsetResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest* request, ::messenger::GetMessagesOffsetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest* request, ::messenger::GetMessagesConversionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest* request, ::messenger::GetMessagesConversionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNewMessages(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest* request, ::grpc::ClientReadReactor< ::messenger::ChatMessage>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::messenger::ChatMessage>* AsyncSendMessageRaw(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::messenger::ChatMessage>* PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesOffsetResponse>* AsyncGetMessagesOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesOffsetResponse>* PrepareAsyncGetMessagesOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesConversionResponse>* AsyncGetMessagesConversionRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesConversionResponse>* PrepareAsyncGetMessagesConversionRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::messenger::ChatMessage>* GetNewMessagesRaw(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request) override;
    ::grpc::ClientAsyncReader< ::messenger::ChatMessage>* AsyncGetNewMessagesRaw(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::messenger::ChatMessage>* PrepareAsyncGetNewMessagesRaw(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMessagesOffset_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMessagesConversion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNewMessages_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendMessage(::grpc::ServerContext* context, const ::messenger::SentMessage* request, ::messenger::ChatMessage* response);
    // rpc CreateGroupChat(GroupChat) returns (GroupChat);
    // rpc UpdateGroupChat(GroupChat) returns (GroupChat);
    // rpc AssignRoleToUser(Role) returns (Role);
    // rpc CreateReminder(Reminder) returns (Reminder);
    // rpc MarkToDoItemCompleted(ToDoItem) returns (ToDoItem);
    // Методы для удаления и редактирования сообщений
    // rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);
    // rpc EditMessage(EditMessageRequest) returns (EditMessageResponse);
    //
    // Методы для аутентификации и управления пользователями
    // rpc Register(RegisterRequest) returns (RegisterResponse);
    // rpc Login(LoginRequest) returns (LoginResponse);
    // rpc Logout(LogoutRequest) returns (LogoutResponse);
    // rpc UpdateUserProfile(UpdateUserProfileRequest) returns (UpdateUserProfileResponse);
    // rpc UpdateMessageStatus(UpdateMessageStatusRequest) returns (UpdateMessageStatusResponse);
    //
    // Методы для управления контактами
    // rpc AddContact(AddContactRequest) returns (AddContactResponse);
    // rpc RemoveContact(RemoveContactRequest) returns (RemoveContactResponse);
    //
    // Методы для работы с папками чатов
    // rpc CreateChatFolder(CreateChatFolderRequest) returns (CreateChatFolderResponse);
    // rpc UpdateChatFolder(UpdateChatFolderRequest) returns (UpdateChatFolderResponse);
    // rpc DeleteChatFolder(DeleteChatFolderRequest) returns (DeleteChatFolderResponse);
    //
    // rpc GetFoldersOffset(GetFoldersOffsetRequest) returns (GetFoldersOffsetResponse);
    // rpc GetFolders(GetFoldersRequest) returns (GetFoldersResponse);
    // rpc GetNewFolders(GetNewFoldersRequest) returns (stream ChatFolder); // Поток новых папок
    //
    // rpc AddChatToFolder(AddChatToFolderRequest) returns (AddChatToFolderResponse);
    // rpc RemoveChatFromFolder(RemoveChatFromFolderRequest) returns (RemoveChatFromFolderResponse);
    //
    // // Методы для управления участниками группы
    // rpc AddGroupMember(AddGroupMemberRequest) returns (AddGroupMemberResponse);
    // rpc RemoveGroupMember(RemoveGroupMemberRequest) returns (RemoveGroupMemberResponse);
    //
    // Методы для получения списка чатов и сообщений
    // rpc GetGroupChats(string) returns (stream GroupChat);
    // rpc GetChatMessages(string) returns (stream ChatMessage);
    virtual ::grpc::Status GetMessagesOffset(::grpc::ServerContext* context, const ::messenger::GetMessagesOffsetRequest* request, ::messenger::GetMessagesOffsetResponse* response);
    virtual ::grpc::Status GetMessagesConversion(::grpc::ServerContext* context, const ::messenger::GetMessagesConversionRequest* request, ::messenger::GetMessagesConversionResponse* response);
    virtual ::grpc::Status GetNewMessages(::grpc::ServerContext* context, const ::messenger::GetNewMessagesRequest* request, ::grpc::ServerWriter< ::messenger::ChatMessage>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendMessage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::messenger::SentMessage* /*request*/, ::messenger::ChatMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::messenger::SentMessage* request, ::grpc::ServerAsyncResponseWriter< ::messenger::ChatMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMessagesOffset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMessagesOffset() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMessagesOffset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessagesOffset(::grpc::ServerContext* /*context*/, const ::messenger::GetMessagesOffsetRequest* /*request*/, ::messenger::GetMessagesOffsetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessagesOffset(::grpc::ServerContext* context, ::messenger::GetMessagesOffsetRequest* request, ::grpc::ServerAsyncResponseWriter< ::messenger::GetMessagesOffsetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMessagesConversion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMessagesConversion() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetMessagesConversion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessagesConversion(::grpc::ServerContext* /*context*/, const ::messenger::GetMessagesConversionRequest* /*request*/, ::messenger::GetMessagesConversionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessagesConversion(::grpc::ServerContext* context, ::messenger::GetMessagesConversionRequest* request, ::grpc::ServerAsyncResponseWriter< ::messenger::GetMessagesConversionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNewMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNewMessages() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetNewMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewMessages(::grpc::ServerContext* /*context*/, const ::messenger::GetNewMessagesRequest* /*request*/, ::grpc::ServerWriter< ::messenger::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNewMessages(::grpc::ServerContext* context, ::messenger::GetNewMessagesRequest* request, ::grpc::ServerAsyncWriter< ::messenger::ChatMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendMessage<WithAsyncMethod_GetMessagesOffset<WithAsyncMethod_GetMessagesConversion<WithAsyncMethod_GetNewMessages<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::messenger::SentMessage, ::messenger::ChatMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::messenger::SentMessage* request, ::messenger::ChatMessage* response) { return this->SendMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendMessage(
        ::grpc::MessageAllocator< ::messenger::SentMessage, ::messenger::ChatMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::messenger::SentMessage, ::messenger::ChatMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::messenger::SentMessage* /*request*/, ::messenger::ChatMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::messenger::SentMessage* /*request*/, ::messenger::ChatMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMessagesOffset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMessagesOffset() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::messenger::GetMessagesOffsetRequest, ::messenger::GetMessagesOffsetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::messenger::GetMessagesOffsetRequest* request, ::messenger::GetMessagesOffsetResponse* response) { return this->GetMessagesOffset(context, request, response); }));}
    void SetMessageAllocatorFor_GetMessagesOffset(
        ::grpc::MessageAllocator< ::messenger::GetMessagesOffsetRequest, ::messenger::GetMessagesOffsetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::messenger::GetMessagesOffsetRequest, ::messenger::GetMessagesOffsetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMessagesOffset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessagesOffset(::grpc::ServerContext* /*context*/, const ::messenger::GetMessagesOffsetRequest* /*request*/, ::messenger::GetMessagesOffsetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMessagesOffset(
      ::grpc::CallbackServerContext* /*context*/, const ::messenger::GetMessagesOffsetRequest* /*request*/, ::messenger::GetMessagesOffsetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMessagesConversion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMessagesConversion() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::messenger::GetMessagesConversionRequest, ::messenger::GetMessagesConversionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::messenger::GetMessagesConversionRequest* request, ::messenger::GetMessagesConversionResponse* response) { return this->GetMessagesConversion(context, request, response); }));}
    void SetMessageAllocatorFor_GetMessagesConversion(
        ::grpc::MessageAllocator< ::messenger::GetMessagesConversionRequest, ::messenger::GetMessagesConversionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::messenger::GetMessagesConversionRequest, ::messenger::GetMessagesConversionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMessagesConversion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessagesConversion(::grpc::ServerContext* /*context*/, const ::messenger::GetMessagesConversionRequest* /*request*/, ::messenger::GetMessagesConversionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMessagesConversion(
      ::grpc::CallbackServerContext* /*context*/, const ::messenger::GetMessagesConversionRequest* /*request*/, ::messenger::GetMessagesConversionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNewMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNewMessages() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::messenger::GetNewMessagesRequest, ::messenger::ChatMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::messenger::GetNewMessagesRequest* request) { return this->GetNewMessages(context, request); }));
    }
    ~WithCallbackMethod_GetNewMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewMessages(::grpc::ServerContext* /*context*/, const ::messenger::GetNewMessagesRequest* /*request*/, ::grpc::ServerWriter< ::messenger::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::messenger::ChatMessage>* GetNewMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::messenger::GetNewMessagesRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SendMessage<WithCallbackMethod_GetMessagesOffset<WithCallbackMethod_GetMessagesConversion<WithCallbackMethod_GetNewMessages<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendMessage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::messenger::SentMessage* /*request*/, ::messenger::ChatMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMessagesOffset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMessagesOffset() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMessagesOffset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessagesOffset(::grpc::ServerContext* /*context*/, const ::messenger::GetMessagesOffsetRequest* /*request*/, ::messenger::GetMessagesOffsetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMessagesConversion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMessagesConversion() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetMessagesConversion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessagesConversion(::grpc::ServerContext* /*context*/, const ::messenger::GetMessagesConversionRequest* /*request*/, ::messenger::GetMessagesConversionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNewMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNewMessages() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetNewMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewMessages(::grpc::ServerContext* /*context*/, const ::messenger::GetNewMessagesRequest* /*request*/, ::grpc::ServerWriter< ::messenger::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendMessage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::messenger::SentMessage* /*request*/, ::messenger::ChatMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMessagesOffset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMessagesOffset() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMessagesOffset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessagesOffset(::grpc::ServerContext* /*context*/, const ::messenger::GetMessagesOffsetRequest* /*request*/, ::messenger::GetMessagesOffsetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessagesOffset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMessagesConversion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMessagesConversion() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetMessagesConversion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessagesConversion(::grpc::ServerContext* /*context*/, const ::messenger::GetMessagesConversionRequest* /*request*/, ::messenger::GetMessagesConversionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessagesConversion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNewMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNewMessages() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetNewMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewMessages(::grpc::ServerContext* /*context*/, const ::messenger::GetNewMessagesRequest* /*request*/, ::grpc::ServerWriter< ::messenger::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNewMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendMessage() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::messenger::SentMessage* /*request*/, ::messenger::ChatMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMessagesOffset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMessagesOffset() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMessagesOffset(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMessagesOffset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessagesOffset(::grpc::ServerContext* /*context*/, const ::messenger::GetMessagesOffsetRequest* /*request*/, ::messenger::GetMessagesOffsetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMessagesOffset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMessagesConversion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMessagesConversion() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMessagesConversion(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMessagesConversion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessagesConversion(::grpc::ServerContext* /*context*/, const ::messenger::GetMessagesConversionRequest* /*request*/, ::messenger::GetMessagesConversionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMessagesConversion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNewMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNewMessages() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetNewMessages(context, request); }));
    }
    ~WithRawCallbackMethod_GetNewMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewMessages(::grpc::ServerContext* /*context*/, const ::messenger::GetNewMessagesRequest* /*request*/, ::grpc::ServerWriter< ::messenger::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetNewMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendMessage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::messenger::SentMessage, ::messenger::ChatMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::messenger::SentMessage, ::messenger::ChatMessage>* streamer) {
                       return this->StreamedSendMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendMessage(::grpc::ServerContext* /*context*/, const ::messenger::SentMessage* /*request*/, ::messenger::ChatMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::messenger::SentMessage,::messenger::ChatMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMessagesOffset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMessagesOffset() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::messenger::GetMessagesOffsetRequest, ::messenger::GetMessagesOffsetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::messenger::GetMessagesOffsetRequest, ::messenger::GetMessagesOffsetResponse>* streamer) {
                       return this->StreamedGetMessagesOffset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMessagesOffset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMessagesOffset(::grpc::ServerContext* /*context*/, const ::messenger::GetMessagesOffsetRequest* /*request*/, ::messenger::GetMessagesOffsetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMessagesOffset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::messenger::GetMessagesOffsetRequest,::messenger::GetMessagesOffsetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMessagesConversion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMessagesConversion() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::messenger::GetMessagesConversionRequest, ::messenger::GetMessagesConversionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::messenger::GetMessagesConversionRequest, ::messenger::GetMessagesConversionResponse>* streamer) {
                       return this->StreamedGetMessagesConversion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMessagesConversion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMessagesConversion(::grpc::ServerContext* /*context*/, const ::messenger::GetMessagesConversionRequest* /*request*/, ::messenger::GetMessagesConversionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMessagesConversion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::messenger::GetMessagesConversionRequest,::messenger::GetMessagesConversionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_GetMessagesOffset<WithStreamedUnaryMethod_GetMessagesConversion<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetNewMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetNewMessages() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::messenger::GetNewMessagesRequest, ::messenger::ChatMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::messenger::GetNewMessagesRequest, ::messenger::ChatMessage>* streamer) {
                       return this->StreamedGetNewMessages(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetNewMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNewMessages(::grpc::ServerContext* /*context*/, const ::messenger::GetNewMessagesRequest* /*request*/, ::grpc::ServerWriter< ::messenger::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetNewMessages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::messenger::GetNewMessagesRequest,::messenger::ChatMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetNewMessages<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendMessage<WithStreamedUnaryMethod_GetMessagesOffset<WithStreamedUnaryMethod_GetMessagesConversion<WithSplitStreamingMethod_GetNewMessages<Service > > > > StreamedService;
};

}  // namespace messenger


#endif  // GRPC_messenger_2eproto__INCLUDED
