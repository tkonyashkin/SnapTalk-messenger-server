// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messenger.proto

#include "messenger.pb.h"
#include "messenger.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace messenger {

static const char* MessengerService_method_names[] = {
  "/messenger.MessengerService/SendMessage",
  "/messenger.MessengerService/CreateGroupChat",
  "/messenger.MessengerService/UpdateGroupChat",
  "/messenger.MessengerService/AssignRoleToUser",
  "/messenger.MessengerService/CreateReminder",
  "/messenger.MessengerService/MarkToDoItemCompleted",
  "/messenger.MessengerService/DeleteMessage",
  "/messenger.MessengerService/EditMessage",
  "/messenger.MessengerService/Register",
  "/messenger.MessengerService/Login",
  "/messenger.MessengerService/Logout",
  "/messenger.MessengerService/UpdateUserProfile",
  "/messenger.MessengerService/UpdateMessageStatus",
  "/messenger.MessengerService/AddContact",
  "/messenger.MessengerService/RemoveContact",
  "/messenger.MessengerService/CreateChatFolder",
  "/messenger.MessengerService/UpdateChatFolder",
  "/messenger.MessengerService/DeleteChatFolder",
  "/messenger.MessengerService/GetFoldersOffset",
  "/messenger.MessengerService/GetFolders",
  "/messenger.MessengerService/GetNewFolders",
  "/messenger.MessengerService/AddChatToFolder",
  "/messenger.MessengerService/RemoveChatFromFolder",
  "/messenger.MessengerService/AddGroupMember",
  "/messenger.MessengerService/RemoveGroupMember",
  "/messenger.MessengerService/GetMessagesOffset",
  "/messenger.MessengerService/GetMessagesConversion",
  "/messenger.MessengerService/GetNewMessages",
  "/messenger.MessengerService/GetGroupChatsOffset",
  "/messenger.MessengerService/GetGroupChatsConversion",
  "/messenger.MessengerService/GetNewGroupChats",
  "/messenger.MessengerService/SendFile",
  "/messenger.MessengerService/SearchMessages",
  "/messenger.MessengerService/SearchChats",
  "/messenger.MessengerService/UpdateReminder",
  "/messenger.MessengerService/DeleteReminder",
  "/messenger.MessengerService/UpdateNotificationSettings",
  "/messenger.MessengerService/CreateToDoItem",
  "/messenger.MessengerService/UpdateToDoItem",
  "/messenger.MessengerService/DeleteToDoItem",
  "/messenger.MessengerService/GetToDoItemsOffset",
  "/messenger.MessengerService/GetToDoItems",
  "/messenger.MessengerService/GetNewToDoItems",
};

std::unique_ptr< MessengerService::Stub> MessengerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MessengerService::Stub> stub(new MessengerService::Stub(channel, options));
  return stub;
}

MessengerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendMessage_(MessengerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateGroupChat_(MessengerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGroupChat_(MessengerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssignRoleToUser_(MessengerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateReminder_(MessengerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarkToDoItemCompleted_(MessengerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteMessage_(MessengerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditMessage_(MessengerService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Register_(MessengerService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(MessengerService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logout_(MessengerService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUserProfile_(MessengerService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateMessageStatus_(MessengerService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddContact_(MessengerService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveContact_(MessengerService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateChatFolder_(MessengerService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateChatFolder_(MessengerService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteChatFolder_(MessengerService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFoldersOffset_(MessengerService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFolders_(MessengerService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNewFolders_(MessengerService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_AddChatToFolder_(MessengerService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveChatFromFolder_(MessengerService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddGroupMember_(MessengerService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveGroupMember_(MessengerService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMessagesOffset_(MessengerService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMessagesConversion_(MessengerService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNewMessages_(MessengerService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetGroupChatsOffset_(MessengerService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGroupChatsConversion_(MessengerService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNewGroupChats_(MessengerService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendFile_(MessengerService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchMessages_(MessengerService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchChats_(MessengerService_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateReminder_(MessengerService_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteReminder_(MessengerService_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNotificationSettings_(MessengerService_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateToDoItem_(MessengerService_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateToDoItem_(MessengerService_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteToDoItem_(MessengerService_method_names[39], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetToDoItemsOffset_(MessengerService_method_names[40], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetToDoItems_(MessengerService_method_names[41], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNewToDoItems_(MessengerService_method_names[42], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MessengerService::Stub::SendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::messenger::ChatMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::SentMessage, ::messenger::ChatMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void MessengerService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage* request, ::messenger::ChatMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::SentMessage, ::messenger::ChatMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage* request, ::messenger::ChatMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::ChatMessage>* MessengerService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::ChatMessage, ::messenger::SentMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::ChatMessage>* MessengerService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::CreateGroupChat(::grpc::ClientContext* context, const ::messenger::GroupChat& request, ::messenger::GroupChat* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::GroupChat, ::messenger::GroupChat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateGroupChat_, context, request, response);
}

void MessengerService::Stub::async::CreateGroupChat(::grpc::ClientContext* context, const ::messenger::GroupChat* request, ::messenger::GroupChat* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::GroupChat, ::messenger::GroupChat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGroupChat_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::CreateGroupChat(::grpc::ClientContext* context, const ::messenger::GroupChat* request, ::messenger::GroupChat* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGroupChat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::GroupChat>* MessengerService::Stub::PrepareAsyncCreateGroupChatRaw(::grpc::ClientContext* context, const ::messenger::GroupChat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::GroupChat, ::messenger::GroupChat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateGroupChat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::GroupChat>* MessengerService::Stub::AsyncCreateGroupChatRaw(::grpc::ClientContext* context, const ::messenger::GroupChat& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateGroupChatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::UpdateGroupChat(::grpc::ClientContext* context, const ::messenger::GroupChat& request, ::messenger::GroupChat* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::GroupChat, ::messenger::GroupChat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateGroupChat_, context, request, response);
}

void MessengerService::Stub::async::UpdateGroupChat(::grpc::ClientContext* context, const ::messenger::GroupChat* request, ::messenger::GroupChat* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::GroupChat, ::messenger::GroupChat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupChat_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::UpdateGroupChat(::grpc::ClientContext* context, const ::messenger::GroupChat* request, ::messenger::GroupChat* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupChat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::GroupChat>* MessengerService::Stub::PrepareAsyncUpdateGroupChatRaw(::grpc::ClientContext* context, const ::messenger::GroupChat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::GroupChat, ::messenger::GroupChat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateGroupChat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::GroupChat>* MessengerService::Stub::AsyncUpdateGroupChatRaw(::grpc::ClientContext* context, const ::messenger::GroupChat& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateGroupChatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::AssignRoleToUser(::grpc::ClientContext* context, const ::messenger::Role& request, ::messenger::Role* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::Role, ::messenger::Role, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AssignRoleToUser_, context, request, response);
}

void MessengerService::Stub::async::AssignRoleToUser(::grpc::ClientContext* context, const ::messenger::Role* request, ::messenger::Role* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::Role, ::messenger::Role, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssignRoleToUser_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::AssignRoleToUser(::grpc::ClientContext* context, const ::messenger::Role* request, ::messenger::Role* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AssignRoleToUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::Role>* MessengerService::Stub::PrepareAsyncAssignRoleToUserRaw(::grpc::ClientContext* context, const ::messenger::Role& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::Role, ::messenger::Role, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AssignRoleToUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::Role>* MessengerService::Stub::AsyncAssignRoleToUserRaw(::grpc::ClientContext* context, const ::messenger::Role& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAssignRoleToUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::CreateReminder(::grpc::ClientContext* context, const ::messenger::Reminder& request, ::messenger::Reminder* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::Reminder, ::messenger::Reminder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateReminder_, context, request, response);
}

void MessengerService::Stub::async::CreateReminder(::grpc::ClientContext* context, const ::messenger::Reminder* request, ::messenger::Reminder* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::Reminder, ::messenger::Reminder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateReminder_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::CreateReminder(::grpc::ClientContext* context, const ::messenger::Reminder* request, ::messenger::Reminder* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateReminder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::Reminder>* MessengerService::Stub::PrepareAsyncCreateReminderRaw(::grpc::ClientContext* context, const ::messenger::Reminder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::Reminder, ::messenger::Reminder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateReminder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::Reminder>* MessengerService::Stub::AsyncCreateReminderRaw(::grpc::ClientContext* context, const ::messenger::Reminder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateReminderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::MarkToDoItemCompleted(::grpc::ClientContext* context, const ::messenger::ToDoItem& request, ::messenger::ToDoItem* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MarkToDoItemCompleted_, context, request, response);
}

void MessengerService::Stub::async::MarkToDoItemCompleted(::grpc::ClientContext* context, const ::messenger::ToDoItem* request, ::messenger::ToDoItem* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarkToDoItemCompleted_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::MarkToDoItemCompleted(::grpc::ClientContext* context, const ::messenger::ToDoItem* request, ::messenger::ToDoItem* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MarkToDoItemCompleted_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::ToDoItem>* MessengerService::Stub::PrepareAsyncMarkToDoItemCompletedRaw(::grpc::ClientContext* context, const ::messenger::ToDoItem& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MarkToDoItemCompleted_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::ToDoItem>* MessengerService::Stub::AsyncMarkToDoItemCompletedRaw(::grpc::ClientContext* context, const ::messenger::ToDoItem& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarkToDoItemCompletedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::DeleteMessage(::grpc::ClientContext* context, const ::messenger::DeleteMessageRequest& request, ::messenger::DeleteMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::DeleteMessageRequest, ::messenger::DeleteMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteMessage_, context, request, response);
}

void MessengerService::Stub::async::DeleteMessage(::grpc::ClientContext* context, const ::messenger::DeleteMessageRequest* request, ::messenger::DeleteMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::DeleteMessageRequest, ::messenger::DeleteMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMessage_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::DeleteMessage(::grpc::ClientContext* context, const ::messenger::DeleteMessageRequest* request, ::messenger::DeleteMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::DeleteMessageResponse>* MessengerService::Stub::PrepareAsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::messenger::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::DeleteMessageResponse, ::messenger::DeleteMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::DeleteMessageResponse>* MessengerService::Stub::AsyncDeleteMessageRaw(::grpc::ClientContext* context, const ::messenger::DeleteMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::EditMessage(::grpc::ClientContext* context, const ::messenger::EditMessageRequest& request, ::messenger::EditMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::EditMessageRequest, ::messenger::EditMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditMessage_, context, request, response);
}

void MessengerService::Stub::async::EditMessage(::grpc::ClientContext* context, const ::messenger::EditMessageRequest* request, ::messenger::EditMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::EditMessageRequest, ::messenger::EditMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditMessage_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::EditMessage(::grpc::ClientContext* context, const ::messenger::EditMessageRequest* request, ::messenger::EditMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::EditMessageResponse>* MessengerService::Stub::PrepareAsyncEditMessageRaw(::grpc::ClientContext* context, const ::messenger::EditMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::EditMessageResponse, ::messenger::EditMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::EditMessageResponse>* MessengerService::Stub::AsyncEditMessageRaw(::grpc::ClientContext* context, const ::messenger::EditMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::Register(::grpc::ClientContext* context, const ::messenger::RegisterRequest& request, ::messenger::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::RegisterRequest, ::messenger::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Register_, context, request, response);
}

void MessengerService::Stub::async::Register(::grpc::ClientContext* context, const ::messenger::RegisterRequest* request, ::messenger::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::RegisterRequest, ::messenger::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::Register(::grpc::ClientContext* context, const ::messenger::RegisterRequest* request, ::messenger::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::RegisterResponse>* MessengerService::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::messenger::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::RegisterResponse, ::messenger::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::RegisterResponse>* MessengerService::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::messenger::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::Login(::grpc::ClientContext* context, const ::messenger::LoginRequest& request, ::messenger::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::LoginRequest, ::messenger::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void MessengerService::Stub::async::Login(::grpc::ClientContext* context, const ::messenger::LoginRequest* request, ::messenger::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::LoginRequest, ::messenger::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::Login(::grpc::ClientContext* context, const ::messenger::LoginRequest* request, ::messenger::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::LoginResponse>* MessengerService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::messenger::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::LoginResponse, ::messenger::LoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::LoginResponse>* MessengerService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::messenger::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::Logout(::grpc::ClientContext* context, const ::messenger::LogoutRequest& request, ::messenger::LogoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::LogoutRequest, ::messenger::LogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Logout_, context, request, response);
}

void MessengerService::Stub::async::Logout(::grpc::ClientContext* context, const ::messenger::LogoutRequest* request, ::messenger::LogoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::LogoutRequest, ::messenger::LogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::Logout(::grpc::ClientContext* context, const ::messenger::LogoutRequest* request, ::messenger::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::LogoutResponse>* MessengerService::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::messenger::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::LogoutResponse, ::messenger::LogoutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Logout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::LogoutResponse>* MessengerService::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::messenger::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::UpdateUserProfile(::grpc::ClientContext* context, const ::messenger::UpdateUserProfileRequest& request, ::messenger::UpdateUserProfileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::UpdateUserProfileRequest, ::messenger::UpdateUserProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateUserProfile_, context, request, response);
}

void MessengerService::Stub::async::UpdateUserProfile(::grpc::ClientContext* context, const ::messenger::UpdateUserProfileRequest* request, ::messenger::UpdateUserProfileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::UpdateUserProfileRequest, ::messenger::UpdateUserProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUserProfile_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::UpdateUserProfile(::grpc::ClientContext* context, const ::messenger::UpdateUserProfileRequest* request, ::messenger::UpdateUserProfileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUserProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::UpdateUserProfileResponse>* MessengerService::Stub::PrepareAsyncUpdateUserProfileRaw(::grpc::ClientContext* context, const ::messenger::UpdateUserProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::UpdateUserProfileResponse, ::messenger::UpdateUserProfileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateUserProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::UpdateUserProfileResponse>* MessengerService::Stub::AsyncUpdateUserProfileRaw(::grpc::ClientContext* context, const ::messenger::UpdateUserProfileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateUserProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::UpdateMessageStatus(::grpc::ClientContext* context, const ::messenger::UpdateMessageStatusRequest& request, ::messenger::UpdateMessageStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::UpdateMessageStatusRequest, ::messenger::UpdateMessageStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateMessageStatus_, context, request, response);
}

void MessengerService::Stub::async::UpdateMessageStatus(::grpc::ClientContext* context, const ::messenger::UpdateMessageStatusRequest* request, ::messenger::UpdateMessageStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::UpdateMessageStatusRequest, ::messenger::UpdateMessageStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMessageStatus_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::UpdateMessageStatus(::grpc::ClientContext* context, const ::messenger::UpdateMessageStatusRequest* request, ::messenger::UpdateMessageStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMessageStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::UpdateMessageStatusResponse>* MessengerService::Stub::PrepareAsyncUpdateMessageStatusRaw(::grpc::ClientContext* context, const ::messenger::UpdateMessageStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::UpdateMessageStatusResponse, ::messenger::UpdateMessageStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateMessageStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::UpdateMessageStatusResponse>* MessengerService::Stub::AsyncUpdateMessageStatusRaw(::grpc::ClientContext* context, const ::messenger::UpdateMessageStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateMessageStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::AddContact(::grpc::ClientContext* context, const ::messenger::AddContactRequest& request, ::messenger::AddContactResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::AddContactRequest, ::messenger::AddContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddContact_, context, request, response);
}

void MessengerService::Stub::async::AddContact(::grpc::ClientContext* context, const ::messenger::AddContactRequest* request, ::messenger::AddContactResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::AddContactRequest, ::messenger::AddContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddContact_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::AddContact(::grpc::ClientContext* context, const ::messenger::AddContactRequest* request, ::messenger::AddContactResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddContact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::AddContactResponse>* MessengerService::Stub::PrepareAsyncAddContactRaw(::grpc::ClientContext* context, const ::messenger::AddContactRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::AddContactResponse, ::messenger::AddContactRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddContact_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::AddContactResponse>* MessengerService::Stub::AsyncAddContactRaw(::grpc::ClientContext* context, const ::messenger::AddContactRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddContactRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::RemoveContact(::grpc::ClientContext* context, const ::messenger::RemoveContactRequest& request, ::messenger::RemoveContactResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::RemoveContactRequest, ::messenger::RemoveContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveContact_, context, request, response);
}

void MessengerService::Stub::async::RemoveContact(::grpc::ClientContext* context, const ::messenger::RemoveContactRequest* request, ::messenger::RemoveContactResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::RemoveContactRequest, ::messenger::RemoveContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveContact_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::RemoveContact(::grpc::ClientContext* context, const ::messenger::RemoveContactRequest* request, ::messenger::RemoveContactResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveContact_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::RemoveContactResponse>* MessengerService::Stub::PrepareAsyncRemoveContactRaw(::grpc::ClientContext* context, const ::messenger::RemoveContactRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::RemoveContactResponse, ::messenger::RemoveContactRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveContact_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::RemoveContactResponse>* MessengerService::Stub::AsyncRemoveContactRaw(::grpc::ClientContext* context, const ::messenger::RemoveContactRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveContactRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::CreateChatFolder(::grpc::ClientContext* context, const ::messenger::CreateChatFolderRequest& request, ::messenger::CreateChatFolderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::CreateChatFolderRequest, ::messenger::CreateChatFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateChatFolder_, context, request, response);
}

void MessengerService::Stub::async::CreateChatFolder(::grpc::ClientContext* context, const ::messenger::CreateChatFolderRequest* request, ::messenger::CreateChatFolderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::CreateChatFolderRequest, ::messenger::CreateChatFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChatFolder_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::CreateChatFolder(::grpc::ClientContext* context, const ::messenger::CreateChatFolderRequest* request, ::messenger::CreateChatFolderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChatFolder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::CreateChatFolderResponse>* MessengerService::Stub::PrepareAsyncCreateChatFolderRaw(::grpc::ClientContext* context, const ::messenger::CreateChatFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::CreateChatFolderResponse, ::messenger::CreateChatFolderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateChatFolder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::CreateChatFolderResponse>* MessengerService::Stub::AsyncCreateChatFolderRaw(::grpc::ClientContext* context, const ::messenger::CreateChatFolderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateChatFolderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::UpdateChatFolder(::grpc::ClientContext* context, const ::messenger::UpdateChatFolderRequest& request, ::messenger::UpdateChatFolderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::UpdateChatFolderRequest, ::messenger::UpdateChatFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateChatFolder_, context, request, response);
}

void MessengerService::Stub::async::UpdateChatFolder(::grpc::ClientContext* context, const ::messenger::UpdateChatFolderRequest* request, ::messenger::UpdateChatFolderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::UpdateChatFolderRequest, ::messenger::UpdateChatFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateChatFolder_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::UpdateChatFolder(::grpc::ClientContext* context, const ::messenger::UpdateChatFolderRequest* request, ::messenger::UpdateChatFolderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateChatFolder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::UpdateChatFolderResponse>* MessengerService::Stub::PrepareAsyncUpdateChatFolderRaw(::grpc::ClientContext* context, const ::messenger::UpdateChatFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::UpdateChatFolderResponse, ::messenger::UpdateChatFolderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateChatFolder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::UpdateChatFolderResponse>* MessengerService::Stub::AsyncUpdateChatFolderRaw(::grpc::ClientContext* context, const ::messenger::UpdateChatFolderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateChatFolderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::DeleteChatFolder(::grpc::ClientContext* context, const ::messenger::DeleteChatFolderRequest& request, ::messenger::DeleteChatFolderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::DeleteChatFolderRequest, ::messenger::DeleteChatFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteChatFolder_, context, request, response);
}

void MessengerService::Stub::async::DeleteChatFolder(::grpc::ClientContext* context, const ::messenger::DeleteChatFolderRequest* request, ::messenger::DeleteChatFolderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::DeleteChatFolderRequest, ::messenger::DeleteChatFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteChatFolder_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::DeleteChatFolder(::grpc::ClientContext* context, const ::messenger::DeleteChatFolderRequest* request, ::messenger::DeleteChatFolderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteChatFolder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::DeleteChatFolderResponse>* MessengerService::Stub::PrepareAsyncDeleteChatFolderRaw(::grpc::ClientContext* context, const ::messenger::DeleteChatFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::DeleteChatFolderResponse, ::messenger::DeleteChatFolderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteChatFolder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::DeleteChatFolderResponse>* MessengerService::Stub::AsyncDeleteChatFolderRaw(::grpc::ClientContext* context, const ::messenger::DeleteChatFolderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteChatFolderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::GetFoldersOffset(::grpc::ClientContext* context, const ::messenger::GetFoldersOffsetRequest& request, ::messenger::GetFoldersOffsetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::GetFoldersOffsetRequest, ::messenger::GetFoldersOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFoldersOffset_, context, request, response);
}

void MessengerService::Stub::async::GetFoldersOffset(::grpc::ClientContext* context, const ::messenger::GetFoldersOffsetRequest* request, ::messenger::GetFoldersOffsetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::GetFoldersOffsetRequest, ::messenger::GetFoldersOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFoldersOffset_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::GetFoldersOffset(::grpc::ClientContext* context, const ::messenger::GetFoldersOffsetRequest* request, ::messenger::GetFoldersOffsetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFoldersOffset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetFoldersOffsetResponse>* MessengerService::Stub::PrepareAsyncGetFoldersOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetFoldersOffsetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::GetFoldersOffsetResponse, ::messenger::GetFoldersOffsetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFoldersOffset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetFoldersOffsetResponse>* MessengerService::Stub::AsyncGetFoldersOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetFoldersOffsetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFoldersOffsetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::GetFolders(::grpc::ClientContext* context, const ::messenger::GetFoldersRequest& request, ::messenger::GetFoldersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::GetFoldersRequest, ::messenger::GetFoldersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFolders_, context, request, response);
}

void MessengerService::Stub::async::GetFolders(::grpc::ClientContext* context, const ::messenger::GetFoldersRequest* request, ::messenger::GetFoldersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::GetFoldersRequest, ::messenger::GetFoldersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFolders_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::GetFolders(::grpc::ClientContext* context, const ::messenger::GetFoldersRequest* request, ::messenger::GetFoldersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFolders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetFoldersResponse>* MessengerService::Stub::PrepareAsyncGetFoldersRaw(::grpc::ClientContext* context, const ::messenger::GetFoldersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::GetFoldersResponse, ::messenger::GetFoldersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFolders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetFoldersResponse>* MessengerService::Stub::AsyncGetFoldersRaw(::grpc::ClientContext* context, const ::messenger::GetFoldersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFoldersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::messenger::ChatFolder>* MessengerService::Stub::GetNewFoldersRaw(::grpc::ClientContext* context, const ::messenger::GetNewFoldersRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::messenger::ChatFolder>::Create(channel_.get(), rpcmethod_GetNewFolders_, context, request);
}

void MessengerService::Stub::async::GetNewFolders(::grpc::ClientContext* context, const ::messenger::GetNewFoldersRequest* request, ::grpc::ClientReadReactor< ::messenger::ChatFolder>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::messenger::ChatFolder>::Create(stub_->channel_.get(), stub_->rpcmethod_GetNewFolders_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::messenger::ChatFolder>* MessengerService::Stub::AsyncGetNewFoldersRaw(::grpc::ClientContext* context, const ::messenger::GetNewFoldersRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::messenger::ChatFolder>::Create(channel_.get(), cq, rpcmethod_GetNewFolders_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::messenger::ChatFolder>* MessengerService::Stub::PrepareAsyncGetNewFoldersRaw(::grpc::ClientContext* context, const ::messenger::GetNewFoldersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::messenger::ChatFolder>::Create(channel_.get(), cq, rpcmethod_GetNewFolders_, context, request, false, nullptr);
}

::grpc::Status MessengerService::Stub::AddChatToFolder(::grpc::ClientContext* context, const ::messenger::AddChatToFolderRequest& request, ::messenger::AddChatToFolderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::AddChatToFolderRequest, ::messenger::AddChatToFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddChatToFolder_, context, request, response);
}

void MessengerService::Stub::async::AddChatToFolder(::grpc::ClientContext* context, const ::messenger::AddChatToFolderRequest* request, ::messenger::AddChatToFolderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::AddChatToFolderRequest, ::messenger::AddChatToFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddChatToFolder_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::AddChatToFolder(::grpc::ClientContext* context, const ::messenger::AddChatToFolderRequest* request, ::messenger::AddChatToFolderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddChatToFolder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::AddChatToFolderResponse>* MessengerService::Stub::PrepareAsyncAddChatToFolderRaw(::grpc::ClientContext* context, const ::messenger::AddChatToFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::AddChatToFolderResponse, ::messenger::AddChatToFolderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddChatToFolder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::AddChatToFolderResponse>* MessengerService::Stub::AsyncAddChatToFolderRaw(::grpc::ClientContext* context, const ::messenger::AddChatToFolderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddChatToFolderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::RemoveChatFromFolder(::grpc::ClientContext* context, const ::messenger::RemoveChatFromFolderRequest& request, ::messenger::RemoveChatFromFolderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::RemoveChatFromFolderRequest, ::messenger::RemoveChatFromFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveChatFromFolder_, context, request, response);
}

void MessengerService::Stub::async::RemoveChatFromFolder(::grpc::ClientContext* context, const ::messenger::RemoveChatFromFolderRequest* request, ::messenger::RemoveChatFromFolderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::RemoveChatFromFolderRequest, ::messenger::RemoveChatFromFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveChatFromFolder_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::RemoveChatFromFolder(::grpc::ClientContext* context, const ::messenger::RemoveChatFromFolderRequest* request, ::messenger::RemoveChatFromFolderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveChatFromFolder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::RemoveChatFromFolderResponse>* MessengerService::Stub::PrepareAsyncRemoveChatFromFolderRaw(::grpc::ClientContext* context, const ::messenger::RemoveChatFromFolderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::RemoveChatFromFolderResponse, ::messenger::RemoveChatFromFolderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveChatFromFolder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::RemoveChatFromFolderResponse>* MessengerService::Stub::AsyncRemoveChatFromFolderRaw(::grpc::ClientContext* context, const ::messenger::RemoveChatFromFolderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveChatFromFolderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::AddGroupMember(::grpc::ClientContext* context, const ::messenger::AddGroupMemberRequest& request, ::messenger::AddGroupMemberResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::AddGroupMemberRequest, ::messenger::AddGroupMemberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddGroupMember_, context, request, response);
}

void MessengerService::Stub::async::AddGroupMember(::grpc::ClientContext* context, const ::messenger::AddGroupMemberRequest* request, ::messenger::AddGroupMemberResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::AddGroupMemberRequest, ::messenger::AddGroupMemberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddGroupMember_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::AddGroupMember(::grpc::ClientContext* context, const ::messenger::AddGroupMemberRequest* request, ::messenger::AddGroupMemberResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddGroupMember_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::AddGroupMemberResponse>* MessengerService::Stub::PrepareAsyncAddGroupMemberRaw(::grpc::ClientContext* context, const ::messenger::AddGroupMemberRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::AddGroupMemberResponse, ::messenger::AddGroupMemberRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddGroupMember_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::AddGroupMemberResponse>* MessengerService::Stub::AsyncAddGroupMemberRaw(::grpc::ClientContext* context, const ::messenger::AddGroupMemberRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddGroupMemberRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::RemoveGroupMember(::grpc::ClientContext* context, const ::messenger::RemoveGroupMemberRequest& request, ::messenger::RemoveGroupMemberResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::RemoveGroupMemberRequest, ::messenger::RemoveGroupMemberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveGroupMember_, context, request, response);
}

void MessengerService::Stub::async::RemoveGroupMember(::grpc::ClientContext* context, const ::messenger::RemoveGroupMemberRequest* request, ::messenger::RemoveGroupMemberResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::RemoveGroupMemberRequest, ::messenger::RemoveGroupMemberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveGroupMember_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::RemoveGroupMember(::grpc::ClientContext* context, const ::messenger::RemoveGroupMemberRequest* request, ::messenger::RemoveGroupMemberResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveGroupMember_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::RemoveGroupMemberResponse>* MessengerService::Stub::PrepareAsyncRemoveGroupMemberRaw(::grpc::ClientContext* context, const ::messenger::RemoveGroupMemberRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::RemoveGroupMemberResponse, ::messenger::RemoveGroupMemberRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveGroupMember_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::RemoveGroupMemberResponse>* MessengerService::Stub::AsyncRemoveGroupMemberRaw(::grpc::ClientContext* context, const ::messenger::RemoveGroupMemberRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveGroupMemberRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::GetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::messenger::GetMessagesOffsetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::GetMessagesOffsetRequest, ::messenger::GetMessagesOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMessagesOffset_, context, request, response);
}

void MessengerService::Stub::async::GetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest* request, ::messenger::GetMessagesOffsetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::GetMessagesOffsetRequest, ::messenger::GetMessagesOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessagesOffset_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::GetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest* request, ::messenger::GetMessagesOffsetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessagesOffset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesOffsetResponse>* MessengerService::Stub::PrepareAsyncGetMessagesOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::GetMessagesOffsetResponse, ::messenger::GetMessagesOffsetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMessagesOffset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesOffsetResponse>* MessengerService::Stub::AsyncGetMessagesOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMessagesOffsetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::GetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::messenger::GetMessagesConversionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::GetMessagesConversionRequest, ::messenger::GetMessagesConversionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMessagesConversion_, context, request, response);
}

void MessengerService::Stub::async::GetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest* request, ::messenger::GetMessagesConversionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::GetMessagesConversionRequest, ::messenger::GetMessagesConversionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessagesConversion_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::GetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest* request, ::messenger::GetMessagesConversionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessagesConversion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesConversionResponse>* MessengerService::Stub::PrepareAsyncGetMessagesConversionRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::GetMessagesConversionResponse, ::messenger::GetMessagesConversionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMessagesConversion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesConversionResponse>* MessengerService::Stub::AsyncGetMessagesConversionRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMessagesConversionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::messenger::ChatMessage>* MessengerService::Stub::GetNewMessagesRaw(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::messenger::ChatMessage>::Create(channel_.get(), rpcmethod_GetNewMessages_, context, request);
}

void MessengerService::Stub::async::GetNewMessages(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest* request, ::grpc::ClientReadReactor< ::messenger::ChatMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::messenger::ChatMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_GetNewMessages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::messenger::ChatMessage>* MessengerService::Stub::AsyncGetNewMessagesRaw(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::messenger::ChatMessage>::Create(channel_.get(), cq, rpcmethod_GetNewMessages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::messenger::ChatMessage>* MessengerService::Stub::PrepareAsyncGetNewMessagesRaw(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::messenger::ChatMessage>::Create(channel_.get(), cq, rpcmethod_GetNewMessages_, context, request, false, nullptr);
}

::grpc::Status MessengerService::Stub::GetGroupChatsOffset(::grpc::ClientContext* context, const ::messenger::GetGroupChatsOffsetRequest& request, ::messenger::GetGroupChatsOffsetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::GetGroupChatsOffsetRequest, ::messenger::GetGroupChatsOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGroupChatsOffset_, context, request, response);
}

void MessengerService::Stub::async::GetGroupChatsOffset(::grpc::ClientContext* context, const ::messenger::GetGroupChatsOffsetRequest* request, ::messenger::GetGroupChatsOffsetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::GetGroupChatsOffsetRequest, ::messenger::GetGroupChatsOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGroupChatsOffset_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::GetGroupChatsOffset(::grpc::ClientContext* context, const ::messenger::GetGroupChatsOffsetRequest* request, ::messenger::GetGroupChatsOffsetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGroupChatsOffset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetGroupChatsOffsetResponse>* MessengerService::Stub::PrepareAsyncGetGroupChatsOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetGroupChatsOffsetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::GetGroupChatsOffsetResponse, ::messenger::GetGroupChatsOffsetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGroupChatsOffset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetGroupChatsOffsetResponse>* MessengerService::Stub::AsyncGetGroupChatsOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetGroupChatsOffsetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGroupChatsOffsetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::GetGroupChatsConversion(::grpc::ClientContext* context, const ::messenger::GetGroupChatsConversionRequest& request, ::messenger::GetGroupChatsConversionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::GetGroupChatsConversionRequest, ::messenger::GetGroupChatsConversionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetGroupChatsConversion_, context, request, response);
}

void MessengerService::Stub::async::GetGroupChatsConversion(::grpc::ClientContext* context, const ::messenger::GetGroupChatsConversionRequest* request, ::messenger::GetGroupChatsConversionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::GetGroupChatsConversionRequest, ::messenger::GetGroupChatsConversionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGroupChatsConversion_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::GetGroupChatsConversion(::grpc::ClientContext* context, const ::messenger::GetGroupChatsConversionRequest* request, ::messenger::GetGroupChatsConversionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetGroupChatsConversion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetGroupChatsConversionResponse>* MessengerService::Stub::PrepareAsyncGetGroupChatsConversionRaw(::grpc::ClientContext* context, const ::messenger::GetGroupChatsConversionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::GetGroupChatsConversionResponse, ::messenger::GetGroupChatsConversionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetGroupChatsConversion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetGroupChatsConversionResponse>* MessengerService::Stub::AsyncGetGroupChatsConversionRaw(::grpc::ClientContext* context, const ::messenger::GetGroupChatsConversionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetGroupChatsConversionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::messenger::GroupChat>* MessengerService::Stub::GetNewGroupChatsRaw(::grpc::ClientContext* context, const ::messenger::GetNewGroupChatsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::messenger::GroupChat>::Create(channel_.get(), rpcmethod_GetNewGroupChats_, context, request);
}

void MessengerService::Stub::async::GetNewGroupChats(::grpc::ClientContext* context, const ::messenger::GetNewGroupChatsRequest* request, ::grpc::ClientReadReactor< ::messenger::GroupChat>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::messenger::GroupChat>::Create(stub_->channel_.get(), stub_->rpcmethod_GetNewGroupChats_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::messenger::GroupChat>* MessengerService::Stub::AsyncGetNewGroupChatsRaw(::grpc::ClientContext* context, const ::messenger::GetNewGroupChatsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::messenger::GroupChat>::Create(channel_.get(), cq, rpcmethod_GetNewGroupChats_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::messenger::GroupChat>* MessengerService::Stub::PrepareAsyncGetNewGroupChatsRaw(::grpc::ClientContext* context, const ::messenger::GetNewGroupChatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::messenger::GroupChat>::Create(channel_.get(), cq, rpcmethod_GetNewGroupChats_, context, request, false, nullptr);
}

::grpc::Status MessengerService::Stub::SendFile(::grpc::ClientContext* context, const ::messenger::FileMessage& request, ::messenger::FileMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::FileMessage, ::messenger::FileMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendFile_, context, request, response);
}

void MessengerService::Stub::async::SendFile(::grpc::ClientContext* context, const ::messenger::FileMessage* request, ::messenger::FileMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::FileMessage, ::messenger::FileMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendFile_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::SendFile(::grpc::ClientContext* context, const ::messenger::FileMessage* request, ::messenger::FileMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::FileMessage>* MessengerService::Stub::PrepareAsyncSendFileRaw(::grpc::ClientContext* context, const ::messenger::FileMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::FileMessage, ::messenger::FileMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::FileMessage>* MessengerService::Stub::AsyncSendFileRaw(::grpc::ClientContext* context, const ::messenger::FileMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::SearchMessages(::grpc::ClientContext* context, const ::messenger::SearchRequest& request, ::messenger::SearchMessagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::SearchRequest, ::messenger::SearchMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchMessages_, context, request, response);
}

void MessengerService::Stub::async::SearchMessages(::grpc::ClientContext* context, const ::messenger::SearchRequest* request, ::messenger::SearchMessagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::SearchRequest, ::messenger::SearchMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchMessages_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::SearchMessages(::grpc::ClientContext* context, const ::messenger::SearchRequest* request, ::messenger::SearchMessagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::SearchMessagesResponse>* MessengerService::Stub::PrepareAsyncSearchMessagesRaw(::grpc::ClientContext* context, const ::messenger::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::SearchMessagesResponse, ::messenger::SearchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchMessages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::SearchMessagesResponse>* MessengerService::Stub::AsyncSearchMessagesRaw(::grpc::ClientContext* context, const ::messenger::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchMessagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::SearchChats(::grpc::ClientContext* context, const ::messenger::SearchRequest& request, ::messenger::SearchChatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::SearchRequest, ::messenger::SearchChatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SearchChats_, context, request, response);
}

void MessengerService::Stub::async::SearchChats(::grpc::ClientContext* context, const ::messenger::SearchRequest* request, ::messenger::SearchChatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::SearchRequest, ::messenger::SearchChatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchChats_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::SearchChats(::grpc::ClientContext* context, const ::messenger::SearchRequest* request, ::messenger::SearchChatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SearchChats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::SearchChatsResponse>* MessengerService::Stub::PrepareAsyncSearchChatsRaw(::grpc::ClientContext* context, const ::messenger::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::SearchChatsResponse, ::messenger::SearchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SearchChats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::SearchChatsResponse>* MessengerService::Stub::AsyncSearchChatsRaw(::grpc::ClientContext* context, const ::messenger::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchChatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::UpdateReminder(::grpc::ClientContext* context, const ::messenger::Reminder& request, ::messenger::Reminder* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::Reminder, ::messenger::Reminder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateReminder_, context, request, response);
}

void MessengerService::Stub::async::UpdateReminder(::grpc::ClientContext* context, const ::messenger::Reminder* request, ::messenger::Reminder* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::Reminder, ::messenger::Reminder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateReminder_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::UpdateReminder(::grpc::ClientContext* context, const ::messenger::Reminder* request, ::messenger::Reminder* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateReminder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::Reminder>* MessengerService::Stub::PrepareAsyncUpdateReminderRaw(::grpc::ClientContext* context, const ::messenger::Reminder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::Reminder, ::messenger::Reminder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateReminder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::Reminder>* MessengerService::Stub::AsyncUpdateReminderRaw(::grpc::ClientContext* context, const ::messenger::Reminder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateReminderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::DeleteReminder(::grpc::ClientContext* context, const ::messenger::Reminder& request, ::messenger::Reminder* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::Reminder, ::messenger::Reminder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteReminder_, context, request, response);
}

void MessengerService::Stub::async::DeleteReminder(::grpc::ClientContext* context, const ::messenger::Reminder* request, ::messenger::Reminder* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::Reminder, ::messenger::Reminder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteReminder_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::DeleteReminder(::grpc::ClientContext* context, const ::messenger::Reminder* request, ::messenger::Reminder* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteReminder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::Reminder>* MessengerService::Stub::PrepareAsyncDeleteReminderRaw(::grpc::ClientContext* context, const ::messenger::Reminder& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::Reminder, ::messenger::Reminder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteReminder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::Reminder>* MessengerService::Stub::AsyncDeleteReminderRaw(::grpc::ClientContext* context, const ::messenger::Reminder& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteReminderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::UpdateNotificationSettings(::grpc::ClientContext* context, const ::messenger::UpdateNotificationSettingsRequest& request, ::messenger::UpdateNotificationSettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::UpdateNotificationSettingsRequest, ::messenger::UpdateNotificationSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateNotificationSettings_, context, request, response);
}

void MessengerService::Stub::async::UpdateNotificationSettings(::grpc::ClientContext* context, const ::messenger::UpdateNotificationSettingsRequest* request, ::messenger::UpdateNotificationSettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::UpdateNotificationSettingsRequest, ::messenger::UpdateNotificationSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNotificationSettings_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::UpdateNotificationSettings(::grpc::ClientContext* context, const ::messenger::UpdateNotificationSettingsRequest* request, ::messenger::UpdateNotificationSettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNotificationSettings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::UpdateNotificationSettingsResponse>* MessengerService::Stub::PrepareAsyncUpdateNotificationSettingsRaw(::grpc::ClientContext* context, const ::messenger::UpdateNotificationSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::UpdateNotificationSettingsResponse, ::messenger::UpdateNotificationSettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateNotificationSettings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::UpdateNotificationSettingsResponse>* MessengerService::Stub::AsyncUpdateNotificationSettingsRaw(::grpc::ClientContext* context, const ::messenger::UpdateNotificationSettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNotificationSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::CreateToDoItem(::grpc::ClientContext* context, const ::messenger::ToDoItem& request, ::messenger::ToDoItem* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateToDoItem_, context, request, response);
}

void MessengerService::Stub::async::CreateToDoItem(::grpc::ClientContext* context, const ::messenger::ToDoItem* request, ::messenger::ToDoItem* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateToDoItem_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::CreateToDoItem(::grpc::ClientContext* context, const ::messenger::ToDoItem* request, ::messenger::ToDoItem* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateToDoItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::ToDoItem>* MessengerService::Stub::PrepareAsyncCreateToDoItemRaw(::grpc::ClientContext* context, const ::messenger::ToDoItem& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateToDoItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::ToDoItem>* MessengerService::Stub::AsyncCreateToDoItemRaw(::grpc::ClientContext* context, const ::messenger::ToDoItem& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateToDoItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::UpdateToDoItem(::grpc::ClientContext* context, const ::messenger::ToDoItem& request, ::messenger::ToDoItem* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateToDoItem_, context, request, response);
}

void MessengerService::Stub::async::UpdateToDoItem(::grpc::ClientContext* context, const ::messenger::ToDoItem* request, ::messenger::ToDoItem* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateToDoItem_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::UpdateToDoItem(::grpc::ClientContext* context, const ::messenger::ToDoItem* request, ::messenger::ToDoItem* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateToDoItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::ToDoItem>* MessengerService::Stub::PrepareAsyncUpdateToDoItemRaw(::grpc::ClientContext* context, const ::messenger::ToDoItem& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateToDoItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::ToDoItem>* MessengerService::Stub::AsyncUpdateToDoItemRaw(::grpc::ClientContext* context, const ::messenger::ToDoItem& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateToDoItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::DeleteToDoItem(::grpc::ClientContext* context, const ::messenger::ToDoItem& request, ::messenger::ToDoItem* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteToDoItem_, context, request, response);
}

void MessengerService::Stub::async::DeleteToDoItem(::grpc::ClientContext* context, const ::messenger::ToDoItem* request, ::messenger::ToDoItem* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteToDoItem_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::DeleteToDoItem(::grpc::ClientContext* context, const ::messenger::ToDoItem* request, ::messenger::ToDoItem* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteToDoItem_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::ToDoItem>* MessengerService::Stub::PrepareAsyncDeleteToDoItemRaw(::grpc::ClientContext* context, const ::messenger::ToDoItem& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteToDoItem_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::ToDoItem>* MessengerService::Stub::AsyncDeleteToDoItemRaw(::grpc::ClientContext* context, const ::messenger::ToDoItem& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteToDoItemRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::GetToDoItemsOffset(::grpc::ClientContext* context, const ::messenger::GetToDoItemsOffsetRequest& request, ::messenger::GetToDoItemsOffsetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::GetToDoItemsOffsetRequest, ::messenger::GetToDoItemsOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetToDoItemsOffset_, context, request, response);
}

void MessengerService::Stub::async::GetToDoItemsOffset(::grpc::ClientContext* context, const ::messenger::GetToDoItemsOffsetRequest* request, ::messenger::GetToDoItemsOffsetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::GetToDoItemsOffsetRequest, ::messenger::GetToDoItemsOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToDoItemsOffset_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::GetToDoItemsOffset(::grpc::ClientContext* context, const ::messenger::GetToDoItemsOffsetRequest* request, ::messenger::GetToDoItemsOffsetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToDoItemsOffset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetToDoItemsOffsetResponse>* MessengerService::Stub::PrepareAsyncGetToDoItemsOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetToDoItemsOffsetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::GetToDoItemsOffsetResponse, ::messenger::GetToDoItemsOffsetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetToDoItemsOffset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetToDoItemsOffsetResponse>* MessengerService::Stub::AsyncGetToDoItemsOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetToDoItemsOffsetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetToDoItemsOffsetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::GetToDoItems(::grpc::ClientContext* context, const ::messenger::GetToDoItemsRequest& request, ::messenger::GetToDoItemsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::GetToDoItemsRequest, ::messenger::GetToDoItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetToDoItems_, context, request, response);
}

void MessengerService::Stub::async::GetToDoItems(::grpc::ClientContext* context, const ::messenger::GetToDoItemsRequest* request, ::messenger::GetToDoItemsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::GetToDoItemsRequest, ::messenger::GetToDoItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToDoItems_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::GetToDoItems(::grpc::ClientContext* context, const ::messenger::GetToDoItemsRequest* request, ::messenger::GetToDoItemsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetToDoItems_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetToDoItemsResponse>* MessengerService::Stub::PrepareAsyncGetToDoItemsRaw(::grpc::ClientContext* context, const ::messenger::GetToDoItemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::GetToDoItemsResponse, ::messenger::GetToDoItemsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetToDoItems_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetToDoItemsResponse>* MessengerService::Stub::AsyncGetToDoItemsRaw(::grpc::ClientContext* context, const ::messenger::GetToDoItemsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetToDoItemsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::messenger::ToDoItem>* MessengerService::Stub::GetNewToDoItemsRaw(::grpc::ClientContext* context, const ::messenger::GetNewToDoItemsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::messenger::ToDoItem>::Create(channel_.get(), rpcmethod_GetNewToDoItems_, context, request);
}

void MessengerService::Stub::async::GetNewToDoItems(::grpc::ClientContext* context, const ::messenger::GetNewToDoItemsRequest* request, ::grpc::ClientReadReactor< ::messenger::ToDoItem>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::messenger::ToDoItem>::Create(stub_->channel_.get(), stub_->rpcmethod_GetNewToDoItems_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::messenger::ToDoItem>* MessengerService::Stub::AsyncGetNewToDoItemsRaw(::grpc::ClientContext* context, const ::messenger::GetNewToDoItemsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::messenger::ToDoItem>::Create(channel_.get(), cq, rpcmethod_GetNewToDoItems_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::messenger::ToDoItem>* MessengerService::Stub::PrepareAsyncGetNewToDoItemsRaw(::grpc::ClientContext* context, const ::messenger::GetNewToDoItemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::messenger::ToDoItem>::Create(channel_.get(), cq, rpcmethod_GetNewToDoItems_, context, request, false, nullptr);
}

MessengerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::SentMessage, ::messenger::ChatMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::SentMessage* req,
             ::messenger::ChatMessage* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::GroupChat, ::messenger::GroupChat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GroupChat* req,
             ::messenger::GroupChat* resp) {
               return service->CreateGroupChat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::GroupChat, ::messenger::GroupChat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GroupChat* req,
             ::messenger::GroupChat* resp) {
               return service->UpdateGroupChat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::Role, ::messenger::Role, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::Role* req,
             ::messenger::Role* resp) {
               return service->AssignRoleToUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::Reminder, ::messenger::Reminder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::Reminder* req,
             ::messenger::Reminder* resp) {
               return service->CreateReminder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::ToDoItem* req,
             ::messenger::ToDoItem* resp) {
               return service->MarkToDoItemCompleted(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::DeleteMessageRequest, ::messenger::DeleteMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::DeleteMessageRequest* req,
             ::messenger::DeleteMessageResponse* resp) {
               return service->DeleteMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::EditMessageRequest, ::messenger::EditMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::EditMessageRequest* req,
             ::messenger::EditMessageResponse* resp) {
               return service->EditMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::RegisterRequest, ::messenger::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::RegisterRequest* req,
             ::messenger::RegisterResponse* resp) {
               return service->Register(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::LoginRequest, ::messenger::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::LoginRequest* req,
             ::messenger::LoginResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::LogoutRequest, ::messenger::LogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::LogoutRequest* req,
             ::messenger::LogoutResponse* resp) {
               return service->Logout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::UpdateUserProfileRequest, ::messenger::UpdateUserProfileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::UpdateUserProfileRequest* req,
             ::messenger::UpdateUserProfileResponse* resp) {
               return service->UpdateUserProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::UpdateMessageStatusRequest, ::messenger::UpdateMessageStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::UpdateMessageStatusRequest* req,
             ::messenger::UpdateMessageStatusResponse* resp) {
               return service->UpdateMessageStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::AddContactRequest, ::messenger::AddContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::AddContactRequest* req,
             ::messenger::AddContactResponse* resp) {
               return service->AddContact(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::RemoveContactRequest, ::messenger::RemoveContactResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::RemoveContactRequest* req,
             ::messenger::RemoveContactResponse* resp) {
               return service->RemoveContact(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::CreateChatFolderRequest, ::messenger::CreateChatFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::CreateChatFolderRequest* req,
             ::messenger::CreateChatFolderResponse* resp) {
               return service->CreateChatFolder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::UpdateChatFolderRequest, ::messenger::UpdateChatFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::UpdateChatFolderRequest* req,
             ::messenger::UpdateChatFolderResponse* resp) {
               return service->UpdateChatFolder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::DeleteChatFolderRequest, ::messenger::DeleteChatFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::DeleteChatFolderRequest* req,
             ::messenger::DeleteChatFolderResponse* resp) {
               return service->DeleteChatFolder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::GetFoldersOffsetRequest, ::messenger::GetFoldersOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetFoldersOffsetRequest* req,
             ::messenger::GetFoldersOffsetResponse* resp) {
               return service->GetFoldersOffset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::GetFoldersRequest, ::messenger::GetFoldersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetFoldersRequest* req,
             ::messenger::GetFoldersResponse* resp) {
               return service->GetFolders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[20],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MessengerService::Service, ::messenger::GetNewFoldersRequest, ::messenger::ChatFolder>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetNewFoldersRequest* req,
             ::grpc::ServerWriter<::messenger::ChatFolder>* writer) {
               return service->GetNewFolders(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::AddChatToFolderRequest, ::messenger::AddChatToFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::AddChatToFolderRequest* req,
             ::messenger::AddChatToFolderResponse* resp) {
               return service->AddChatToFolder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::RemoveChatFromFolderRequest, ::messenger::RemoveChatFromFolderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::RemoveChatFromFolderRequest* req,
             ::messenger::RemoveChatFromFolderResponse* resp) {
               return service->RemoveChatFromFolder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::AddGroupMemberRequest, ::messenger::AddGroupMemberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::AddGroupMemberRequest* req,
             ::messenger::AddGroupMemberResponse* resp) {
               return service->AddGroupMember(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::RemoveGroupMemberRequest, ::messenger::RemoveGroupMemberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::RemoveGroupMemberRequest* req,
             ::messenger::RemoveGroupMemberResponse* resp) {
               return service->RemoveGroupMember(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::GetMessagesOffsetRequest, ::messenger::GetMessagesOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetMessagesOffsetRequest* req,
             ::messenger::GetMessagesOffsetResponse* resp) {
               return service->GetMessagesOffset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::GetMessagesConversionRequest, ::messenger::GetMessagesConversionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetMessagesConversionRequest* req,
             ::messenger::GetMessagesConversionResponse* resp) {
               return service->GetMessagesConversion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[27],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MessengerService::Service, ::messenger::GetNewMessagesRequest, ::messenger::ChatMessage>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetNewMessagesRequest* req,
             ::grpc::ServerWriter<::messenger::ChatMessage>* writer) {
               return service->GetNewMessages(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::GetGroupChatsOffsetRequest, ::messenger::GetGroupChatsOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetGroupChatsOffsetRequest* req,
             ::messenger::GetGroupChatsOffsetResponse* resp) {
               return service->GetGroupChatsOffset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::GetGroupChatsConversionRequest, ::messenger::GetGroupChatsConversionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetGroupChatsConversionRequest* req,
             ::messenger::GetGroupChatsConversionResponse* resp) {
               return service->GetGroupChatsConversion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[30],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MessengerService::Service, ::messenger::GetNewGroupChatsRequest, ::messenger::GroupChat>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetNewGroupChatsRequest* req,
             ::grpc::ServerWriter<::messenger::GroupChat>* writer) {
               return service->GetNewGroupChats(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::FileMessage, ::messenger::FileMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::FileMessage* req,
             ::messenger::FileMessage* resp) {
               return service->SendFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::SearchRequest, ::messenger::SearchMessagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::SearchRequest* req,
             ::messenger::SearchMessagesResponse* resp) {
               return service->SearchMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::SearchRequest, ::messenger::SearchChatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::SearchRequest* req,
             ::messenger::SearchChatsResponse* resp) {
               return service->SearchChats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::Reminder, ::messenger::Reminder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::Reminder* req,
             ::messenger::Reminder* resp) {
               return service->UpdateReminder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::Reminder, ::messenger::Reminder, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::Reminder* req,
             ::messenger::Reminder* resp) {
               return service->DeleteReminder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::UpdateNotificationSettingsRequest, ::messenger::UpdateNotificationSettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::UpdateNotificationSettingsRequest* req,
             ::messenger::UpdateNotificationSettingsResponse* resp) {
               return service->UpdateNotificationSettings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::ToDoItem* req,
             ::messenger::ToDoItem* resp) {
               return service->CreateToDoItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::ToDoItem* req,
             ::messenger::ToDoItem* resp) {
               return service->UpdateToDoItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::ToDoItem, ::messenger::ToDoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::ToDoItem* req,
             ::messenger::ToDoItem* resp) {
               return service->DeleteToDoItem(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::GetToDoItemsOffsetRequest, ::messenger::GetToDoItemsOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetToDoItemsOffsetRequest* req,
             ::messenger::GetToDoItemsOffsetResponse* resp) {
               return service->GetToDoItemsOffset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::GetToDoItemsRequest, ::messenger::GetToDoItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetToDoItemsRequest* req,
             ::messenger::GetToDoItemsResponse* resp) {
               return service->GetToDoItems(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[42],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MessengerService::Service, ::messenger::GetNewToDoItemsRequest, ::messenger::ToDoItem>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetNewToDoItemsRequest* req,
             ::grpc::ServerWriter<::messenger::ToDoItem>* writer) {
               return service->GetNewToDoItems(ctx, req, writer);
             }, this)));
}

MessengerService::Service::~Service() {
}

::grpc::Status MessengerService::Service::SendMessage(::grpc::ServerContext* context, const ::messenger::SentMessage* request, ::messenger::ChatMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::CreateGroupChat(::grpc::ServerContext* context, const ::messenger::GroupChat* request, ::messenger::GroupChat* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::UpdateGroupChat(::grpc::ServerContext* context, const ::messenger::GroupChat* request, ::messenger::GroupChat* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::AssignRoleToUser(::grpc::ServerContext* context, const ::messenger::Role* request, ::messenger::Role* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::CreateReminder(::grpc::ServerContext* context, const ::messenger::Reminder* request, ::messenger::Reminder* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::MarkToDoItemCompleted(::grpc::ServerContext* context, const ::messenger::ToDoItem* request, ::messenger::ToDoItem* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::DeleteMessage(::grpc::ServerContext* context, const ::messenger::DeleteMessageRequest* request, ::messenger::DeleteMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::EditMessage(::grpc::ServerContext* context, const ::messenger::EditMessageRequest* request, ::messenger::EditMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::Register(::grpc::ServerContext* context, const ::messenger::RegisterRequest* request, ::messenger::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::Login(::grpc::ServerContext* context, const ::messenger::LoginRequest* request, ::messenger::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::Logout(::grpc::ServerContext* context, const ::messenger::LogoutRequest* request, ::messenger::LogoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::UpdateUserProfile(::grpc::ServerContext* context, const ::messenger::UpdateUserProfileRequest* request, ::messenger::UpdateUserProfileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::UpdateMessageStatus(::grpc::ServerContext* context, const ::messenger::UpdateMessageStatusRequest* request, ::messenger::UpdateMessageStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::AddContact(::grpc::ServerContext* context, const ::messenger::AddContactRequest* request, ::messenger::AddContactResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::RemoveContact(::grpc::ServerContext* context, const ::messenger::RemoveContactRequest* request, ::messenger::RemoveContactResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::CreateChatFolder(::grpc::ServerContext* context, const ::messenger::CreateChatFolderRequest* request, ::messenger::CreateChatFolderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::UpdateChatFolder(::grpc::ServerContext* context, const ::messenger::UpdateChatFolderRequest* request, ::messenger::UpdateChatFolderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::DeleteChatFolder(::grpc::ServerContext* context, const ::messenger::DeleteChatFolderRequest* request, ::messenger::DeleteChatFolderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetFoldersOffset(::grpc::ServerContext* context, const ::messenger::GetFoldersOffsetRequest* request, ::messenger::GetFoldersOffsetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetFolders(::grpc::ServerContext* context, const ::messenger::GetFoldersRequest* request, ::messenger::GetFoldersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetNewFolders(::grpc::ServerContext* context, const ::messenger::GetNewFoldersRequest* request, ::grpc::ServerWriter< ::messenger::ChatFolder>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::AddChatToFolder(::grpc::ServerContext* context, const ::messenger::AddChatToFolderRequest* request, ::messenger::AddChatToFolderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::RemoveChatFromFolder(::grpc::ServerContext* context, const ::messenger::RemoveChatFromFolderRequest* request, ::messenger::RemoveChatFromFolderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::AddGroupMember(::grpc::ServerContext* context, const ::messenger::AddGroupMemberRequest* request, ::messenger::AddGroupMemberResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::RemoveGroupMember(::grpc::ServerContext* context, const ::messenger::RemoveGroupMemberRequest* request, ::messenger::RemoveGroupMemberResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetMessagesOffset(::grpc::ServerContext* context, const ::messenger::GetMessagesOffsetRequest* request, ::messenger::GetMessagesOffsetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetMessagesConversion(::grpc::ServerContext* context, const ::messenger::GetMessagesConversionRequest* request, ::messenger::GetMessagesConversionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetNewMessages(::grpc::ServerContext* context, const ::messenger::GetNewMessagesRequest* request, ::grpc::ServerWriter< ::messenger::ChatMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetGroupChatsOffset(::grpc::ServerContext* context, const ::messenger::GetGroupChatsOffsetRequest* request, ::messenger::GetGroupChatsOffsetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetGroupChatsConversion(::grpc::ServerContext* context, const ::messenger::GetGroupChatsConversionRequest* request, ::messenger::GetGroupChatsConversionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetNewGroupChats(::grpc::ServerContext* context, const ::messenger::GetNewGroupChatsRequest* request, ::grpc::ServerWriter< ::messenger::GroupChat>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::SendFile(::grpc::ServerContext* context, const ::messenger::FileMessage* request, ::messenger::FileMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::SearchMessages(::grpc::ServerContext* context, const ::messenger::SearchRequest* request, ::messenger::SearchMessagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::SearchChats(::grpc::ServerContext* context, const ::messenger::SearchRequest* request, ::messenger::SearchChatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::UpdateReminder(::grpc::ServerContext* context, const ::messenger::Reminder* request, ::messenger::Reminder* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::DeleteReminder(::grpc::ServerContext* context, const ::messenger::Reminder* request, ::messenger::Reminder* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::UpdateNotificationSettings(::grpc::ServerContext* context, const ::messenger::UpdateNotificationSettingsRequest* request, ::messenger::UpdateNotificationSettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::CreateToDoItem(::grpc::ServerContext* context, const ::messenger::ToDoItem* request, ::messenger::ToDoItem* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::UpdateToDoItem(::grpc::ServerContext* context, const ::messenger::ToDoItem* request, ::messenger::ToDoItem* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::DeleteToDoItem(::grpc::ServerContext* context, const ::messenger::ToDoItem* request, ::messenger::ToDoItem* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetToDoItemsOffset(::grpc::ServerContext* context, const ::messenger::GetToDoItemsOffsetRequest* request, ::messenger::GetToDoItemsOffsetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetToDoItems(::grpc::ServerContext* context, const ::messenger::GetToDoItemsRequest* request, ::messenger::GetToDoItemsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetNewToDoItems(::grpc::ServerContext* context, const ::messenger::GetNewToDoItemsRequest* request, ::grpc::ServerWriter< ::messenger::ToDoItem>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace messenger

