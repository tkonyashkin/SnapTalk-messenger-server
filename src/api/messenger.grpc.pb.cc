// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messenger.proto

#include "messenger.pb.h"
#include "messenger.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace messenger {

static const char* MessengerService_method_names[] = {
  "/messenger.MessengerService/SendMessage",
  "/messenger.MessengerService/GetMessagesOffset",
  "/messenger.MessengerService/GetMessagesConversion",
  "/messenger.MessengerService/GetNewMessages",
};

std::unique_ptr< MessengerService::Stub> MessengerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MessengerService::Stub> stub(new MessengerService::Stub(channel, options));
  return stub;
}

MessengerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendMessage_(MessengerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMessagesOffset_(MessengerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMessagesConversion_(MessengerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNewMessages_(MessengerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status MessengerService::Stub::SendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::messenger::ChatMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::SentMessage, ::messenger::ChatMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
}

void MessengerService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage* request, ::messenger::ChatMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::SentMessage, ::messenger::ChatMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::messenger::SentMessage* request, ::messenger::ChatMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::ChatMessage>* MessengerService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::ChatMessage, ::messenger::SentMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::ChatMessage>* MessengerService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::messenger::SentMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::GetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::messenger::GetMessagesOffsetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::GetMessagesOffsetRequest, ::messenger::GetMessagesOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMessagesOffset_, context, request, response);
}

void MessengerService::Stub::async::GetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest* request, ::messenger::GetMessagesOffsetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::GetMessagesOffsetRequest, ::messenger::GetMessagesOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessagesOffset_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::GetMessagesOffset(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest* request, ::messenger::GetMessagesOffsetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessagesOffset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesOffsetResponse>* MessengerService::Stub::PrepareAsyncGetMessagesOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::GetMessagesOffsetResponse, ::messenger::GetMessagesOffsetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMessagesOffset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesOffsetResponse>* MessengerService::Stub::AsyncGetMessagesOffsetRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesOffsetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMessagesOffsetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MessengerService::Stub::GetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::messenger::GetMessagesConversionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::messenger::GetMessagesConversionRequest, ::messenger::GetMessagesConversionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMessagesConversion_, context, request, response);
}

void MessengerService::Stub::async::GetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest* request, ::messenger::GetMessagesConversionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::messenger::GetMessagesConversionRequest, ::messenger::GetMessagesConversionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessagesConversion_, context, request, response, std::move(f));
}

void MessengerService::Stub::async::GetMessagesConversion(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest* request, ::messenger::GetMessagesConversionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMessagesConversion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesConversionResponse>* MessengerService::Stub::PrepareAsyncGetMessagesConversionRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::messenger::GetMessagesConversionResponse, ::messenger::GetMessagesConversionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMessagesConversion_, context, request);
}

::grpc::ClientAsyncResponseReader< ::messenger::GetMessagesConversionResponse>* MessengerService::Stub::AsyncGetMessagesConversionRaw(::grpc::ClientContext* context, const ::messenger::GetMessagesConversionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMessagesConversionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::messenger::ChatMessage>* MessengerService::Stub::GetNewMessagesRaw(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::messenger::ChatMessage>::Create(channel_.get(), rpcmethod_GetNewMessages_, context, request);
}

void MessengerService::Stub::async::GetNewMessages(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest* request, ::grpc::ClientReadReactor< ::messenger::ChatMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::messenger::ChatMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_GetNewMessages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::messenger::ChatMessage>* MessengerService::Stub::AsyncGetNewMessagesRaw(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::messenger::ChatMessage>::Create(channel_.get(), cq, rpcmethod_GetNewMessages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::messenger::ChatMessage>* MessengerService::Stub::PrepareAsyncGetNewMessagesRaw(::grpc::ClientContext* context, const ::messenger::GetNewMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::messenger::ChatMessage>::Create(channel_.get(), cq, rpcmethod_GetNewMessages_, context, request, false, nullptr);
}

MessengerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::SentMessage, ::messenger::ChatMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::SentMessage* req,
             ::messenger::ChatMessage* resp) {
               return service->SendMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::GetMessagesOffsetRequest, ::messenger::GetMessagesOffsetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetMessagesOffsetRequest* req,
             ::messenger::GetMessagesOffsetResponse* resp) {
               return service->GetMessagesOffset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessengerService::Service, ::messenger::GetMessagesConversionRequest, ::messenger::GetMessagesConversionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetMessagesConversionRequest* req,
             ::messenger::GetMessagesConversionResponse* resp) {
               return service->GetMessagesConversion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessengerService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MessengerService::Service, ::messenger::GetNewMessagesRequest, ::messenger::ChatMessage>(
          [](MessengerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::messenger::GetNewMessagesRequest* req,
             ::grpc::ServerWriter<::messenger::ChatMessage>* writer) {
               return service->GetNewMessages(ctx, req, writer);
             }, this)));
}

MessengerService::Service::~Service() {
}

::grpc::Status MessengerService::Service::SendMessage(::grpc::ServerContext* context, const ::messenger::SentMessage* request, ::messenger::ChatMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetMessagesOffset(::grpc::ServerContext* context, const ::messenger::GetMessagesOffsetRequest* request, ::messenger::GetMessagesOffsetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetMessagesConversion(::grpc::ServerContext* context, const ::messenger::GetMessagesConversionRequest* request, ::messenger::GetMessagesConversionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessengerService::Service::GetNewMessages(::grpc::ServerContext* context, const ::messenger::GetNewMessagesRequest* request, ::grpc::ServerWriter< ::messenger::ChatMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace messenger

