// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messenger.proto
// Protobuf C++ Version: 4.25.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_messenger_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_messenger_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_messenger_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_messenger_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_messenger_2eproto;
namespace messenger {
class AddChatToFolderRequest;
struct AddChatToFolderRequestDefaultTypeInternal;
extern AddChatToFolderRequestDefaultTypeInternal _AddChatToFolderRequest_default_instance_;
class AddChatToFolderResponse;
struct AddChatToFolderResponseDefaultTypeInternal;
extern AddChatToFolderResponseDefaultTypeInternal _AddChatToFolderResponse_default_instance_;
class AddContactRequest;
struct AddContactRequestDefaultTypeInternal;
extern AddContactRequestDefaultTypeInternal _AddContactRequest_default_instance_;
class AddContactResponse;
struct AddContactResponseDefaultTypeInternal;
extern AddContactResponseDefaultTypeInternal _AddContactResponse_default_instance_;
class AddGroupMemberRequest;
struct AddGroupMemberRequestDefaultTypeInternal;
extern AddGroupMemberRequestDefaultTypeInternal _AddGroupMemberRequest_default_instance_;
class AddGroupMemberResponse;
struct AddGroupMemberResponseDefaultTypeInternal;
extern AddGroupMemberResponseDefaultTypeInternal _AddGroupMemberResponse_default_instance_;
class ChatFolder;
struct ChatFolderDefaultTypeInternal;
extern ChatFolderDefaultTypeInternal _ChatFolder_default_instance_;
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class ContactList;
struct ContactListDefaultTypeInternal;
extern ContactListDefaultTypeInternal _ContactList_default_instance_;
class CreateChatFolderRequest;
struct CreateChatFolderRequestDefaultTypeInternal;
extern CreateChatFolderRequestDefaultTypeInternal _CreateChatFolderRequest_default_instance_;
class CreateChatFolderResponse;
struct CreateChatFolderResponseDefaultTypeInternal;
extern CreateChatFolderResponseDefaultTypeInternal _CreateChatFolderResponse_default_instance_;
class DeleteChatFolderRequest;
struct DeleteChatFolderRequestDefaultTypeInternal;
extern DeleteChatFolderRequestDefaultTypeInternal _DeleteChatFolderRequest_default_instance_;
class DeleteChatFolderResponse;
struct DeleteChatFolderResponseDefaultTypeInternal;
extern DeleteChatFolderResponseDefaultTypeInternal _DeleteChatFolderResponse_default_instance_;
class DeleteMessageRequest;
struct DeleteMessageRequestDefaultTypeInternal;
extern DeleteMessageRequestDefaultTypeInternal _DeleteMessageRequest_default_instance_;
class DeleteMessageResponse;
struct DeleteMessageResponseDefaultTypeInternal;
extern DeleteMessageResponseDefaultTypeInternal _DeleteMessageResponse_default_instance_;
class EditMessageRequest;
struct EditMessageRequestDefaultTypeInternal;
extern EditMessageRequestDefaultTypeInternal _EditMessageRequest_default_instance_;
class EditMessageResponse;
struct EditMessageResponseDefaultTypeInternal;
extern EditMessageResponseDefaultTypeInternal _EditMessageResponse_default_instance_;
class FileMessage;
struct FileMessageDefaultTypeInternal;
extern FileMessageDefaultTypeInternal _FileMessage_default_instance_;
class GetFoldersOffsetRequest;
struct GetFoldersOffsetRequestDefaultTypeInternal;
extern GetFoldersOffsetRequestDefaultTypeInternal _GetFoldersOffsetRequest_default_instance_;
class GetFoldersOffsetResponse;
struct GetFoldersOffsetResponseDefaultTypeInternal;
extern GetFoldersOffsetResponseDefaultTypeInternal _GetFoldersOffsetResponse_default_instance_;
class GetFoldersRequest;
struct GetFoldersRequestDefaultTypeInternal;
extern GetFoldersRequestDefaultTypeInternal _GetFoldersRequest_default_instance_;
class GetFoldersResponse;
struct GetFoldersResponseDefaultTypeInternal;
extern GetFoldersResponseDefaultTypeInternal _GetFoldersResponse_default_instance_;
class GetGroupChatsConversionRequest;
struct GetGroupChatsConversionRequestDefaultTypeInternal;
extern GetGroupChatsConversionRequestDefaultTypeInternal _GetGroupChatsConversionRequest_default_instance_;
class GetGroupChatsConversionResponse;
struct GetGroupChatsConversionResponseDefaultTypeInternal;
extern GetGroupChatsConversionResponseDefaultTypeInternal _GetGroupChatsConversionResponse_default_instance_;
class GetGroupChatsOffsetRequest;
struct GetGroupChatsOffsetRequestDefaultTypeInternal;
extern GetGroupChatsOffsetRequestDefaultTypeInternal _GetGroupChatsOffsetRequest_default_instance_;
class GetGroupChatsOffsetResponse;
struct GetGroupChatsOffsetResponseDefaultTypeInternal;
extern GetGroupChatsOffsetResponseDefaultTypeInternal _GetGroupChatsOffsetResponse_default_instance_;
class GetMessagesConversionRequest;
struct GetMessagesConversionRequestDefaultTypeInternal;
extern GetMessagesConversionRequestDefaultTypeInternal _GetMessagesConversionRequest_default_instance_;
class GetMessagesConversionResponse;
struct GetMessagesConversionResponseDefaultTypeInternal;
extern GetMessagesConversionResponseDefaultTypeInternal _GetMessagesConversionResponse_default_instance_;
class GetMessagesOffsetRequest;
struct GetMessagesOffsetRequestDefaultTypeInternal;
extern GetMessagesOffsetRequestDefaultTypeInternal _GetMessagesOffsetRequest_default_instance_;
class GetMessagesOffsetResponse;
struct GetMessagesOffsetResponseDefaultTypeInternal;
extern GetMessagesOffsetResponseDefaultTypeInternal _GetMessagesOffsetResponse_default_instance_;
class GetNewFoldersRequest;
struct GetNewFoldersRequestDefaultTypeInternal;
extern GetNewFoldersRequestDefaultTypeInternal _GetNewFoldersRequest_default_instance_;
class GetNewGroupChatsRequest;
struct GetNewGroupChatsRequestDefaultTypeInternal;
extern GetNewGroupChatsRequestDefaultTypeInternal _GetNewGroupChatsRequest_default_instance_;
class GetNewMessagesRequest;
struct GetNewMessagesRequestDefaultTypeInternal;
extern GetNewMessagesRequestDefaultTypeInternal _GetNewMessagesRequest_default_instance_;
class GetNewToDoItemsRequest;
struct GetNewToDoItemsRequestDefaultTypeInternal;
extern GetNewToDoItemsRequestDefaultTypeInternal _GetNewToDoItemsRequest_default_instance_;
class GetToDoItemsOffsetRequest;
struct GetToDoItemsOffsetRequestDefaultTypeInternal;
extern GetToDoItemsOffsetRequestDefaultTypeInternal _GetToDoItemsOffsetRequest_default_instance_;
class GetToDoItemsOffsetResponse;
struct GetToDoItemsOffsetResponseDefaultTypeInternal;
extern GetToDoItemsOffsetResponseDefaultTypeInternal _GetToDoItemsOffsetResponse_default_instance_;
class GetToDoItemsRequest;
struct GetToDoItemsRequestDefaultTypeInternal;
extern GetToDoItemsRequestDefaultTypeInternal _GetToDoItemsRequest_default_instance_;
class GetToDoItemsResponse;
struct GetToDoItemsResponseDefaultTypeInternal;
extern GetToDoItemsResponseDefaultTypeInternal _GetToDoItemsResponse_default_instance_;
class GroupChat;
struct GroupChatDefaultTypeInternal;
extern GroupChatDefaultTypeInternal _GroupChat_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LogoutRequest;
struct LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class LogoutResponse;
struct LogoutResponseDefaultTypeInternal;
extern LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;
class NotificationSettings;
struct NotificationSettingsDefaultTypeInternal;
extern NotificationSettingsDefaultTypeInternal _NotificationSettings_default_instance_;
class Permissions;
struct PermissionsDefaultTypeInternal;
extern PermissionsDefaultTypeInternal _Permissions_default_instance_;
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
struct RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
class Reminder;
struct ReminderDefaultTypeInternal;
extern ReminderDefaultTypeInternal _Reminder_default_instance_;
class RemoveChatFromFolderRequest;
struct RemoveChatFromFolderRequestDefaultTypeInternal;
extern RemoveChatFromFolderRequestDefaultTypeInternal _RemoveChatFromFolderRequest_default_instance_;
class RemoveChatFromFolderResponse;
struct RemoveChatFromFolderResponseDefaultTypeInternal;
extern RemoveChatFromFolderResponseDefaultTypeInternal _RemoveChatFromFolderResponse_default_instance_;
class RemoveContactRequest;
struct RemoveContactRequestDefaultTypeInternal;
extern RemoveContactRequestDefaultTypeInternal _RemoveContactRequest_default_instance_;
class RemoveContactResponse;
struct RemoveContactResponseDefaultTypeInternal;
extern RemoveContactResponseDefaultTypeInternal _RemoveContactResponse_default_instance_;
class RemoveGroupMemberRequest;
struct RemoveGroupMemberRequestDefaultTypeInternal;
extern RemoveGroupMemberRequestDefaultTypeInternal _RemoveGroupMemberRequest_default_instance_;
class RemoveGroupMemberResponse;
struct RemoveGroupMemberResponseDefaultTypeInternal;
extern RemoveGroupMemberResponseDefaultTypeInternal _RemoveGroupMemberResponse_default_instance_;
class Role;
struct RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class SearchChatsResponse;
struct SearchChatsResponseDefaultTypeInternal;
extern SearchChatsResponseDefaultTypeInternal _SearchChatsResponse_default_instance_;
class SearchMessagesResponse;
struct SearchMessagesResponseDefaultTypeInternal;
extern SearchMessagesResponseDefaultTypeInternal _SearchMessagesResponse_default_instance_;
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SentMessage;
struct SentMessageDefaultTypeInternal;
extern SentMessageDefaultTypeInternal _SentMessage_default_instance_;
class ToDoItem;
struct ToDoItemDefaultTypeInternal;
extern ToDoItemDefaultTypeInternal _ToDoItem_default_instance_;
class UpdateChatFolderRequest;
struct UpdateChatFolderRequestDefaultTypeInternal;
extern UpdateChatFolderRequestDefaultTypeInternal _UpdateChatFolderRequest_default_instance_;
class UpdateChatFolderResponse;
struct UpdateChatFolderResponseDefaultTypeInternal;
extern UpdateChatFolderResponseDefaultTypeInternal _UpdateChatFolderResponse_default_instance_;
class UpdateMessageStatusRequest;
struct UpdateMessageStatusRequestDefaultTypeInternal;
extern UpdateMessageStatusRequestDefaultTypeInternal _UpdateMessageStatusRequest_default_instance_;
class UpdateMessageStatusResponse;
struct UpdateMessageStatusResponseDefaultTypeInternal;
extern UpdateMessageStatusResponseDefaultTypeInternal _UpdateMessageStatusResponse_default_instance_;
class UpdateNotificationSettingsRequest;
struct UpdateNotificationSettingsRequestDefaultTypeInternal;
extern UpdateNotificationSettingsRequestDefaultTypeInternal _UpdateNotificationSettingsRequest_default_instance_;
class UpdateNotificationSettingsResponse;
struct UpdateNotificationSettingsResponseDefaultTypeInternal;
extern UpdateNotificationSettingsResponseDefaultTypeInternal _UpdateNotificationSettingsResponse_default_instance_;
class UpdateUserProfileRequest;
struct UpdateUserProfileRequestDefaultTypeInternal;
extern UpdateUserProfileRequestDefaultTypeInternal _UpdateUserProfileRequest_default_instance_;
class UpdateUserProfileResponse;
struct UpdateUserProfileResponseDefaultTypeInternal;
extern UpdateUserProfileResponseDefaultTypeInternal _UpdateUserProfileResponse_default_instance_;
class UserProfile;
struct UserProfileDefaultTypeInternal;
extern UserProfileDefaultTypeInternal _UserProfile_default_instance_;
}  // namespace messenger
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace messenger {
enum MessageType : int {
  TEXT = 0,
  AUDIO = 1,
  VIDEO = 2,
  VOICE = 5,
  STICKER = 3,
  EMOJI = 4,
  USER_AVATAR_CHANGED = 6,
  USER_NAME_CHANGED = 7,
  CHAT_NAME_CHANGED = 8,
  CHAT_AVATAR_CHANGED = 9,
  USER_JOINED_CHAT = 10,
  USER_LEFT_CHAT = 11,
  USER_KICKED_FROM_CHAT = 12,
  USER_BANNED_FROM_CHAT = 13,
  USER_UNBANNED_FROM_CHAT = 14,
  ROLE_ASSIGNED = 15,
  ROLE_REVOKED = 16,
  PERMISSIONS_UPDATED = 17,
  CHAT_DESCRIPTION_CHANGED = 18,
  CHAT_SETTINGS_UPDATED = 19,
  MESSAGE_PINNED = 20,
  MESSAGE_UNPINNED = 21,
  CHAT_MEMBERS_ADDED = 22,
  CHAT_MEMBERS_REMOVED = 23,
  PRIVACY_SETTINGS_UPDATED = 24,
  SECURITY_SETTINGS_UPDATED = 25,
  GROUP_CHAT_CREATED = 26,
  GROUP_CHAT_DISBANDED = 27,
  USER_STATUS_CHANGED = 28,
  CUSTOM_NOTIFICATIONS_UPDATED = 29,
  CHAT_ARCHIVED = 30,
  CHAT_UNARCHIVED = 31,
  NEW_DEVICE_SIGNED_IN = 32,
  DEVICE_SIGNED_OUT = 33,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MessageType_IsValid(int value);
extern const uint32_t MessageType_internal_data_[];
constexpr MessageType MessageType_MIN = static_cast<MessageType>(0);
constexpr MessageType MessageType_MAX = static_cast<MessageType>(33);
constexpr int MessageType_ARRAYSIZE = 33 + 1;
const ::google::protobuf::EnumDescriptor*
MessageType_descriptor();
template <typename T>
const std::string& MessageType_Name(T value) {
  static_assert(std::is_same<T, MessageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageType_Name().");
  return MessageType_Name(static_cast<MessageType>(value));
}
template <>
inline const std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MessageType_descriptor,
                                                 0, 33>(
      static_cast<int>(value));
}
inline bool MessageType_Parse(absl::string_view name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
      MessageType_descriptor(), name, value);
}
enum FileType : int {
  UNKNOWN_FILE = 0,
  DOCUMENT_FILE = 1,
  IMAGE_FILE = 2,
  AUDIO_FILE = 3,
  VIDEO_FILE = 4,
  FileType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FileType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FileType_IsValid(int value);
extern const uint32_t FileType_internal_data_[];
constexpr FileType FileType_MIN = static_cast<FileType>(0);
constexpr FileType FileType_MAX = static_cast<FileType>(4);
constexpr int FileType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
FileType_descriptor();
template <typename T>
const std::string& FileType_Name(T value) {
  static_assert(std::is_same<T, FileType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FileType_Name().");
  return FileType_Name(static_cast<FileType>(value));
}
template <>
inline const std::string& FileType_Name(FileType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FileType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool FileType_Parse(absl::string_view name, FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileType>(
      FileType_descriptor(), name, value);
}
enum MessageStatus : int {
  SENT = 0,
  DELIVERED = 1,
  READ = 2,
  MessageStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MessageStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MessageStatus_IsValid(int value);
extern const uint32_t MessageStatus_internal_data_[];
constexpr MessageStatus MessageStatus_MIN = static_cast<MessageStatus>(0);
constexpr MessageStatus MessageStatus_MAX = static_cast<MessageStatus>(2);
constexpr int MessageStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
MessageStatus_descriptor();
template <typename T>
const std::string& MessageStatus_Name(T value) {
  static_assert(std::is_same<T, MessageStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageStatus_Name().");
  return MessageStatus_Name(static_cast<MessageStatus>(value));
}
template <>
inline const std::string& MessageStatus_Name(MessageStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MessageStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool MessageStatus_Parse(absl::string_view name, MessageStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageStatus>(
      MessageStatus_descriptor(), name, value);
}
enum UserStatus : int {
  ONLINE = 0,
  OFFLINE = 1,
  UserStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UserStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UserStatus_IsValid(int value);
extern const uint32_t UserStatus_internal_data_[];
constexpr UserStatus UserStatus_MIN = static_cast<UserStatus>(0);
constexpr UserStatus UserStatus_MAX = static_cast<UserStatus>(1);
constexpr int UserStatus_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
UserStatus_descriptor();
template <typename T>
const std::string& UserStatus_Name(T value) {
  static_assert(std::is_same<T, UserStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UserStatus_Name().");
  return UserStatus_Name(static_cast<UserStatus>(value));
}
template <>
inline const std::string& UserStatus_Name(UserStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<UserStatus_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool UserStatus_Parse(absl::string_view name, UserStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserStatus>(
      UserStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class UserProfile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.UserProfile) */ {
 public:
  inline UserProfile() : UserProfile(nullptr) {}
  ~UserProfile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserProfile(::google::protobuf::internal::ConstantInitialized);

  inline UserProfile(const UserProfile& from)
      : UserProfile(nullptr, from) {}
  UserProfile(UserProfile&& from) noexcept
    : UserProfile() {
    *this = ::std::move(from);
  }

  inline UserProfile& operator=(const UserProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserProfile& operator=(UserProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserProfile* internal_default_instance() {
    return reinterpret_cast<const UserProfile*>(
               &_UserProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserProfile& a, UserProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(UserProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserProfile* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserProfile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UserProfile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UserProfile& from) {
    UserProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UserProfile* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.UserProfile";
  }
  protected:
  explicit UserProfile(::google::protobuf::Arena* arena);
  UserProfile(::google::protobuf::Arena* arena, const UserProfile& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string username = 2;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // .messenger.UserStatus status = 3;
  void clear_status() ;
  ::messenger::UserStatus status() const;
  void set_status(::messenger::UserStatus value);

  private:
  ::messenger::UserStatus _internal_status() const;
  void _internal_set_status(::messenger::UserStatus value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.UserProfile)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr username_;
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class UpdateUserProfileResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.UpdateUserProfileResponse) */ {
 public:
  inline UpdateUserProfileResponse() : UpdateUserProfileResponse(nullptr) {}
  ~UpdateUserProfileResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateUserProfileResponse(::google::protobuf::internal::ConstantInitialized);

  inline UpdateUserProfileResponse(const UpdateUserProfileResponse& from)
      : UpdateUserProfileResponse(nullptr, from) {}
  UpdateUserProfileResponse(UpdateUserProfileResponse&& from) noexcept
    : UpdateUserProfileResponse() {
    *this = ::std::move(from);
  }

  inline UpdateUserProfileResponse& operator=(const UpdateUserProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserProfileResponse& operator=(UpdateUserProfileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserProfileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserProfileResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateUserProfileResponse*>(
               &_UpdateUserProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateUserProfileResponse& a, UpdateUserProfileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserProfileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserProfileResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserProfileResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUserProfileResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateUserProfileResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateUserProfileResponse& from) {
    UpdateUserProfileResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateUserProfileResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.UpdateUserProfileResponse";
  }
  protected:
  explicit UpdateUserProfileResponse(::google::protobuf::Arena* arena);
  UpdateUserProfileResponse(::google::protobuf::Arena* arena, const UpdateUserProfileResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.UpdateUserProfileResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class UpdateNotificationSettingsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.UpdateNotificationSettingsResponse) */ {
 public:
  inline UpdateNotificationSettingsResponse() : UpdateNotificationSettingsResponse(nullptr) {}
  ~UpdateNotificationSettingsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateNotificationSettingsResponse(::google::protobuf::internal::ConstantInitialized);

  inline UpdateNotificationSettingsResponse(const UpdateNotificationSettingsResponse& from)
      : UpdateNotificationSettingsResponse(nullptr, from) {}
  UpdateNotificationSettingsResponse(UpdateNotificationSettingsResponse&& from) noexcept
    : UpdateNotificationSettingsResponse() {
    *this = ::std::move(from);
  }

  inline UpdateNotificationSettingsResponse& operator=(const UpdateNotificationSettingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNotificationSettingsResponse& operator=(UpdateNotificationSettingsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNotificationSettingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNotificationSettingsResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateNotificationSettingsResponse*>(
               &_UpdateNotificationSettingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(UpdateNotificationSettingsResponse& a, UpdateNotificationSettingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNotificationSettingsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNotificationSettingsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNotificationSettingsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNotificationSettingsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateNotificationSettingsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateNotificationSettingsResponse& from) {
    UpdateNotificationSettingsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateNotificationSettingsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.UpdateNotificationSettingsResponse";
  }
  protected:
  explicit UpdateNotificationSettingsResponse(::google::protobuf::Arena* arena);
  UpdateNotificationSettingsResponse(::google::protobuf::Arena* arena, const UpdateNotificationSettingsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.UpdateNotificationSettingsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class UpdateMessageStatusResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.UpdateMessageStatusResponse) */ {
 public:
  inline UpdateMessageStatusResponse() : UpdateMessageStatusResponse(nullptr) {}
  ~UpdateMessageStatusResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateMessageStatusResponse(::google::protobuf::internal::ConstantInitialized);

  inline UpdateMessageStatusResponse(const UpdateMessageStatusResponse& from)
      : UpdateMessageStatusResponse(nullptr, from) {}
  UpdateMessageStatusResponse(UpdateMessageStatusResponse&& from) noexcept
    : UpdateMessageStatusResponse() {
    *this = ::std::move(from);
  }

  inline UpdateMessageStatusResponse& operator=(const UpdateMessageStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMessageStatusResponse& operator=(UpdateMessageStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateMessageStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateMessageStatusResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateMessageStatusResponse*>(
               &_UpdateMessageStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UpdateMessageStatusResponse& a, UpdateMessageStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMessageStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMessageStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateMessageStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateMessageStatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateMessageStatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateMessageStatusResponse& from) {
    UpdateMessageStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateMessageStatusResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.UpdateMessageStatusResponse";
  }
  protected:
  explicit UpdateMessageStatusResponse(::google::protobuf::Arena* arena);
  UpdateMessageStatusResponse(::google::protobuf::Arena* arena, const UpdateMessageStatusResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.UpdateMessageStatusResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class UpdateMessageStatusRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.UpdateMessageStatusRequest) */ {
 public:
  inline UpdateMessageStatusRequest() : UpdateMessageStatusRequest(nullptr) {}
  ~UpdateMessageStatusRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateMessageStatusRequest(::google::protobuf::internal::ConstantInitialized);

  inline UpdateMessageStatusRequest(const UpdateMessageStatusRequest& from)
      : UpdateMessageStatusRequest(nullptr, from) {}
  UpdateMessageStatusRequest(UpdateMessageStatusRequest&& from) noexcept
    : UpdateMessageStatusRequest() {
    *this = ::std::move(from);
  }

  inline UpdateMessageStatusRequest& operator=(const UpdateMessageStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMessageStatusRequest& operator=(UpdateMessageStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateMessageStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateMessageStatusRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateMessageStatusRequest*>(
               &_UpdateMessageStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateMessageStatusRequest& a, UpdateMessageStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMessageStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMessageStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateMessageStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateMessageStatusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateMessageStatusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateMessageStatusRequest& from) {
    UpdateMessageStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateMessageStatusRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.UpdateMessageStatusRequest";
  }
  protected:
  explicit UpdateMessageStatusRequest(::google::protobuf::Arena* arena);
  UpdateMessageStatusRequest(::google::protobuf::Arena* arena, const UpdateMessageStatusRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string messageId = 1;
  void clear_messageid() ;
  const std::string& messageid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_messageid(Arg_&& arg, Args_... args);
  std::string* mutable_messageid();
  PROTOBUF_NODISCARD std::string* release_messageid();
  void set_allocated_messageid(std::string* value);

  private:
  const std::string& _internal_messageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messageid(
      const std::string& value);
  std::string* _internal_mutable_messageid();

  public:
  // .messenger.MessageStatus status = 2;
  void clear_status() ;
  ::messenger::MessageStatus status() const;
  void set_status(::messenger::MessageStatus value);

  private:
  ::messenger::MessageStatus _internal_status() const;
  void _internal_set_status(::messenger::MessageStatus value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.UpdateMessageStatusRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr messageid_;
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class UpdateChatFolderResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.UpdateChatFolderResponse) */ {
 public:
  inline UpdateChatFolderResponse() : UpdateChatFolderResponse(nullptr) {}
  ~UpdateChatFolderResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateChatFolderResponse(::google::protobuf::internal::ConstantInitialized);

  inline UpdateChatFolderResponse(const UpdateChatFolderResponse& from)
      : UpdateChatFolderResponse(nullptr, from) {}
  UpdateChatFolderResponse(UpdateChatFolderResponse&& from) noexcept
    : UpdateChatFolderResponse() {
    *this = ::std::move(from);
  }

  inline UpdateChatFolderResponse& operator=(const UpdateChatFolderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateChatFolderResponse& operator=(UpdateChatFolderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateChatFolderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateChatFolderResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateChatFolderResponse*>(
               &_UpdateChatFolderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(UpdateChatFolderResponse& a, UpdateChatFolderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateChatFolderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateChatFolderResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateChatFolderResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateChatFolderResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateChatFolderResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateChatFolderResponse& from) {
    UpdateChatFolderResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateChatFolderResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.UpdateChatFolderResponse";
  }
  protected:
  explicit UpdateChatFolderResponse(::google::protobuf::Arena* arena);
  UpdateChatFolderResponse(::google::protobuf::Arena* arena, const UpdateChatFolderResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.UpdateChatFolderResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class UpdateChatFolderRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.UpdateChatFolderRequest) */ {
 public:
  inline UpdateChatFolderRequest() : UpdateChatFolderRequest(nullptr) {}
  ~UpdateChatFolderRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateChatFolderRequest(::google::protobuf::internal::ConstantInitialized);

  inline UpdateChatFolderRequest(const UpdateChatFolderRequest& from)
      : UpdateChatFolderRequest(nullptr, from) {}
  UpdateChatFolderRequest(UpdateChatFolderRequest&& from) noexcept
    : UpdateChatFolderRequest() {
    *this = ::std::move(from);
  }

  inline UpdateChatFolderRequest& operator=(const UpdateChatFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateChatFolderRequest& operator=(UpdateChatFolderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateChatFolderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateChatFolderRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateChatFolderRequest*>(
               &_UpdateChatFolderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(UpdateChatFolderRequest& a, UpdateChatFolderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateChatFolderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateChatFolderRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateChatFolderRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateChatFolderRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateChatFolderRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateChatFolderRequest& from) {
    UpdateChatFolderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateChatFolderRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.UpdateChatFolderRequest";
  }
  protected:
  explicit UpdateChatFolderRequest(::google::protobuf::Arena* arena);
  UpdateChatFolderRequest(::google::protobuf::Arena* arena, const UpdateChatFolderRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFolderIdFieldNumber = 1,
    kNewNameFieldNumber = 2,
  };
  // string folderId = 1;
  void clear_folderid() ;
  const std::string& folderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_folderid(Arg_&& arg, Args_... args);
  std::string* mutable_folderid();
  PROTOBUF_NODISCARD std::string* release_folderid();
  void set_allocated_folderid(std::string* value);

  private:
  const std::string& _internal_folderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_folderid(
      const std::string& value);
  std::string* _internal_mutable_folderid();

  public:
  // string newName = 2;
  void clear_newname() ;
  const std::string& newname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_newname(Arg_&& arg, Args_... args);
  std::string* mutable_newname();
  PROTOBUF_NODISCARD std::string* release_newname();
  void set_allocated_newname(std::string* value);

  private:
  const std::string& _internal_newname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newname(
      const std::string& value);
  std::string* _internal_mutable_newname();

  public:
  // @@protoc_insertion_point(class_scope:messenger.UpdateChatFolderRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr folderid_;
    ::google::protobuf::internal::ArenaStringPtr newname_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class ToDoItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.ToDoItem) */ {
 public:
  inline ToDoItem() : ToDoItem(nullptr) {}
  ~ToDoItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ToDoItem(::google::protobuf::internal::ConstantInitialized);

  inline ToDoItem(const ToDoItem& from)
      : ToDoItem(nullptr, from) {}
  ToDoItem(ToDoItem&& from) noexcept
    : ToDoItem() {
    *this = ::std::move(from);
  }

  inline ToDoItem& operator=(const ToDoItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToDoItem& operator=(ToDoItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToDoItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToDoItem* internal_default_instance() {
    return reinterpret_cast<const ToDoItem*>(
               &_ToDoItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ToDoItem& a, ToDoItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ToDoItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToDoItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToDoItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ToDoItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ToDoItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ToDoItem& from) {
    ToDoItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ToDoItem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.ToDoItem";
  }
  protected:
  explicit ToDoItem(::google::protobuf::Arena* arena);
  ToDoItem(::google::protobuf::Arena* arena, const ToDoItem& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCompletedFieldNumber = 4,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string userId = 2;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // bool completed = 4;
  void clear_completed() ;
  bool completed() const;
  void set_completed(bool value);

  private:
  bool _internal_completed() const;
  void _internal_set_completed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.ToDoItem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    bool completed_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class SentMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.SentMessage) */ {
 public:
  inline SentMessage() : SentMessage(nullptr) {}
  ~SentMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SentMessage(::google::protobuf::internal::ConstantInitialized);

  inline SentMessage(const SentMessage& from)
      : SentMessage(nullptr, from) {}
  SentMessage(SentMessage&& from) noexcept
    : SentMessage() {
    *this = ::std::move(from);
  }

  inline SentMessage& operator=(const SentMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SentMessage& operator=(SentMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SentMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SentMessage* internal_default_instance() {
    return reinterpret_cast<const SentMessage*>(
               &_SentMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SentMessage& a, SentMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SentMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SentMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SentMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SentMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SentMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SentMessage& from) {
    SentMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SentMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.SentMessage";
  }
  protected:
  explicit SentMessage(::google::protobuf::Arena* arena);
  SentMessage(::google::protobuf::Arena* arena, const SentMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kContentFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string content = 3;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // .messenger.MessageType type = 2;
  void clear_type() ;
  ::messenger::MessageType type() const;
  void set_type(::messenger::MessageType value);

  private:
  ::messenger::MessageType _internal_type() const;
  void _internal_set_type(::messenger::MessageType value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.SentMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      39, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class SearchRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SearchRequest(::google::protobuf::internal::ConstantInitialized);

  inline SearchRequest(const SearchRequest& from)
      : SearchRequest(nullptr, from) {}
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SearchRequest& from) {
    SearchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SearchRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.SearchRequest";
  }
  protected:
  explicit SearchRequest(::google::protobuf::Arena* arena);
  SearchRequest(::google::protobuf::Arena* arena, const SearchRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kLimitFieldNumber = 3,
  };
  // string query = 1;
  void clear_query() ;
  const std::string& query() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_query(Arg_&& arg, Args_... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* value);

  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(
      const std::string& value);
  std::string* _internal_mutable_query();

  public:
  // string userId = 2;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // int32 limit = 3;
  void clear_limit() ;
  ::int32_t limit() const;
  void set_limit(::int32_t value);

  private:
  ::int32_t _internal_limit() const;
  void _internal_set_limit(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.SearchRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr query_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::int32_t limit_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class RemoveGroupMemberResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.RemoveGroupMemberResponse) */ {
 public:
  inline RemoveGroupMemberResponse() : RemoveGroupMemberResponse(nullptr) {}
  ~RemoveGroupMemberResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveGroupMemberResponse(::google::protobuf::internal::ConstantInitialized);

  inline RemoveGroupMemberResponse(const RemoveGroupMemberResponse& from)
      : RemoveGroupMemberResponse(nullptr, from) {}
  RemoveGroupMemberResponse(RemoveGroupMemberResponse&& from) noexcept
    : RemoveGroupMemberResponse() {
    *this = ::std::move(from);
  }

  inline RemoveGroupMemberResponse& operator=(const RemoveGroupMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveGroupMemberResponse& operator=(RemoveGroupMemberResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveGroupMemberResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveGroupMemberResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveGroupMemberResponse*>(
               &_RemoveGroupMemberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(RemoveGroupMemberResponse& a, RemoveGroupMemberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveGroupMemberResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveGroupMemberResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveGroupMemberResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveGroupMemberResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveGroupMemberResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RemoveGroupMemberResponse& from) {
    RemoveGroupMemberResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RemoveGroupMemberResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.RemoveGroupMemberResponse";
  }
  protected:
  explicit RemoveGroupMemberResponse(::google::protobuf::Arena* arena);
  RemoveGroupMemberResponse(::google::protobuf::Arena* arena, const RemoveGroupMemberResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.RemoveGroupMemberResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class RemoveGroupMemberRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.RemoveGroupMemberRequest) */ {
 public:
  inline RemoveGroupMemberRequest() : RemoveGroupMemberRequest(nullptr) {}
  ~RemoveGroupMemberRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveGroupMemberRequest(::google::protobuf::internal::ConstantInitialized);

  inline RemoveGroupMemberRequest(const RemoveGroupMemberRequest& from)
      : RemoveGroupMemberRequest(nullptr, from) {}
  RemoveGroupMemberRequest(RemoveGroupMemberRequest&& from) noexcept
    : RemoveGroupMemberRequest() {
    *this = ::std::move(from);
  }

  inline RemoveGroupMemberRequest& operator=(const RemoveGroupMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveGroupMemberRequest& operator=(RemoveGroupMemberRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveGroupMemberRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveGroupMemberRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveGroupMemberRequest*>(
               &_RemoveGroupMemberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(RemoveGroupMemberRequest& a, RemoveGroupMemberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveGroupMemberRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveGroupMemberRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveGroupMemberRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveGroupMemberRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveGroupMemberRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RemoveGroupMemberRequest& from) {
    RemoveGroupMemberRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RemoveGroupMemberRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.RemoveGroupMemberRequest";
  }
  protected:
  explicit RemoveGroupMemberRequest(::google::protobuf::Arena* arena);
  RemoveGroupMemberRequest(::google::protobuf::Arena* arena, const RemoveGroupMemberRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kMemberIdFieldNumber = 2,
  };
  // string groupId = 1;
  void clear_groupid() ;
  const std::string& groupid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_groupid(Arg_&& arg, Args_... args);
  std::string* mutable_groupid();
  PROTOBUF_NODISCARD std::string* release_groupid();
  void set_allocated_groupid(std::string* value);

  private:
  const std::string& _internal_groupid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupid(
      const std::string& value);
  std::string* _internal_mutable_groupid();

  public:
  // string memberId = 2;
  void clear_memberid() ;
  const std::string& memberid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_memberid(Arg_&& arg, Args_... args);
  std::string* mutable_memberid();
  PROTOBUF_NODISCARD std::string* release_memberid();
  void set_allocated_memberid(std::string* value);

  private:
  const std::string& _internal_memberid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memberid(
      const std::string& value);
  std::string* _internal_mutable_memberid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.RemoveGroupMemberRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr groupid_;
    ::google::protobuf::internal::ArenaStringPtr memberid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class RemoveContactResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.RemoveContactResponse) */ {
 public:
  inline RemoveContactResponse() : RemoveContactResponse(nullptr) {}
  ~RemoveContactResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveContactResponse(::google::protobuf::internal::ConstantInitialized);

  inline RemoveContactResponse(const RemoveContactResponse& from)
      : RemoveContactResponse(nullptr, from) {}
  RemoveContactResponse(RemoveContactResponse&& from) noexcept
    : RemoveContactResponse() {
    *this = ::std::move(from);
  }

  inline RemoveContactResponse& operator=(const RemoveContactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveContactResponse& operator=(RemoveContactResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveContactResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveContactResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveContactResponse*>(
               &_RemoveContactResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RemoveContactResponse& a, RemoveContactResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveContactResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveContactResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveContactResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveContactResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveContactResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RemoveContactResponse& from) {
    RemoveContactResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RemoveContactResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.RemoveContactResponse";
  }
  protected:
  explicit RemoveContactResponse(::google::protobuf::Arena* arena);
  RemoveContactResponse(::google::protobuf::Arena* arena, const RemoveContactResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.RemoveContactResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class RemoveContactRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.RemoveContactRequest) */ {
 public:
  inline RemoveContactRequest() : RemoveContactRequest(nullptr) {}
  ~RemoveContactRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveContactRequest(::google::protobuf::internal::ConstantInitialized);

  inline RemoveContactRequest(const RemoveContactRequest& from)
      : RemoveContactRequest(nullptr, from) {}
  RemoveContactRequest(RemoveContactRequest&& from) noexcept
    : RemoveContactRequest() {
    *this = ::std::move(from);
  }

  inline RemoveContactRequest& operator=(const RemoveContactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveContactRequest& operator=(RemoveContactRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveContactRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveContactRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveContactRequest*>(
               &_RemoveContactRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RemoveContactRequest& a, RemoveContactRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveContactRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveContactRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveContactRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveContactRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveContactRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RemoveContactRequest& from) {
    RemoveContactRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RemoveContactRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.RemoveContactRequest";
  }
  protected:
  explicit RemoveContactRequest(::google::protobuf::Arena* arena);
  RemoveContactRequest(::google::protobuf::Arena* arena, const RemoveContactRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kContactIdFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string contactId = 2;
  void clear_contactid() ;
  const std::string& contactid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contactid(Arg_&& arg, Args_... args);
  std::string* mutable_contactid();
  PROTOBUF_NODISCARD std::string* release_contactid();
  void set_allocated_contactid(std::string* value);

  private:
  const std::string& _internal_contactid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contactid(
      const std::string& value);
  std::string* _internal_mutable_contactid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.RemoveContactRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr contactid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class RemoveChatFromFolderResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.RemoveChatFromFolderResponse) */ {
 public:
  inline RemoveChatFromFolderResponse() : RemoveChatFromFolderResponse(nullptr) {}
  ~RemoveChatFromFolderResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveChatFromFolderResponse(::google::protobuf::internal::ConstantInitialized);

  inline RemoveChatFromFolderResponse(const RemoveChatFromFolderResponse& from)
      : RemoveChatFromFolderResponse(nullptr, from) {}
  RemoveChatFromFolderResponse(RemoveChatFromFolderResponse&& from) noexcept
    : RemoveChatFromFolderResponse() {
    *this = ::std::move(from);
  }

  inline RemoveChatFromFolderResponse& operator=(const RemoveChatFromFolderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveChatFromFolderResponse& operator=(RemoveChatFromFolderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveChatFromFolderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveChatFromFolderResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveChatFromFolderResponse*>(
               &_RemoveChatFromFolderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(RemoveChatFromFolderResponse& a, RemoveChatFromFolderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveChatFromFolderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveChatFromFolderResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveChatFromFolderResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveChatFromFolderResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveChatFromFolderResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RemoveChatFromFolderResponse& from) {
    RemoveChatFromFolderResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RemoveChatFromFolderResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.RemoveChatFromFolderResponse";
  }
  protected:
  explicit RemoveChatFromFolderResponse(::google::protobuf::Arena* arena);
  RemoveChatFromFolderResponse(::google::protobuf::Arena* arena, const RemoveChatFromFolderResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.RemoveChatFromFolderResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class RemoveChatFromFolderRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.RemoveChatFromFolderRequest) */ {
 public:
  inline RemoveChatFromFolderRequest() : RemoveChatFromFolderRequest(nullptr) {}
  ~RemoveChatFromFolderRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RemoveChatFromFolderRequest(::google::protobuf::internal::ConstantInitialized);

  inline RemoveChatFromFolderRequest(const RemoveChatFromFolderRequest& from)
      : RemoveChatFromFolderRequest(nullptr, from) {}
  RemoveChatFromFolderRequest(RemoveChatFromFolderRequest&& from) noexcept
    : RemoveChatFromFolderRequest() {
    *this = ::std::move(from);
  }

  inline RemoveChatFromFolderRequest& operator=(const RemoveChatFromFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveChatFromFolderRequest& operator=(RemoveChatFromFolderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveChatFromFolderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveChatFromFolderRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveChatFromFolderRequest*>(
               &_RemoveChatFromFolderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(RemoveChatFromFolderRequest& a, RemoveChatFromFolderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveChatFromFolderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveChatFromFolderRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveChatFromFolderRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveChatFromFolderRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RemoveChatFromFolderRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RemoveChatFromFolderRequest& from) {
    RemoveChatFromFolderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RemoveChatFromFolderRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.RemoveChatFromFolderRequest";
  }
  protected:
  explicit RemoveChatFromFolderRequest(::google::protobuf::Arena* arena);
  RemoveChatFromFolderRequest(::google::protobuf::Arena* arena, const RemoveChatFromFolderRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFolderIdFieldNumber = 1,
    kChatIdFieldNumber = 2,
  };
  // string folderId = 1;
  void clear_folderid() ;
  const std::string& folderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_folderid(Arg_&& arg, Args_... args);
  std::string* mutable_folderid();
  PROTOBUF_NODISCARD std::string* release_folderid();
  void set_allocated_folderid(std::string* value);

  private:
  const std::string& _internal_folderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_folderid(
      const std::string& value);
  std::string* _internal_mutable_folderid();

  public:
  // string chatId = 2;
  void clear_chatid() ;
  const std::string& chatid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chatid(Arg_&& arg, Args_... args);
  std::string* mutable_chatid();
  PROTOBUF_NODISCARD std::string* release_chatid();
  void set_allocated_chatid(std::string* value);

  private:
  const std::string& _internal_chatid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatid(
      const std::string& value);
  std::string* _internal_mutable_chatid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.RemoveChatFromFolderRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr folderid_;
    ::google::protobuf::internal::ArenaStringPtr chatid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class Reminder final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.Reminder) */ {
 public:
  inline Reminder() : Reminder(nullptr) {}
  ~Reminder() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Reminder(::google::protobuf::internal::ConstantInitialized);

  inline Reminder(const Reminder& from)
      : Reminder(nullptr, from) {}
  Reminder(Reminder&& from) noexcept
    : Reminder() {
    *this = ::std::move(from);
  }

  inline Reminder& operator=(const Reminder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reminder& operator=(Reminder&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reminder& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reminder* internal_default_instance() {
    return reinterpret_cast<const Reminder*>(
               &_Reminder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(Reminder& a, Reminder& b) {
    a.Swap(&b);
  }
  inline void Swap(Reminder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reminder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reminder* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Reminder>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Reminder& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Reminder& from) {
    Reminder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Reminder* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.Reminder";
  }
  protected:
  explicit Reminder(::google::protobuf::Arena* arena);
  Reminder(::google::protobuf::Arena* arena, const Reminder& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kMessageFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string userId = 2;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string message = 3;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // int64 timestamp = 4;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.Reminder)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::int64_t timestamp_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class RegisterResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.RegisterResponse) */ {
 public:
  inline RegisterResponse() : RegisterResponse(nullptr) {}
  ~RegisterResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterResponse(::google::protobuf::internal::ConstantInitialized);

  inline RegisterResponse(const RegisterResponse& from)
      : RegisterResponse(nullptr, from) {}
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegisterResponse& from) {
    RegisterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegisterResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.RegisterResponse";
  }
  protected:
  explicit RegisterResponse(::google::protobuf::Arena* arena);
  RegisterResponse(::google::protobuf::Arena* arena, const RegisterResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.RegisterResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class RegisterRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  ~RegisterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterRequest(::google::protobuf::internal::ConstantInitialized);

  inline RegisterRequest(const RegisterRequest& from)
      : RegisterRequest(nullptr, from) {}
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegisterRequest& from) {
    RegisterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegisterRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::google::protobuf::Arena* arena);
  RegisterRequest(::google::protobuf::Arena* arena, const RegisterRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:messenger.RegisterRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class Permissions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.Permissions) */ {
 public:
  inline Permissions() : Permissions(nullptr) {}
  ~Permissions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Permissions(::google::protobuf::internal::ConstantInitialized);

  inline Permissions(const Permissions& from)
      : Permissions(nullptr, from) {}
  Permissions(Permissions&& from) noexcept
    : Permissions() {
    *this = ::std::move(from);
  }

  inline Permissions& operator=(const Permissions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Permissions& operator=(Permissions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Permissions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Permissions* internal_default_instance() {
    return reinterpret_cast<const Permissions*>(
               &_Permissions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(Permissions& a, Permissions& b) {
    a.Swap(&b);
  }
  inline void Swap(Permissions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Permissions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Permissions* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Permissions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Permissions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Permissions& from) {
    Permissions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Permissions* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.Permissions";
  }
  protected:
  explicit Permissions(::google::protobuf::Arena* arena);
  Permissions(::google::protobuf::Arena* arena, const Permissions& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriteFieldNumber = 1,
    kBanFieldNumber = 2,
  };
  // bool write = 1;
  void clear_write() ;
  bool write() const;
  void set_write(bool value);

  private:
  bool _internal_write() const;
  void _internal_set_write(bool value);

  public:
  // bool ban = 2;
  void clear_ban() ;
  bool ban() const;
  void set_ban(bool value);

  private:
  bool _internal_ban() const;
  void _internal_set_ban(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.Permissions)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool write_;
    bool ban_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class NotificationSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.NotificationSettings) */ {
 public:
  inline NotificationSettings() : NotificationSettings(nullptr) {}
  ~NotificationSettings() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationSettings(::google::protobuf::internal::ConstantInitialized);

  inline NotificationSettings(const NotificationSettings& from)
      : NotificationSettings(nullptr, from) {}
  NotificationSettings(NotificationSettings&& from) noexcept
    : NotificationSettings() {
    *this = ::std::move(from);
  }

  inline NotificationSettings& operator=(const NotificationSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationSettings& operator=(NotificationSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationSettings* internal_default_instance() {
    return reinterpret_cast<const NotificationSettings*>(
               &_NotificationSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(NotificationSettings& a, NotificationSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationSettings* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationSettings* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationSettings>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NotificationSettings& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NotificationSettings& from) {
    NotificationSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NotificationSettings* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.NotificationSettings";
  }
  protected:
  explicit NotificationSettings(::google::protobuf::Arena* arena);
  NotificationSettings(::google::protobuf::Arena* arena, const NotificationSettings& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kEnableNotificationsFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // bool enableNotifications = 2;
  void clear_enablenotifications() ;
  bool enablenotifications() const;
  void set_enablenotifications(bool value);

  private:
  bool _internal_enablenotifications() const;
  void _internal_set_enablenotifications(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.NotificationSettings)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    bool enablenotifications_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class LogoutResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.LogoutResponse) */ {
 public:
  inline LogoutResponse() : LogoutResponse(nullptr) {}
  ~LogoutResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LogoutResponse(::google::protobuf::internal::ConstantInitialized);

  inline LogoutResponse(const LogoutResponse& from)
      : LogoutResponse(nullptr, from) {}
  LogoutResponse(LogoutResponse&& from) noexcept
    : LogoutResponse() {
    *this = ::std::move(from);
  }

  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutResponse& operator=(LogoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const LogoutResponse*>(
               &_LogoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LogoutResponse& a, LogoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogoutResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogoutResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogoutResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LogoutResponse& from) {
    LogoutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogoutResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.LogoutResponse";
  }
  protected:
  explicit LogoutResponse(::google::protobuf::Arena* arena);
  LogoutResponse(::google::protobuf::Arena* arena, const LogoutResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.LogoutResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      38, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class LogoutRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.LogoutRequest) */ {
 public:
  inline LogoutRequest() : LogoutRequest(nullptr) {}
  ~LogoutRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LogoutRequest(::google::protobuf::internal::ConstantInitialized);

  inline LogoutRequest(const LogoutRequest& from)
      : LogoutRequest(nullptr, from) {}
  LogoutRequest(LogoutRequest&& from) noexcept
    : LogoutRequest() {
    *this = ::std::move(from);
  }

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutRequest& operator=(LogoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
               &_LogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogoutRequest& a, LogoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogoutRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogoutRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogoutRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LogoutRequest& from) {
    LogoutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LogoutRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.LogoutRequest";
  }
  protected:
  explicit LogoutRequest(::google::protobuf::Arena* arena);
  LogoutRequest(::google::protobuf::Arena* arena, const LogoutRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // @@protoc_insertion_point(class_scope:messenger.LogoutRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr token_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class LoginResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  ~LoginResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LoginResponse(::google::protobuf::internal::ConstantInitialized);

  inline LoginResponse(const LoginResponse& from)
      : LoginResponse(nullptr, from) {}
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoginResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LoginResponse& from) {
    LoginResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LoginResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.LoginResponse";
  }
  protected:
  explicit LoginResponse(::google::protobuf::Arena* arena);
  LoginResponse(::google::protobuf::Arena* arena, const LoginResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kTokenFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // string token = 3;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.LoginResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::google::protobuf::internal::ArenaStringPtr token_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class LoginRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LoginRequest(::google::protobuf::internal::ConstantInitialized);

  inline LoginRequest(const LoginRequest& from)
      : LoginRequest(nullptr, from) {}
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LoginRequest& from) {
    LoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LoginRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.LoginRequest";
  }
  protected:
  explicit LoginRequest(::google::protobuf::Arena* arena);
  LoginRequest(::google::protobuf::Arena* arena, const LoginRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* value);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:messenger.LoginRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr username_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetToDoItemsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetToDoItemsRequest) */ {
 public:
  inline GetToDoItemsRequest() : GetToDoItemsRequest(nullptr) {}
  ~GetToDoItemsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetToDoItemsRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetToDoItemsRequest(const GetToDoItemsRequest& from)
      : GetToDoItemsRequest(nullptr, from) {}
  GetToDoItemsRequest(GetToDoItemsRequest&& from) noexcept
    : GetToDoItemsRequest() {
    *this = ::std::move(from);
  }

  inline GetToDoItemsRequest& operator=(const GetToDoItemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetToDoItemsRequest& operator=(GetToDoItemsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetToDoItemsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetToDoItemsRequest* internal_default_instance() {
    return reinterpret_cast<const GetToDoItemsRequest*>(
               &_GetToDoItemsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GetToDoItemsRequest& a, GetToDoItemsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetToDoItemsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetToDoItemsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetToDoItemsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetToDoItemsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetToDoItemsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetToDoItemsRequest& from) {
    GetToDoItemsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetToDoItemsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetToDoItemsRequest";
  }
  protected:
  explicit GetToDoItemsRequest(::google::protobuf::Arena* arena);
  GetToDoItemsRequest(::google::protobuf::Arena* arena, const GetToDoItemsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // int64 offset = 2;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // int32 count = 3;
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetToDoItemsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::int64_t offset_;
    ::int32_t count_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetToDoItemsOffsetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetToDoItemsOffsetResponse) */ {
 public:
  inline GetToDoItemsOffsetResponse() : GetToDoItemsOffsetResponse(nullptr) {}
  ~GetToDoItemsOffsetResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetToDoItemsOffsetResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetToDoItemsOffsetResponse(const GetToDoItemsOffsetResponse& from)
      : GetToDoItemsOffsetResponse(nullptr, from) {}
  GetToDoItemsOffsetResponse(GetToDoItemsOffsetResponse&& from) noexcept
    : GetToDoItemsOffsetResponse() {
    *this = ::std::move(from);
  }

  inline GetToDoItemsOffsetResponse& operator=(const GetToDoItemsOffsetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetToDoItemsOffsetResponse& operator=(GetToDoItemsOffsetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetToDoItemsOffsetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetToDoItemsOffsetResponse* internal_default_instance() {
    return reinterpret_cast<const GetToDoItemsOffsetResponse*>(
               &_GetToDoItemsOffsetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GetToDoItemsOffsetResponse& a, GetToDoItemsOffsetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetToDoItemsOffsetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetToDoItemsOffsetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetToDoItemsOffsetResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetToDoItemsOffsetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetToDoItemsOffsetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetToDoItemsOffsetResponse& from) {
    GetToDoItemsOffsetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetToDoItemsOffsetResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetToDoItemsOffsetResponse";
  }
  protected:
  explicit GetToDoItemsOffsetResponse(::google::protobuf::Arena* arena);
  GetToDoItemsOffsetResponse(::google::protobuf::Arena* arena, const GetToDoItemsOffsetResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
  };
  // int64 offset = 1;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetToDoItemsOffsetResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t offset_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetToDoItemsOffsetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetToDoItemsOffsetRequest) */ {
 public:
  inline GetToDoItemsOffsetRequest() : GetToDoItemsOffsetRequest(nullptr) {}
  ~GetToDoItemsOffsetRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetToDoItemsOffsetRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetToDoItemsOffsetRequest(const GetToDoItemsOffsetRequest& from)
      : GetToDoItemsOffsetRequest(nullptr, from) {}
  GetToDoItemsOffsetRequest(GetToDoItemsOffsetRequest&& from) noexcept
    : GetToDoItemsOffsetRequest() {
    *this = ::std::move(from);
  }

  inline GetToDoItemsOffsetRequest& operator=(const GetToDoItemsOffsetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetToDoItemsOffsetRequest& operator=(GetToDoItemsOffsetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetToDoItemsOffsetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetToDoItemsOffsetRequest* internal_default_instance() {
    return reinterpret_cast<const GetToDoItemsOffsetRequest*>(
               &_GetToDoItemsOffsetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetToDoItemsOffsetRequest& a, GetToDoItemsOffsetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetToDoItemsOffsetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetToDoItemsOffsetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetToDoItemsOffsetRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetToDoItemsOffsetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetToDoItemsOffsetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetToDoItemsOffsetRequest& from) {
    GetToDoItemsOffsetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetToDoItemsOffsetRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetToDoItemsOffsetRequest";
  }
  protected:
  explicit GetToDoItemsOffsetRequest(::google::protobuf::Arena* arena);
  GetToDoItemsOffsetRequest(::google::protobuf::Arena* arena, const GetToDoItemsOffsetRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetToDoItemsOffsetRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetNewToDoItemsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetNewToDoItemsRequest) */ {
 public:
  inline GetNewToDoItemsRequest() : GetNewToDoItemsRequest(nullptr) {}
  ~GetNewToDoItemsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetNewToDoItemsRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetNewToDoItemsRequest(const GetNewToDoItemsRequest& from)
      : GetNewToDoItemsRequest(nullptr, from) {}
  GetNewToDoItemsRequest(GetNewToDoItemsRequest&& from) noexcept
    : GetNewToDoItemsRequest() {
    *this = ::std::move(from);
  }

  inline GetNewToDoItemsRequest& operator=(const GetNewToDoItemsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewToDoItemsRequest& operator=(GetNewToDoItemsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNewToDoItemsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNewToDoItemsRequest* internal_default_instance() {
    return reinterpret_cast<const GetNewToDoItemsRequest*>(
               &_GetNewToDoItemsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(GetNewToDoItemsRequest& a, GetNewToDoItemsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNewToDoItemsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewToDoItemsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNewToDoItemsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNewToDoItemsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetNewToDoItemsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetNewToDoItemsRequest& from) {
    GetNewToDoItemsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetNewToDoItemsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetNewToDoItemsRequest";
  }
  protected:
  explicit GetNewToDoItemsRequest(::google::protobuf::Arena* arena);
  GetNewToDoItemsRequest(::google::protobuf::Arena* arena, const GetNewToDoItemsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // int64 offset = 2;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetNewToDoItemsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::int64_t offset_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetNewMessagesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetNewMessagesRequest) */ {
 public:
  inline GetNewMessagesRequest() : GetNewMessagesRequest(nullptr) {}
  ~GetNewMessagesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetNewMessagesRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetNewMessagesRequest(const GetNewMessagesRequest& from)
      : GetNewMessagesRequest(nullptr, from) {}
  GetNewMessagesRequest(GetNewMessagesRequest&& from) noexcept
    : GetNewMessagesRequest() {
    *this = ::std::move(from);
  }

  inline GetNewMessagesRequest& operator=(const GetNewMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewMessagesRequest& operator=(GetNewMessagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNewMessagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNewMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const GetNewMessagesRequest*>(
               &_GetNewMessagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetNewMessagesRequest& a, GetNewMessagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNewMessagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewMessagesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNewMessagesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNewMessagesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetNewMessagesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetNewMessagesRequest& from) {
    GetNewMessagesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetNewMessagesRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetNewMessagesRequest";
  }
  protected:
  explicit GetNewMessagesRequest(::google::protobuf::Arena* arena);
  GetNewMessagesRequest(::google::protobuf::Arena* arena, const GetNewMessagesRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // string chatId = 1;
  void clear_chatid() ;
  const std::string& chatid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chatid(Arg_&& arg, Args_... args);
  std::string* mutable_chatid();
  PROTOBUF_NODISCARD std::string* release_chatid();
  void set_allocated_chatid(std::string* value);

  private:
  const std::string& _internal_chatid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatid(
      const std::string& value);
  std::string* _internal_mutable_chatid();

  public:
  // int64 offset = 2;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetNewMessagesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr chatid_;
    ::int64_t offset_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetNewGroupChatsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetNewGroupChatsRequest) */ {
 public:
  inline GetNewGroupChatsRequest() : GetNewGroupChatsRequest(nullptr) {}
  ~GetNewGroupChatsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetNewGroupChatsRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetNewGroupChatsRequest(const GetNewGroupChatsRequest& from)
      : GetNewGroupChatsRequest(nullptr, from) {}
  GetNewGroupChatsRequest(GetNewGroupChatsRequest&& from) noexcept
    : GetNewGroupChatsRequest() {
    *this = ::std::move(from);
  }

  inline GetNewGroupChatsRequest& operator=(const GetNewGroupChatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewGroupChatsRequest& operator=(GetNewGroupChatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNewGroupChatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNewGroupChatsRequest* internal_default_instance() {
    return reinterpret_cast<const GetNewGroupChatsRequest*>(
               &_GetNewGroupChatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetNewGroupChatsRequest& a, GetNewGroupChatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNewGroupChatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewGroupChatsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNewGroupChatsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNewGroupChatsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetNewGroupChatsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetNewGroupChatsRequest& from) {
    GetNewGroupChatsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetNewGroupChatsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetNewGroupChatsRequest";
  }
  protected:
  explicit GetNewGroupChatsRequest(::google::protobuf::Arena* arena);
  GetNewGroupChatsRequest(::google::protobuf::Arena* arena, const GetNewGroupChatsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // int64 offset = 2;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetNewGroupChatsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::int64_t offset_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetNewFoldersRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetNewFoldersRequest) */ {
 public:
  inline GetNewFoldersRequest() : GetNewFoldersRequest(nullptr) {}
  ~GetNewFoldersRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetNewFoldersRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetNewFoldersRequest(const GetNewFoldersRequest& from)
      : GetNewFoldersRequest(nullptr, from) {}
  GetNewFoldersRequest(GetNewFoldersRequest&& from) noexcept
    : GetNewFoldersRequest() {
    *this = ::std::move(from);
  }

  inline GetNewFoldersRequest& operator=(const GetNewFoldersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewFoldersRequest& operator=(GetNewFoldersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNewFoldersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNewFoldersRequest* internal_default_instance() {
    return reinterpret_cast<const GetNewFoldersRequest*>(
               &_GetNewFoldersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetNewFoldersRequest& a, GetNewFoldersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNewFoldersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewFoldersRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNewFoldersRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNewFoldersRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetNewFoldersRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetNewFoldersRequest& from) {
    GetNewFoldersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetNewFoldersRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetNewFoldersRequest";
  }
  protected:
  explicit GetNewFoldersRequest(::google::protobuf::Arena* arena);
  GetNewFoldersRequest(::google::protobuf::Arena* arena, const GetNewFoldersRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetNewFoldersRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      45, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetMessagesOffsetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetMessagesOffsetResponse) */ {
 public:
  inline GetMessagesOffsetResponse() : GetMessagesOffsetResponse(nullptr) {}
  ~GetMessagesOffsetResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetMessagesOffsetResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetMessagesOffsetResponse(const GetMessagesOffsetResponse& from)
      : GetMessagesOffsetResponse(nullptr, from) {}
  GetMessagesOffsetResponse(GetMessagesOffsetResponse&& from) noexcept
    : GetMessagesOffsetResponse() {
    *this = ::std::move(from);
  }

  inline GetMessagesOffsetResponse& operator=(const GetMessagesOffsetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessagesOffsetResponse& operator=(GetMessagesOffsetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMessagesOffsetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMessagesOffsetResponse* internal_default_instance() {
    return reinterpret_cast<const GetMessagesOffsetResponse*>(
               &_GetMessagesOffsetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetMessagesOffsetResponse& a, GetMessagesOffsetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessagesOffsetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessagesOffsetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMessagesOffsetResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMessagesOffsetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetMessagesOffsetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetMessagesOffsetResponse& from) {
    GetMessagesOffsetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetMessagesOffsetResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetMessagesOffsetResponse";
  }
  protected:
  explicit GetMessagesOffsetResponse(::google::protobuf::Arena* arena);
  GetMessagesOffsetResponse(::google::protobuf::Arena* arena, const GetMessagesOffsetResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
  };
  // int64 offset = 1;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetMessagesOffsetResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t offset_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetMessagesOffsetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetMessagesOffsetRequest) */ {
 public:
  inline GetMessagesOffsetRequest() : GetMessagesOffsetRequest(nullptr) {}
  ~GetMessagesOffsetRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetMessagesOffsetRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetMessagesOffsetRequest(const GetMessagesOffsetRequest& from)
      : GetMessagesOffsetRequest(nullptr, from) {}
  GetMessagesOffsetRequest(GetMessagesOffsetRequest&& from) noexcept
    : GetMessagesOffsetRequest() {
    *this = ::std::move(from);
  }

  inline GetMessagesOffsetRequest& operator=(const GetMessagesOffsetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessagesOffsetRequest& operator=(GetMessagesOffsetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMessagesOffsetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMessagesOffsetRequest* internal_default_instance() {
    return reinterpret_cast<const GetMessagesOffsetRequest*>(
               &_GetMessagesOffsetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetMessagesOffsetRequest& a, GetMessagesOffsetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessagesOffsetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessagesOffsetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMessagesOffsetRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMessagesOffsetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetMessagesOffsetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetMessagesOffsetRequest& from) {
    GetMessagesOffsetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetMessagesOffsetRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetMessagesOffsetRequest";
  }
  protected:
  explicit GetMessagesOffsetRequest(::google::protobuf::Arena* arena);
  GetMessagesOffsetRequest(::google::protobuf::Arena* arena, const GetMessagesOffsetRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatIdFieldNumber = 1,
  };
  // string chatId = 1;
  void clear_chatid() ;
  const std::string& chatid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chatid(Arg_&& arg, Args_... args);
  std::string* mutable_chatid();
  PROTOBUF_NODISCARD std::string* release_chatid();
  void set_allocated_chatid(std::string* value);

  private:
  const std::string& _internal_chatid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatid(
      const std::string& value);
  std::string* _internal_mutable_chatid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetMessagesOffsetRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr chatid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetMessagesConversionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetMessagesConversionRequest) */ {
 public:
  inline GetMessagesConversionRequest() : GetMessagesConversionRequest(nullptr) {}
  ~GetMessagesConversionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetMessagesConversionRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetMessagesConversionRequest(const GetMessagesConversionRequest& from)
      : GetMessagesConversionRequest(nullptr, from) {}
  GetMessagesConversionRequest(GetMessagesConversionRequest&& from) noexcept
    : GetMessagesConversionRequest() {
    *this = ::std::move(from);
  }

  inline GetMessagesConversionRequest& operator=(const GetMessagesConversionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessagesConversionRequest& operator=(GetMessagesConversionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMessagesConversionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMessagesConversionRequest* internal_default_instance() {
    return reinterpret_cast<const GetMessagesConversionRequest*>(
               &_GetMessagesConversionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetMessagesConversionRequest& a, GetMessagesConversionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessagesConversionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessagesConversionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMessagesConversionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMessagesConversionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetMessagesConversionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetMessagesConversionRequest& from) {
    GetMessagesConversionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetMessagesConversionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetMessagesConversionRequest";
  }
  protected:
  explicit GetMessagesConversionRequest(::google::protobuf::Arena* arena);
  GetMessagesConversionRequest(::google::protobuf::Arena* arena, const GetMessagesConversionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // string chatId = 1;
  void clear_chatid() ;
  const std::string& chatid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chatid(Arg_&& arg, Args_... args);
  std::string* mutable_chatid();
  PROTOBUF_NODISCARD std::string* release_chatid();
  void set_allocated_chatid(std::string* value);

  private:
  const std::string& _internal_chatid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatid(
      const std::string& value);
  std::string* _internal_mutable_chatid();

  public:
  // int64 offset = 2;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // int32 count = 3;
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetMessagesConversionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr chatid_;
    ::int64_t offset_;
    ::int32_t count_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetGroupChatsOffsetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetGroupChatsOffsetResponse) */ {
 public:
  inline GetGroupChatsOffsetResponse() : GetGroupChatsOffsetResponse(nullptr) {}
  ~GetGroupChatsOffsetResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetGroupChatsOffsetResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetGroupChatsOffsetResponse(const GetGroupChatsOffsetResponse& from)
      : GetGroupChatsOffsetResponse(nullptr, from) {}
  GetGroupChatsOffsetResponse(GetGroupChatsOffsetResponse&& from) noexcept
    : GetGroupChatsOffsetResponse() {
    *this = ::std::move(from);
  }

  inline GetGroupChatsOffsetResponse& operator=(const GetGroupChatsOffsetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupChatsOffsetResponse& operator=(GetGroupChatsOffsetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupChatsOffsetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupChatsOffsetResponse* internal_default_instance() {
    return reinterpret_cast<const GetGroupChatsOffsetResponse*>(
               &_GetGroupChatsOffsetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetGroupChatsOffsetResponse& a, GetGroupChatsOffsetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupChatsOffsetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupChatsOffsetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupChatsOffsetResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupChatsOffsetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetGroupChatsOffsetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetGroupChatsOffsetResponse& from) {
    GetGroupChatsOffsetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetGroupChatsOffsetResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetGroupChatsOffsetResponse";
  }
  protected:
  explicit GetGroupChatsOffsetResponse(::google::protobuf::Arena* arena);
  GetGroupChatsOffsetResponse(::google::protobuf::Arena* arena, const GetGroupChatsOffsetResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
  };
  // int64 offset = 1;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetGroupChatsOffsetResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t offset_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetGroupChatsOffsetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetGroupChatsOffsetRequest) */ {
 public:
  inline GetGroupChatsOffsetRequest() : GetGroupChatsOffsetRequest(nullptr) {}
  ~GetGroupChatsOffsetRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetGroupChatsOffsetRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetGroupChatsOffsetRequest(const GetGroupChatsOffsetRequest& from)
      : GetGroupChatsOffsetRequest(nullptr, from) {}
  GetGroupChatsOffsetRequest(GetGroupChatsOffsetRequest&& from) noexcept
    : GetGroupChatsOffsetRequest() {
    *this = ::std::move(from);
  }

  inline GetGroupChatsOffsetRequest& operator=(const GetGroupChatsOffsetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupChatsOffsetRequest& operator=(GetGroupChatsOffsetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupChatsOffsetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupChatsOffsetRequest* internal_default_instance() {
    return reinterpret_cast<const GetGroupChatsOffsetRequest*>(
               &_GetGroupChatsOffsetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetGroupChatsOffsetRequest& a, GetGroupChatsOffsetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupChatsOffsetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupChatsOffsetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupChatsOffsetRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupChatsOffsetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetGroupChatsOffsetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetGroupChatsOffsetRequest& from) {
    GetGroupChatsOffsetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetGroupChatsOffsetRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetGroupChatsOffsetRequest";
  }
  protected:
  explicit GetGroupChatsOffsetRequest(::google::protobuf::Arena* arena);
  GetGroupChatsOffsetRequest(::google::protobuf::Arena* arena, const GetGroupChatsOffsetRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetGroupChatsOffsetRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetGroupChatsConversionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetGroupChatsConversionRequest) */ {
 public:
  inline GetGroupChatsConversionRequest() : GetGroupChatsConversionRequest(nullptr) {}
  ~GetGroupChatsConversionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetGroupChatsConversionRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetGroupChatsConversionRequest(const GetGroupChatsConversionRequest& from)
      : GetGroupChatsConversionRequest(nullptr, from) {}
  GetGroupChatsConversionRequest(GetGroupChatsConversionRequest&& from) noexcept
    : GetGroupChatsConversionRequest() {
    *this = ::std::move(from);
  }

  inline GetGroupChatsConversionRequest& operator=(const GetGroupChatsConversionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupChatsConversionRequest& operator=(GetGroupChatsConversionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupChatsConversionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupChatsConversionRequest* internal_default_instance() {
    return reinterpret_cast<const GetGroupChatsConversionRequest*>(
               &_GetGroupChatsConversionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetGroupChatsConversionRequest& a, GetGroupChatsConversionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupChatsConversionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupChatsConversionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupChatsConversionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupChatsConversionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetGroupChatsConversionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetGroupChatsConversionRequest& from) {
    GetGroupChatsConversionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetGroupChatsConversionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetGroupChatsConversionRequest";
  }
  protected:
  explicit GetGroupChatsConversionRequest(::google::protobuf::Arena* arena);
  GetGroupChatsConversionRequest(::google::protobuf::Arena* arena, const GetGroupChatsConversionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // int64 offset = 2;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // int32 count = 3;
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetGroupChatsConversionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::int64_t offset_;
    ::int32_t count_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetFoldersRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetFoldersRequest) */ {
 public:
  inline GetFoldersRequest() : GetFoldersRequest(nullptr) {}
  ~GetFoldersRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetFoldersRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetFoldersRequest(const GetFoldersRequest& from)
      : GetFoldersRequest(nullptr, from) {}
  GetFoldersRequest(GetFoldersRequest&& from) noexcept
    : GetFoldersRequest() {
    *this = ::std::move(from);
  }

  inline GetFoldersRequest& operator=(const GetFoldersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFoldersRequest& operator=(GetFoldersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFoldersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFoldersRequest* internal_default_instance() {
    return reinterpret_cast<const GetFoldersRequest*>(
               &_GetFoldersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetFoldersRequest& a, GetFoldersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFoldersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFoldersRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFoldersRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFoldersRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFoldersRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetFoldersRequest& from) {
    GetFoldersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetFoldersRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetFoldersRequest";
  }
  protected:
  explicit GetFoldersRequest(::google::protobuf::Arena* arena);
  GetFoldersRequest(::google::protobuf::Arena* arena, const GetFoldersRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // int64 offset = 2;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // int32 count = 3;
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetFoldersRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::int64_t offset_;
    ::int32_t count_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetFoldersOffsetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetFoldersOffsetResponse) */ {
 public:
  inline GetFoldersOffsetResponse() : GetFoldersOffsetResponse(nullptr) {}
  ~GetFoldersOffsetResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetFoldersOffsetResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetFoldersOffsetResponse(const GetFoldersOffsetResponse& from)
      : GetFoldersOffsetResponse(nullptr, from) {}
  GetFoldersOffsetResponse(GetFoldersOffsetResponse&& from) noexcept
    : GetFoldersOffsetResponse() {
    *this = ::std::move(from);
  }

  inline GetFoldersOffsetResponse& operator=(const GetFoldersOffsetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFoldersOffsetResponse& operator=(GetFoldersOffsetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFoldersOffsetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFoldersOffsetResponse* internal_default_instance() {
    return reinterpret_cast<const GetFoldersOffsetResponse*>(
               &_GetFoldersOffsetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GetFoldersOffsetResponse& a, GetFoldersOffsetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFoldersOffsetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFoldersOffsetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFoldersOffsetResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFoldersOffsetResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFoldersOffsetResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetFoldersOffsetResponse& from) {
    GetFoldersOffsetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetFoldersOffsetResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetFoldersOffsetResponse";
  }
  protected:
  explicit GetFoldersOffsetResponse(::google::protobuf::Arena* arena);
  GetFoldersOffsetResponse(::google::protobuf::Arena* arena, const GetFoldersOffsetResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
  };
  // int64 offset = 1;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetFoldersOffsetResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t offset_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetFoldersOffsetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetFoldersOffsetRequest) */ {
 public:
  inline GetFoldersOffsetRequest() : GetFoldersOffsetRequest(nullptr) {}
  ~GetFoldersOffsetRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetFoldersOffsetRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetFoldersOffsetRequest(const GetFoldersOffsetRequest& from)
      : GetFoldersOffsetRequest(nullptr, from) {}
  GetFoldersOffsetRequest(GetFoldersOffsetRequest&& from) noexcept
    : GetFoldersOffsetRequest() {
    *this = ::std::move(from);
  }

  inline GetFoldersOffsetRequest& operator=(const GetFoldersOffsetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFoldersOffsetRequest& operator=(GetFoldersOffsetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFoldersOffsetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFoldersOffsetRequest* internal_default_instance() {
    return reinterpret_cast<const GetFoldersOffsetRequest*>(
               &_GetFoldersOffsetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetFoldersOffsetRequest& a, GetFoldersOffsetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFoldersOffsetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFoldersOffsetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFoldersOffsetRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFoldersOffsetRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFoldersOffsetRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetFoldersOffsetRequest& from) {
    GetFoldersOffsetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetFoldersOffsetRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetFoldersOffsetRequest";
  }
  protected:
  explicit GetFoldersOffsetRequest(::google::protobuf::Arena* arena);
  GetFoldersOffsetRequest(::google::protobuf::Arena* arena, const GetFoldersOffsetRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.GetFoldersOffsetRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class FileMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.FileMessage) */ {
 public:
  inline FileMessage() : FileMessage(nullptr) {}
  ~FileMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileMessage(::google::protobuf::internal::ConstantInitialized);

  inline FileMessage(const FileMessage& from)
      : FileMessage(nullptr, from) {}
  FileMessage(FileMessage&& from) noexcept
    : FileMessage() {
    *this = ::std::move(from);
  }

  inline FileMessage& operator=(const FileMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileMessage& operator=(FileMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileMessage* internal_default_instance() {
    return reinterpret_cast<const FileMessage*>(
               &_FileMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(FileMessage& a, FileMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FileMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileMessage& from) {
    FileMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.FileMessage";
  }
  protected:
  explicit FileMessage(::google::protobuf::Arena* arena);
  FileMessage(::google::protobuf::Arena* arena, const FileMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSenderIdFieldNumber = 2,
    kFilenameFieldNumber = 4,
    kDataFieldNumber = 5,
    kTypeFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string senderId = 2;
  void clear_senderid() ;
  const std::string& senderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_senderid(Arg_&& arg, Args_... args);
  std::string* mutable_senderid();
  PROTOBUF_NODISCARD std::string* release_senderid();
  void set_allocated_senderid(std::string* value);

  private:
  const std::string& _internal_senderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_senderid(
      const std::string& value);
  std::string* _internal_mutable_senderid();

  public:
  // string filename = 4;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // bytes data = 5;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .messenger.FileType type = 3;
  void clear_type() ;
  ::messenger::FileType type() const;
  void set_type(::messenger::FileType value);

  private:
  ::messenger::FileType _internal_type() const;
  void _internal_set_type(::messenger::FileType value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.FileMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr senderid_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class EditMessageResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.EditMessageResponse) */ {
 public:
  inline EditMessageResponse() : EditMessageResponse(nullptr) {}
  ~EditMessageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EditMessageResponse(::google::protobuf::internal::ConstantInitialized);

  inline EditMessageResponse(const EditMessageResponse& from)
      : EditMessageResponse(nullptr, from) {}
  EditMessageResponse(EditMessageResponse&& from) noexcept
    : EditMessageResponse() {
    *this = ::std::move(from);
  }

  inline EditMessageResponse& operator=(const EditMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditMessageResponse& operator=(EditMessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditMessageResponse* internal_default_instance() {
    return reinterpret_cast<const EditMessageResponse*>(
               &_EditMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(EditMessageResponse& a, EditMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EditMessageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditMessageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditMessageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditMessageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EditMessageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EditMessageResponse& from) {
    EditMessageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EditMessageResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.EditMessageResponse";
  }
  protected:
  explicit EditMessageResponse(::google::protobuf::Arena* arena);
  EditMessageResponse(::google::protobuf::Arena* arena, const EditMessageResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.EditMessageResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class EditMessageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.EditMessageRequest) */ {
 public:
  inline EditMessageRequest() : EditMessageRequest(nullptr) {}
  ~EditMessageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EditMessageRequest(::google::protobuf::internal::ConstantInitialized);

  inline EditMessageRequest(const EditMessageRequest& from)
      : EditMessageRequest(nullptr, from) {}
  EditMessageRequest(EditMessageRequest&& from) noexcept
    : EditMessageRequest() {
    *this = ::std::move(from);
  }

  inline EditMessageRequest& operator=(const EditMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditMessageRequest& operator=(EditMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditMessageRequest* internal_default_instance() {
    return reinterpret_cast<const EditMessageRequest*>(
               &_EditMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(EditMessageRequest& a, EditMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EditMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditMessageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditMessageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditMessageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EditMessageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EditMessageRequest& from) {
    EditMessageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EditMessageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.EditMessageRequest";
  }
  protected:
  explicit EditMessageRequest(::google::protobuf::Arena* arena);
  EditMessageRequest(::google::protobuf::Arena* arena, const EditMessageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kNewContentFieldNumber = 2,
  };
  // string messageId = 1;
  void clear_messageid() ;
  const std::string& messageid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_messageid(Arg_&& arg, Args_... args);
  std::string* mutable_messageid();
  PROTOBUF_NODISCARD std::string* release_messageid();
  void set_allocated_messageid(std::string* value);

  private:
  const std::string& _internal_messageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messageid(
      const std::string& value);
  std::string* _internal_mutable_messageid();

  public:
  // bytes newContent = 2;
  void clear_newcontent() ;
  const std::string& newcontent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_newcontent(Arg_&& arg, Args_... args);
  std::string* mutable_newcontent();
  PROTOBUF_NODISCARD std::string* release_newcontent();
  void set_allocated_newcontent(std::string* value);

  private:
  const std::string& _internal_newcontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newcontent(
      const std::string& value);
  std::string* _internal_mutable_newcontent();

  public:
  // @@protoc_insertion_point(class_scope:messenger.EditMessageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr messageid_;
    ::google::protobuf::internal::ArenaStringPtr newcontent_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class DeleteMessageResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.DeleteMessageResponse) */ {
 public:
  inline DeleteMessageResponse() : DeleteMessageResponse(nullptr) {}
  ~DeleteMessageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteMessageResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeleteMessageResponse(const DeleteMessageResponse& from)
      : DeleteMessageResponse(nullptr, from) {}
  DeleteMessageResponse(DeleteMessageResponse&& from) noexcept
    : DeleteMessageResponse() {
    *this = ::std::move(from);
  }

  inline DeleteMessageResponse& operator=(const DeleteMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMessageResponse& operator=(DeleteMessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMessageResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteMessageResponse*>(
               &_DeleteMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DeleteMessageResponse& a, DeleteMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMessageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMessageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMessageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMessageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteMessageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeleteMessageResponse& from) {
    DeleteMessageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteMessageResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.DeleteMessageResponse";
  }
  protected:
  explicit DeleteMessageResponse(::google::protobuf::Arena* arena);
  DeleteMessageResponse(::google::protobuf::Arena* arena, const DeleteMessageResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.DeleteMessageResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class DeleteMessageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.DeleteMessageRequest) */ {
 public:
  inline DeleteMessageRequest() : DeleteMessageRequest(nullptr) {}
  ~DeleteMessageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteMessageRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeleteMessageRequest(const DeleteMessageRequest& from)
      : DeleteMessageRequest(nullptr, from) {}
  DeleteMessageRequest(DeleteMessageRequest&& from) noexcept
    : DeleteMessageRequest() {
    *this = ::std::move(from);
  }

  inline DeleteMessageRequest& operator=(const DeleteMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMessageRequest& operator=(DeleteMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMessageRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteMessageRequest*>(
               &_DeleteMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DeleteMessageRequest& a, DeleteMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMessageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMessageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMessageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteMessageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeleteMessageRequest& from) {
    DeleteMessageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteMessageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.DeleteMessageRequest";
  }
  protected:
  explicit DeleteMessageRequest(::google::protobuf::Arena* arena);
  DeleteMessageRequest(::google::protobuf::Arena* arena, const DeleteMessageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
  };
  // string messageId = 1;
  void clear_messageid() ;
  const std::string& messageid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_messageid(Arg_&& arg, Args_... args);
  std::string* mutable_messageid();
  PROTOBUF_NODISCARD std::string* release_messageid();
  void set_allocated_messageid(std::string* value);

  private:
  const std::string& _internal_messageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messageid(
      const std::string& value);
  std::string* _internal_mutable_messageid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.DeleteMessageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      48, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr messageid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class DeleteChatFolderResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.DeleteChatFolderResponse) */ {
 public:
  inline DeleteChatFolderResponse() : DeleteChatFolderResponse(nullptr) {}
  ~DeleteChatFolderResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteChatFolderResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeleteChatFolderResponse(const DeleteChatFolderResponse& from)
      : DeleteChatFolderResponse(nullptr, from) {}
  DeleteChatFolderResponse(DeleteChatFolderResponse&& from) noexcept
    : DeleteChatFolderResponse() {
    *this = ::std::move(from);
  }

  inline DeleteChatFolderResponse& operator=(const DeleteChatFolderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteChatFolderResponse& operator=(DeleteChatFolderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteChatFolderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteChatFolderResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteChatFolderResponse*>(
               &_DeleteChatFolderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(DeleteChatFolderResponse& a, DeleteChatFolderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteChatFolderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteChatFolderResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteChatFolderResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteChatFolderResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteChatFolderResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeleteChatFolderResponse& from) {
    DeleteChatFolderResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteChatFolderResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.DeleteChatFolderResponse";
  }
  protected:
  explicit DeleteChatFolderResponse(::google::protobuf::Arena* arena);
  DeleteChatFolderResponse(::google::protobuf::Arena* arena, const DeleteChatFolderResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.DeleteChatFolderResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class DeleteChatFolderRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.DeleteChatFolderRequest) */ {
 public:
  inline DeleteChatFolderRequest() : DeleteChatFolderRequest(nullptr) {}
  ~DeleteChatFolderRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteChatFolderRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeleteChatFolderRequest(const DeleteChatFolderRequest& from)
      : DeleteChatFolderRequest(nullptr, from) {}
  DeleteChatFolderRequest(DeleteChatFolderRequest&& from) noexcept
    : DeleteChatFolderRequest() {
    *this = ::std::move(from);
  }

  inline DeleteChatFolderRequest& operator=(const DeleteChatFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteChatFolderRequest& operator=(DeleteChatFolderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteChatFolderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteChatFolderRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteChatFolderRequest*>(
               &_DeleteChatFolderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(DeleteChatFolderRequest& a, DeleteChatFolderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteChatFolderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteChatFolderRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteChatFolderRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteChatFolderRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteChatFolderRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeleteChatFolderRequest& from) {
    DeleteChatFolderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeleteChatFolderRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.DeleteChatFolderRequest";
  }
  protected:
  explicit DeleteChatFolderRequest(::google::protobuf::Arena* arena);
  DeleteChatFolderRequest(::google::protobuf::Arena* arena, const DeleteChatFolderRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFolderIdFieldNumber = 1,
  };
  // string folderId = 1;
  void clear_folderid() ;
  const std::string& folderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_folderid(Arg_&& arg, Args_... args);
  std::string* mutable_folderid();
  PROTOBUF_NODISCARD std::string* release_folderid();
  void set_allocated_folderid(std::string* value);

  private:
  const std::string& _internal_folderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_folderid(
      const std::string& value);
  std::string* _internal_mutable_folderid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.DeleteChatFolderRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr folderid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class CreateChatFolderRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.CreateChatFolderRequest) */ {
 public:
  inline CreateChatFolderRequest() : CreateChatFolderRequest(nullptr) {}
  ~CreateChatFolderRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateChatFolderRequest(::google::protobuf::internal::ConstantInitialized);

  inline CreateChatFolderRequest(const CreateChatFolderRequest& from)
      : CreateChatFolderRequest(nullptr, from) {}
  CreateChatFolderRequest(CreateChatFolderRequest&& from) noexcept
    : CreateChatFolderRequest() {
    *this = ::std::move(from);
  }

  inline CreateChatFolderRequest& operator=(const CreateChatFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChatFolderRequest& operator=(CreateChatFolderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChatFolderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChatFolderRequest* internal_default_instance() {
    return reinterpret_cast<const CreateChatFolderRequest*>(
               &_CreateChatFolderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CreateChatFolderRequest& a, CreateChatFolderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChatFolderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChatFolderRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateChatFolderRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateChatFolderRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateChatFolderRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CreateChatFolderRequest& from) {
    CreateChatFolderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateChatFolderRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.CreateChatFolderRequest";
  }
  protected:
  explicit CreateChatFolderRequest(::google::protobuf::Arena* arena);
  CreateChatFolderRequest(::google::protobuf::Arena* arena, const CreateChatFolderRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:messenger.CreateChatFolderRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class ContactList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.ContactList) */ {
 public:
  inline ContactList() : ContactList(nullptr) {}
  ~ContactList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ContactList(::google::protobuf::internal::ConstantInitialized);

  inline ContactList(const ContactList& from)
      : ContactList(nullptr, from) {}
  ContactList(ContactList&& from) noexcept
    : ContactList() {
    *this = ::std::move(from);
  }

  inline ContactList& operator=(const ContactList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactList& operator=(ContactList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContactList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContactList* internal_default_instance() {
    return reinterpret_cast<const ContactList*>(
               &_ContactList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ContactList& a, ContactList& b) {
    a.Swap(&b);
  }
  inline void Swap(ContactList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContactList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContactList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContactList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ContactList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ContactList& from) {
    ContactList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ContactList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.ContactList";
  }
  protected:
  explicit ContactList(::google::protobuf::Arena* arena);
  ContactList(::google::protobuf::Arena* arena, const ContactList& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContactIdsFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // repeated string contactIds = 2;
  int contactids_size() const;
  private:
  int _internal_contactids_size() const;

  public:
  void clear_contactids() ;
  const std::string& contactids(int index) const;
  std::string* mutable_contactids(int index);
  void set_contactids(int index, const std::string& value);
  void set_contactids(int index, std::string&& value);
  void set_contactids(int index, const char* value);
  void set_contactids(int index, const char* value, std::size_t size);
  void set_contactids(int index, absl::string_view value);
  std::string* add_contactids();
  void add_contactids(const std::string& value);
  void add_contactids(std::string&& value);
  void add_contactids(const char* value);
  void add_contactids(const char* value, std::size_t size);
  void add_contactids(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& contactids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_contactids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_contactids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_contactids();

  public:
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.ContactList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> contactids_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class ChatMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChatMessage(::google::protobuf::internal::ConstantInitialized);

  inline ChatMessage(const ChatMessage& from)
      : ChatMessage(nullptr, from) {}
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ChatMessage& from) {
    ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ChatMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.ChatMessage";
  }
  protected:
  explicit ChatMessage(::google::protobuf::Arena* arena);
  ChatMessage(::google::protobuf::Arena* arena, const ChatMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSenderIdFieldNumber = 2,
    kContentFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string senderId = 2;
  void clear_senderid() ;
  const std::string& senderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_senderid(Arg_&& arg, Args_... args);
  std::string* mutable_senderid();
  PROTOBUF_NODISCARD std::string* release_senderid();
  void set_allocated_senderid(std::string* value);

  private:
  const std::string& _internal_senderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_senderid(
      const std::string& value);
  std::string* _internal_mutable_senderid();

  public:
  // bytes content = 4;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // .messenger.MessageType type = 3;
  void clear_type() ;
  ::messenger::MessageType type() const;
  void set_type(::messenger::MessageType value);

  private:
  ::messenger::MessageType _internal_type() const;
  void _internal_set_type(::messenger::MessageType value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.ChatMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      40, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr senderid_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class ChatFolder final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.ChatFolder) */ {
 public:
  inline ChatFolder() : ChatFolder(nullptr) {}
  ~ChatFolder() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChatFolder(::google::protobuf::internal::ConstantInitialized);

  inline ChatFolder(const ChatFolder& from)
      : ChatFolder(nullptr, from) {}
  ChatFolder(ChatFolder&& from) noexcept
    : ChatFolder() {
    *this = ::std::move(from);
  }

  inline ChatFolder& operator=(const ChatFolder& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatFolder& operator=(ChatFolder&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatFolder& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatFolder* internal_default_instance() {
    return reinterpret_cast<const ChatFolder*>(
               &_ChatFolder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ChatFolder& a, ChatFolder& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatFolder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatFolder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatFolder* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatFolder>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatFolder& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ChatFolder& from) {
    ChatFolder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ChatFolder* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.ChatFolder";
  }
  protected:
  explicit ChatFolder(::google::protobuf::Arena* arena);
  ChatFolder(::google::protobuf::Arena* arena, const ChatFolder& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupChatIdsFieldNumber = 4,
    kIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kNameFieldNumber = 3,
  };
  // repeated string groupChatIds = 4;
  int groupchatids_size() const;
  private:
  int _internal_groupchatids_size() const;

  public:
  void clear_groupchatids() ;
  const std::string& groupchatids(int index) const;
  std::string* mutable_groupchatids(int index);
  void set_groupchatids(int index, const std::string& value);
  void set_groupchatids(int index, std::string&& value);
  void set_groupchatids(int index, const char* value);
  void set_groupchatids(int index, const char* value, std::size_t size);
  void set_groupchatids(int index, absl::string_view value);
  std::string* add_groupchatids();
  void add_groupchatids(const std::string& value);
  void add_groupchatids(std::string&& value);
  void add_groupchatids(const char* value);
  void add_groupchatids(const char* value, std::size_t size);
  void add_groupchatids(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& groupchatids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_groupchatids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_groupchatids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_groupchatids();

  public:
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string userId = 2;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:messenger.ChatFolder)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> groupchatids_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class AddGroupMemberResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.AddGroupMemberResponse) */ {
 public:
  inline AddGroupMemberResponse() : AddGroupMemberResponse(nullptr) {}
  ~AddGroupMemberResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddGroupMemberResponse(::google::protobuf::internal::ConstantInitialized);

  inline AddGroupMemberResponse(const AddGroupMemberResponse& from)
      : AddGroupMemberResponse(nullptr, from) {}
  AddGroupMemberResponse(AddGroupMemberResponse&& from) noexcept
    : AddGroupMemberResponse() {
    *this = ::std::move(from);
  }

  inline AddGroupMemberResponse& operator=(const AddGroupMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroupMemberResponse& operator=(AddGroupMemberResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddGroupMemberResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddGroupMemberResponse* internal_default_instance() {
    return reinterpret_cast<const AddGroupMemberResponse*>(
               &_AddGroupMemberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(AddGroupMemberResponse& a, AddGroupMemberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroupMemberResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGroupMemberResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddGroupMemberResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddGroupMemberResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddGroupMemberResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AddGroupMemberResponse& from) {
    AddGroupMemberResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddGroupMemberResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.AddGroupMemberResponse";
  }
  protected:
  explicit AddGroupMemberResponse(::google::protobuf::Arena* arena);
  AddGroupMemberResponse(::google::protobuf::Arena* arena, const AddGroupMemberResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.AddGroupMemberResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class AddGroupMemberRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.AddGroupMemberRequest) */ {
 public:
  inline AddGroupMemberRequest() : AddGroupMemberRequest(nullptr) {}
  ~AddGroupMemberRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddGroupMemberRequest(::google::protobuf::internal::ConstantInitialized);

  inline AddGroupMemberRequest(const AddGroupMemberRequest& from)
      : AddGroupMemberRequest(nullptr, from) {}
  AddGroupMemberRequest(AddGroupMemberRequest&& from) noexcept
    : AddGroupMemberRequest() {
    *this = ::std::move(from);
  }

  inline AddGroupMemberRequest& operator=(const AddGroupMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddGroupMemberRequest& operator=(AddGroupMemberRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddGroupMemberRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddGroupMemberRequest* internal_default_instance() {
    return reinterpret_cast<const AddGroupMemberRequest*>(
               &_AddGroupMemberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(AddGroupMemberRequest& a, AddGroupMemberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddGroupMemberRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddGroupMemberRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddGroupMemberRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddGroupMemberRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddGroupMemberRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AddGroupMemberRequest& from) {
    AddGroupMemberRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddGroupMemberRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.AddGroupMemberRequest";
  }
  protected:
  explicit AddGroupMemberRequest(::google::protobuf::Arena* arena);
  AddGroupMemberRequest(::google::protobuf::Arena* arena, const AddGroupMemberRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kMemberIdFieldNumber = 2,
  };
  // string groupId = 1;
  void clear_groupid() ;
  const std::string& groupid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_groupid(Arg_&& arg, Args_... args);
  std::string* mutable_groupid();
  PROTOBUF_NODISCARD std::string* release_groupid();
  void set_allocated_groupid(std::string* value);

  private:
  const std::string& _internal_groupid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_groupid(
      const std::string& value);
  std::string* _internal_mutable_groupid();

  public:
  // string memberId = 2;
  void clear_memberid() ;
  const std::string& memberid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_memberid(Arg_&& arg, Args_... args);
  std::string* mutable_memberid();
  PROTOBUF_NODISCARD std::string* release_memberid();
  void set_allocated_memberid(std::string* value);

  private:
  const std::string& _internal_memberid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memberid(
      const std::string& value);
  std::string* _internal_mutable_memberid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.AddGroupMemberRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr groupid_;
    ::google::protobuf::internal::ArenaStringPtr memberid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class AddContactResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.AddContactResponse) */ {
 public:
  inline AddContactResponse() : AddContactResponse(nullptr) {}
  ~AddContactResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddContactResponse(::google::protobuf::internal::ConstantInitialized);

  inline AddContactResponse(const AddContactResponse& from)
      : AddContactResponse(nullptr, from) {}
  AddContactResponse(AddContactResponse&& from) noexcept
    : AddContactResponse() {
    *this = ::std::move(from);
  }

  inline AddContactResponse& operator=(const AddContactResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddContactResponse& operator=(AddContactResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddContactResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddContactResponse* internal_default_instance() {
    return reinterpret_cast<const AddContactResponse*>(
               &_AddContactResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AddContactResponse& a, AddContactResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddContactResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddContactResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddContactResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddContactResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddContactResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AddContactResponse& from) {
    AddContactResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddContactResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.AddContactResponse";
  }
  protected:
  explicit AddContactResponse(::google::protobuf::Arena* arena);
  AddContactResponse(::google::protobuf::Arena* arena, const AddContactResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.AddContactResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr error_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class AddContactRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.AddContactRequest) */ {
 public:
  inline AddContactRequest() : AddContactRequest(nullptr) {}
  ~AddContactRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddContactRequest(::google::protobuf::internal::ConstantInitialized);

  inline AddContactRequest(const AddContactRequest& from)
      : AddContactRequest(nullptr, from) {}
  AddContactRequest(AddContactRequest&& from) noexcept
    : AddContactRequest() {
    *this = ::std::move(from);
  }

  inline AddContactRequest& operator=(const AddContactRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddContactRequest& operator=(AddContactRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddContactRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddContactRequest* internal_default_instance() {
    return reinterpret_cast<const AddContactRequest*>(
               &_AddContactRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AddContactRequest& a, AddContactRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddContactRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddContactRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddContactRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddContactRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddContactRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AddContactRequest& from) {
    AddContactRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddContactRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.AddContactRequest";
  }
  protected:
  explicit AddContactRequest(::google::protobuf::Arena* arena);
  AddContactRequest(::google::protobuf::Arena* arena, const AddContactRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kContactIdFieldNumber = 2,
  };
  // string userId = 1;
  void clear_userid() ;
  const std::string& userid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* value);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // string contactId = 2;
  void clear_contactid() ;
  const std::string& contactid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contactid(Arg_&& arg, Args_... args);
  std::string* mutable_contactid();
  PROTOBUF_NODISCARD std::string* release_contactid();
  void set_allocated_contactid(std::string* value);

  private:
  const std::string& _internal_contactid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contactid(
      const std::string& value);
  std::string* _internal_mutable_contactid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.AddContactRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr userid_;
    ::google::protobuf::internal::ArenaStringPtr contactid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class AddChatToFolderResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.AddChatToFolderResponse) */ {
 public:
  inline AddChatToFolderResponse() : AddChatToFolderResponse(nullptr) {}
  ~AddChatToFolderResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddChatToFolderResponse(::google::protobuf::internal::ConstantInitialized);

  inline AddChatToFolderResponse(const AddChatToFolderResponse& from)
      : AddChatToFolderResponse(nullptr, from) {}
  AddChatToFolderResponse(AddChatToFolderResponse&& from) noexcept
    : AddChatToFolderResponse() {
    *this = ::std::move(from);
  }

  inline AddChatToFolderResponse& operator=(const AddChatToFolderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddChatToFolderResponse& operator=(AddChatToFolderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddChatToFolderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddChatToFolderResponse* internal_default_instance() {
    return reinterpret_cast<const AddChatToFolderResponse*>(
               &_AddChatToFolderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(AddChatToFolderResponse& a, AddChatToFolderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddChatToFolderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddChatToFolderResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddChatToFolderResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddChatToFolderResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddChatToFolderResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AddChatToFolderResponse& from) {
    AddChatToFolderResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddChatToFolderResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.AddChatToFolderResponse";
  }
  protected:
  explicit AddChatToFolderResponse(::google::protobuf::Arena* arena);
  AddChatToFolderResponse(::google::protobuf::Arena* arena, const AddChatToFolderResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:messenger.AddChatToFolderResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class AddChatToFolderRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.AddChatToFolderRequest) */ {
 public:
  inline AddChatToFolderRequest() : AddChatToFolderRequest(nullptr) {}
  ~AddChatToFolderRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddChatToFolderRequest(::google::protobuf::internal::ConstantInitialized);

  inline AddChatToFolderRequest(const AddChatToFolderRequest& from)
      : AddChatToFolderRequest(nullptr, from) {}
  AddChatToFolderRequest(AddChatToFolderRequest&& from) noexcept
    : AddChatToFolderRequest() {
    *this = ::std::move(from);
  }

  inline AddChatToFolderRequest& operator=(const AddChatToFolderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddChatToFolderRequest& operator=(AddChatToFolderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddChatToFolderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddChatToFolderRequest* internal_default_instance() {
    return reinterpret_cast<const AddChatToFolderRequest*>(
               &_AddChatToFolderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(AddChatToFolderRequest& a, AddChatToFolderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddChatToFolderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddChatToFolderRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddChatToFolderRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddChatToFolderRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AddChatToFolderRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AddChatToFolderRequest& from) {
    AddChatToFolderRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AddChatToFolderRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.AddChatToFolderRequest";
  }
  protected:
  explicit AddChatToFolderRequest(::google::protobuf::Arena* arena);
  AddChatToFolderRequest(::google::protobuf::Arena* arena, const AddChatToFolderRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFolderIdFieldNumber = 1,
    kChatIdFieldNumber = 2,
  };
  // string folderId = 1;
  void clear_folderid() ;
  const std::string& folderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_folderid(Arg_&& arg, Args_... args);
  std::string* mutable_folderid();
  PROTOBUF_NODISCARD std::string* release_folderid();
  void set_allocated_folderid(std::string* value);

  private:
  const std::string& _internal_folderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_folderid(
      const std::string& value);
  std::string* _internal_mutable_folderid();

  public:
  // string chatId = 2;
  void clear_chatid() ;
  const std::string& chatid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chatid(Arg_&& arg, Args_... args);
  std::string* mutable_chatid();
  PROTOBUF_NODISCARD std::string* release_chatid();
  void set_allocated_chatid(std::string* value);

  private:
  const std::string& _internal_chatid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatid(
      const std::string& value);
  std::string* _internal_mutable_chatid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.AddChatToFolderRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr folderid_;
    ::google::protobuf::internal::ArenaStringPtr chatid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class UpdateUserProfileRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.UpdateUserProfileRequest) */ {
 public:
  inline UpdateUserProfileRequest() : UpdateUserProfileRequest(nullptr) {}
  ~UpdateUserProfileRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateUserProfileRequest(::google::protobuf::internal::ConstantInitialized);

  inline UpdateUserProfileRequest(const UpdateUserProfileRequest& from)
      : UpdateUserProfileRequest(nullptr, from) {}
  UpdateUserProfileRequest(UpdateUserProfileRequest&& from) noexcept
    : UpdateUserProfileRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUserProfileRequest& operator=(const UpdateUserProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserProfileRequest& operator=(UpdateUserProfileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserProfileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserProfileRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUserProfileRequest*>(
               &_UpdateUserProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateUserProfileRequest& a, UpdateUserProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserProfileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserProfileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserProfileRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUserProfileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateUserProfileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateUserProfileRequest& from) {
    UpdateUserProfileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateUserProfileRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.UpdateUserProfileRequest";
  }
  protected:
  explicit UpdateUserProfileRequest(::google::protobuf::Arena* arena);
  UpdateUserProfileRequest(::google::protobuf::Arena* arena, const UpdateUserProfileRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileFieldNumber = 1,
  };
  // .messenger.UserProfile profile = 1;
  bool has_profile() const;
  void clear_profile() ;
  const ::messenger::UserProfile& profile() const;
  PROTOBUF_NODISCARD ::messenger::UserProfile* release_profile();
  ::messenger::UserProfile* mutable_profile();
  void set_allocated_profile(::messenger::UserProfile* value);
  void unsafe_arena_set_allocated_profile(::messenger::UserProfile* value);
  ::messenger::UserProfile* unsafe_arena_release_profile();

  private:
  const ::messenger::UserProfile& _internal_profile() const;
  ::messenger::UserProfile* _internal_mutable_profile();

  public:
  // @@protoc_insertion_point(class_scope:messenger.UpdateUserProfileRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::messenger::UserProfile* profile_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class UpdateNotificationSettingsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.UpdateNotificationSettingsRequest) */ {
 public:
  inline UpdateNotificationSettingsRequest() : UpdateNotificationSettingsRequest(nullptr) {}
  ~UpdateNotificationSettingsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateNotificationSettingsRequest(::google::protobuf::internal::ConstantInitialized);

  inline UpdateNotificationSettingsRequest(const UpdateNotificationSettingsRequest& from)
      : UpdateNotificationSettingsRequest(nullptr, from) {}
  UpdateNotificationSettingsRequest(UpdateNotificationSettingsRequest&& from) noexcept
    : UpdateNotificationSettingsRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNotificationSettingsRequest& operator=(const UpdateNotificationSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNotificationSettingsRequest& operator=(UpdateNotificationSettingsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNotificationSettingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNotificationSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNotificationSettingsRequest*>(
               &_UpdateNotificationSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(UpdateNotificationSettingsRequest& a, UpdateNotificationSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNotificationSettingsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNotificationSettingsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNotificationSettingsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNotificationSettingsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateNotificationSettingsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateNotificationSettingsRequest& from) {
    UpdateNotificationSettingsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateNotificationSettingsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.UpdateNotificationSettingsRequest";
  }
  protected:
  explicit UpdateNotificationSettingsRequest(::google::protobuf::Arena* arena);
  UpdateNotificationSettingsRequest(::google::protobuf::Arena* arena, const UpdateNotificationSettingsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingsFieldNumber = 1,
  };
  // .messenger.NotificationSettings settings = 1;
  bool has_settings() const;
  void clear_settings() ;
  const ::messenger::NotificationSettings& settings() const;
  PROTOBUF_NODISCARD ::messenger::NotificationSettings* release_settings();
  ::messenger::NotificationSettings* mutable_settings();
  void set_allocated_settings(::messenger::NotificationSettings* value);
  void unsafe_arena_set_allocated_settings(::messenger::NotificationSettings* value);
  ::messenger::NotificationSettings* unsafe_arena_release_settings();

  private:
  const ::messenger::NotificationSettings& _internal_settings() const;
  ::messenger::NotificationSettings* _internal_mutable_settings();

  public:
  // @@protoc_insertion_point(class_scope:messenger.UpdateNotificationSettingsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::messenger::NotificationSettings* settings_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class SearchMessagesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.SearchMessagesResponse) */ {
 public:
  inline SearchMessagesResponse() : SearchMessagesResponse(nullptr) {}
  ~SearchMessagesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SearchMessagesResponse(::google::protobuf::internal::ConstantInitialized);

  inline SearchMessagesResponse(const SearchMessagesResponse& from)
      : SearchMessagesResponse(nullptr, from) {}
  SearchMessagesResponse(SearchMessagesResponse&& from) noexcept
    : SearchMessagesResponse() {
    *this = ::std::move(from);
  }

  inline SearchMessagesResponse& operator=(const SearchMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchMessagesResponse& operator=(SearchMessagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchMessagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const SearchMessagesResponse*>(
               &_SearchMessagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(SearchMessagesResponse& a, SearchMessagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchMessagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchMessagesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchMessagesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchMessagesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SearchMessagesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SearchMessagesResponse& from) {
    SearchMessagesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SearchMessagesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.SearchMessagesResponse";
  }
  protected:
  explicit SearchMessagesResponse(::google::protobuf::Arena* arena);
  SearchMessagesResponse(::google::protobuf::Arena* arena, const SearchMessagesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .messenger.ChatMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::messenger::ChatMessage* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::messenger::ChatMessage >*
      mutable_messages();
  private:
  const ::google::protobuf::RepeatedPtrField<::messenger::ChatMessage>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::messenger::ChatMessage>* _internal_mutable_messages();
  public:
  const ::messenger::ChatMessage& messages(int index) const;
  ::messenger::ChatMessage* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::messenger::ChatMessage >&
      messages() const;
  // @@protoc_insertion_point(class_scope:messenger.SearchMessagesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::messenger::ChatMessage > messages_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class Role final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.Role) */ {
 public:
  inline Role() : Role(nullptr) {}
  ~Role() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Role(::google::protobuf::internal::ConstantInitialized);

  inline Role(const Role& from)
      : Role(nullptr, from) {}
  Role(Role&& from) noexcept
    : Role() {
    *this = ::std::move(from);
  }

  inline Role& operator=(const Role& from) {
    CopyFrom(from);
    return *this;
  }
  inline Role& operator=(Role&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Role& default_instance() {
    return *internal_default_instance();
  }
  static inline const Role* internal_default_instance() {
    return reinterpret_cast<const Role*>(
               &_Role_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(Role& a, Role& b) {
    a.Swap(&b);
  }
  inline void Swap(Role* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Role* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Role* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Role>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Role& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Role& from) {
    Role::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Role* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.Role";
  }
  protected:
  explicit Role(::google::protobuf::Arena* arena);
  Role(::google::protobuf::Arena* arena, const Role& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPermissionsFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .messenger.Permissions permissions = 2;
  bool has_permissions() const;
  void clear_permissions() ;
  const ::messenger::Permissions& permissions() const;
  PROTOBUF_NODISCARD ::messenger::Permissions* release_permissions();
  ::messenger::Permissions* mutable_permissions();
  void set_allocated_permissions(::messenger::Permissions* value);
  void unsafe_arena_set_allocated_permissions(::messenger::Permissions* value);
  ::messenger::Permissions* unsafe_arena_release_permissions();

  private:
  const ::messenger::Permissions& _internal_permissions() const;
  ::messenger::Permissions* _internal_mutable_permissions();

  public:
  // @@protoc_insertion_point(class_scope:messenger.Role)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      27, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::messenger::Permissions* permissions_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetToDoItemsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetToDoItemsResponse) */ {
 public:
  inline GetToDoItemsResponse() : GetToDoItemsResponse(nullptr) {}
  ~GetToDoItemsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetToDoItemsResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetToDoItemsResponse(const GetToDoItemsResponse& from)
      : GetToDoItemsResponse(nullptr, from) {}
  GetToDoItemsResponse(GetToDoItemsResponse&& from) noexcept
    : GetToDoItemsResponse() {
    *this = ::std::move(from);
  }

  inline GetToDoItemsResponse& operator=(const GetToDoItemsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetToDoItemsResponse& operator=(GetToDoItemsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetToDoItemsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetToDoItemsResponse* internal_default_instance() {
    return reinterpret_cast<const GetToDoItemsResponse*>(
               &_GetToDoItemsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(GetToDoItemsResponse& a, GetToDoItemsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetToDoItemsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetToDoItemsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetToDoItemsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetToDoItemsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetToDoItemsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetToDoItemsResponse& from) {
    GetToDoItemsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetToDoItemsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetToDoItemsResponse";
  }
  protected:
  explicit GetToDoItemsResponse(::google::protobuf::Arena* arena);
  GetToDoItemsResponse(::google::protobuf::Arena* arena, const GetToDoItemsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .messenger.ToDoItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::messenger::ToDoItem* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::messenger::ToDoItem >*
      mutable_items();
  private:
  const ::google::protobuf::RepeatedPtrField<::messenger::ToDoItem>& _internal_items() const;
  ::google::protobuf::RepeatedPtrField<::messenger::ToDoItem>* _internal_mutable_items();
  public:
  const ::messenger::ToDoItem& items(int index) const;
  ::messenger::ToDoItem* add_items();
  const ::google::protobuf::RepeatedPtrField< ::messenger::ToDoItem >&
      items() const;
  // @@protoc_insertion_point(class_scope:messenger.GetToDoItemsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::messenger::ToDoItem > items_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetMessagesConversionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetMessagesConversionResponse) */ {
 public:
  inline GetMessagesConversionResponse() : GetMessagesConversionResponse(nullptr) {}
  ~GetMessagesConversionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetMessagesConversionResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetMessagesConversionResponse(const GetMessagesConversionResponse& from)
      : GetMessagesConversionResponse(nullptr, from) {}
  GetMessagesConversionResponse(GetMessagesConversionResponse&& from) noexcept
    : GetMessagesConversionResponse() {
    *this = ::std::move(from);
  }

  inline GetMessagesConversionResponse& operator=(const GetMessagesConversionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessagesConversionResponse& operator=(GetMessagesConversionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMessagesConversionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMessagesConversionResponse* internal_default_instance() {
    return reinterpret_cast<const GetMessagesConversionResponse*>(
               &_GetMessagesConversionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetMessagesConversionResponse& a, GetMessagesConversionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessagesConversionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessagesConversionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMessagesConversionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMessagesConversionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetMessagesConversionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetMessagesConversionResponse& from) {
    GetMessagesConversionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetMessagesConversionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetMessagesConversionResponse";
  }
  protected:
  explicit GetMessagesConversionResponse(::google::protobuf::Arena* arena);
  GetMessagesConversionResponse(::google::protobuf::Arena* arena, const GetMessagesConversionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .messenger.ChatMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::messenger::ChatMessage* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::messenger::ChatMessage >*
      mutable_messages();
  private:
  const ::google::protobuf::RepeatedPtrField<::messenger::ChatMessage>& _internal_messages() const;
  ::google::protobuf::RepeatedPtrField<::messenger::ChatMessage>* _internal_mutable_messages();
  public:
  const ::messenger::ChatMessage& messages(int index) const;
  ::messenger::ChatMessage* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::messenger::ChatMessage >&
      messages() const;
  // @@protoc_insertion_point(class_scope:messenger.GetMessagesConversionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::messenger::ChatMessage > messages_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetFoldersResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetFoldersResponse) */ {
 public:
  inline GetFoldersResponse() : GetFoldersResponse(nullptr) {}
  ~GetFoldersResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetFoldersResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetFoldersResponse(const GetFoldersResponse& from)
      : GetFoldersResponse(nullptr, from) {}
  GetFoldersResponse(GetFoldersResponse&& from) noexcept
    : GetFoldersResponse() {
    *this = ::std::move(from);
  }

  inline GetFoldersResponse& operator=(const GetFoldersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFoldersResponse& operator=(GetFoldersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFoldersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFoldersResponse* internal_default_instance() {
    return reinterpret_cast<const GetFoldersResponse*>(
               &_GetFoldersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetFoldersResponse& a, GetFoldersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFoldersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFoldersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFoldersResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFoldersResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFoldersResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetFoldersResponse& from) {
    GetFoldersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetFoldersResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetFoldersResponse";
  }
  protected:
  explicit GetFoldersResponse(::google::protobuf::Arena* arena);
  GetFoldersResponse(::google::protobuf::Arena* arena, const GetFoldersResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFoldersFieldNumber = 1,
  };
  // repeated .messenger.ChatFolder folders = 1;
  int folders_size() const;
  private:
  int _internal_folders_size() const;

  public:
  void clear_folders() ;
  ::messenger::ChatFolder* mutable_folders(int index);
  ::google::protobuf::RepeatedPtrField< ::messenger::ChatFolder >*
      mutable_folders();
  private:
  const ::google::protobuf::RepeatedPtrField<::messenger::ChatFolder>& _internal_folders() const;
  ::google::protobuf::RepeatedPtrField<::messenger::ChatFolder>* _internal_mutable_folders();
  public:
  const ::messenger::ChatFolder& folders(int index) const;
  ::messenger::ChatFolder* add_folders();
  const ::google::protobuf::RepeatedPtrField< ::messenger::ChatFolder >&
      folders() const;
  // @@protoc_insertion_point(class_scope:messenger.GetFoldersResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::messenger::ChatFolder > folders_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class CreateChatFolderResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.CreateChatFolderResponse) */ {
 public:
  inline CreateChatFolderResponse() : CreateChatFolderResponse(nullptr) {}
  ~CreateChatFolderResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateChatFolderResponse(::google::protobuf::internal::ConstantInitialized);

  inline CreateChatFolderResponse(const CreateChatFolderResponse& from)
      : CreateChatFolderResponse(nullptr, from) {}
  CreateChatFolderResponse(CreateChatFolderResponse&& from) noexcept
    : CreateChatFolderResponse() {
    *this = ::std::move(from);
  }

  inline CreateChatFolderResponse& operator=(const CreateChatFolderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChatFolderResponse& operator=(CreateChatFolderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateChatFolderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateChatFolderResponse* internal_default_instance() {
    return reinterpret_cast<const CreateChatFolderResponse*>(
               &_CreateChatFolderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CreateChatFolderResponse& a, CreateChatFolderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChatFolderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChatFolderResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateChatFolderResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateChatFolderResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateChatFolderResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CreateChatFolderResponse& from) {
    CreateChatFolderResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreateChatFolderResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.CreateChatFolderResponse";
  }
  protected:
  explicit CreateChatFolderResponse(::google::protobuf::Arena* arena);
  CreateChatFolderResponse(::google::protobuf::Arena* arena, const CreateChatFolderResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFolderFieldNumber = 1,
  };
  // .messenger.ChatFolder folder = 1;
  bool has_folder() const;
  void clear_folder() ;
  const ::messenger::ChatFolder& folder() const;
  PROTOBUF_NODISCARD ::messenger::ChatFolder* release_folder();
  ::messenger::ChatFolder* mutable_folder();
  void set_allocated_folder(::messenger::ChatFolder* value);
  void unsafe_arena_set_allocated_folder(::messenger::ChatFolder* value);
  ::messenger::ChatFolder* unsafe_arena_release_folder();

  private:
  const ::messenger::ChatFolder& _internal_folder() const;
  ::messenger::ChatFolder* _internal_mutable_folder();

  public:
  // @@protoc_insertion_point(class_scope:messenger.CreateChatFolderResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::messenger::ChatFolder* folder_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GroupChat final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GroupChat) */ {
 public:
  inline GroupChat() : GroupChat(nullptr) {}
  ~GroupChat() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GroupChat(::google::protobuf::internal::ConstantInitialized);

  inline GroupChat(const GroupChat& from)
      : GroupChat(nullptr, from) {}
  GroupChat(GroupChat&& from) noexcept
    : GroupChat() {
    *this = ::std::move(from);
  }

  inline GroupChat& operator=(const GroupChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupChat& operator=(GroupChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupChat* internal_default_instance() {
    return reinterpret_cast<const GroupChat*>(
               &_GroupChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GroupChat& a, GroupChat& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupChat* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupChat* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupChat>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GroupChat& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GroupChat& from) {
    GroupChat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GroupChat* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GroupChat";
  }
  protected:
  explicit GroupChat(::google::protobuf::Arena* arena);
  GroupChat(::google::protobuf::Arena* arena, const GroupChat& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdsFieldNumber = 3,
    kRolesFieldNumber = 4,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kFolderIdFieldNumber = 5,
  };
  // repeated string memberIds = 3;
  int memberids_size() const;
  private:
  int _internal_memberids_size() const;

  public:
  void clear_memberids() ;
  const std::string& memberids(int index) const;
  std::string* mutable_memberids(int index);
  void set_memberids(int index, const std::string& value);
  void set_memberids(int index, std::string&& value);
  void set_memberids(int index, const char* value);
  void set_memberids(int index, const char* value, std::size_t size);
  void set_memberids(int index, absl::string_view value);
  std::string* add_memberids();
  void add_memberids(const std::string& value);
  void add_memberids(std::string&& value);
  void add_memberids(const char* value);
  void add_memberids(const char* value, std::size_t size);
  void add_memberids(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& memberids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_memberids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_memberids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_memberids();

  public:
  // repeated .messenger.Role roles = 4;
  int roles_size() const;
  private:
  int _internal_roles_size() const;

  public:
  void clear_roles() ;
  ::messenger::Role* mutable_roles(int index);
  ::google::protobuf::RepeatedPtrField< ::messenger::Role >*
      mutable_roles();
  private:
  const ::google::protobuf::RepeatedPtrField<::messenger::Role>& _internal_roles() const;
  ::google::protobuf::RepeatedPtrField<::messenger::Role>* _internal_mutable_roles();
  public:
  const ::messenger::Role& roles(int index) const;
  ::messenger::Role* add_roles();
  const ::google::protobuf::RepeatedPtrField< ::messenger::Role >&
      roles() const;
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string folderId = 5;
  void clear_folderid() ;
  const std::string& folderid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_folderid(Arg_&& arg, Args_... args);
  std::string* mutable_folderid();
  PROTOBUF_NODISCARD std::string* release_folderid();
  void set_allocated_folderid(std::string* value);

  private:
  const std::string& _internal_folderid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_folderid(
      const std::string& value);
  std::string* _internal_mutable_folderid();

  public:
  // @@protoc_insertion_point(class_scope:messenger.GroupChat)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> memberids_;
    ::google::protobuf::RepeatedPtrField< ::messenger::Role > roles_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr folderid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class SearchChatsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.SearchChatsResponse) */ {
 public:
  inline SearchChatsResponse() : SearchChatsResponse(nullptr) {}
  ~SearchChatsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SearchChatsResponse(::google::protobuf::internal::ConstantInitialized);

  inline SearchChatsResponse(const SearchChatsResponse& from)
      : SearchChatsResponse(nullptr, from) {}
  SearchChatsResponse(SearchChatsResponse&& from) noexcept
    : SearchChatsResponse() {
    *this = ::std::move(from);
  }

  inline SearchChatsResponse& operator=(const SearchChatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchChatsResponse& operator=(SearchChatsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchChatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchChatsResponse* internal_default_instance() {
    return reinterpret_cast<const SearchChatsResponse*>(
               &_SearchChatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(SearchChatsResponse& a, SearchChatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchChatsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchChatsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchChatsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchChatsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SearchChatsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SearchChatsResponse& from) {
    SearchChatsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SearchChatsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.SearchChatsResponse";
  }
  protected:
  explicit SearchChatsResponse(::google::protobuf::Arena* arena);
  SearchChatsResponse(::google::protobuf::Arena* arena, const SearchChatsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatsFieldNumber = 1,
  };
  // repeated .messenger.GroupChat chats = 1;
  int chats_size() const;
  private:
  int _internal_chats_size() const;

  public:
  void clear_chats() ;
  ::messenger::GroupChat* mutable_chats(int index);
  ::google::protobuf::RepeatedPtrField< ::messenger::GroupChat >*
      mutable_chats();
  private:
  const ::google::protobuf::RepeatedPtrField<::messenger::GroupChat>& _internal_chats() const;
  ::google::protobuf::RepeatedPtrField<::messenger::GroupChat>* _internal_mutable_chats();
  public:
  const ::messenger::GroupChat& chats(int index) const;
  ::messenger::GroupChat* add_chats();
  const ::google::protobuf::RepeatedPtrField< ::messenger::GroupChat >&
      chats() const;
  // @@protoc_insertion_point(class_scope:messenger.SearchChatsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::messenger::GroupChat > chats_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};// -------------------------------------------------------------------

class GetGroupChatsConversionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:messenger.GetGroupChatsConversionResponse) */ {
 public:
  inline GetGroupChatsConversionResponse() : GetGroupChatsConversionResponse(nullptr) {}
  ~GetGroupChatsConversionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetGroupChatsConversionResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetGroupChatsConversionResponse(const GetGroupChatsConversionResponse& from)
      : GetGroupChatsConversionResponse(nullptr, from) {}
  GetGroupChatsConversionResponse(GetGroupChatsConversionResponse&& from) noexcept
    : GetGroupChatsConversionResponse() {
    *this = ::std::move(from);
  }

  inline GetGroupChatsConversionResponse& operator=(const GetGroupChatsConversionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupChatsConversionResponse& operator=(GetGroupChatsConversionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupChatsConversionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupChatsConversionResponse* internal_default_instance() {
    return reinterpret_cast<const GetGroupChatsConversionResponse*>(
               &_GetGroupChatsConversionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetGroupChatsConversionResponse& a, GetGroupChatsConversionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupChatsConversionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupChatsConversionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupChatsConversionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupChatsConversionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetGroupChatsConversionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetGroupChatsConversionResponse& from) {
    GetGroupChatsConversionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetGroupChatsConversionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "messenger.GetGroupChatsConversionResponse";
  }
  protected:
  explicit GetGroupChatsConversionResponse(::google::protobuf::Arena* arena);
  GetGroupChatsConversionResponse(::google::protobuf::Arena* arena, const GetGroupChatsConversionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatsFieldNumber = 1,
  };
  // repeated .messenger.GroupChat chats = 1;
  int chats_size() const;
  private:
  int _internal_chats_size() const;

  public:
  void clear_chats() ;
  ::messenger::GroupChat* mutable_chats(int index);
  ::google::protobuf::RepeatedPtrField< ::messenger::GroupChat >*
      mutable_chats();
  private:
  const ::google::protobuf::RepeatedPtrField<::messenger::GroupChat>& _internal_chats() const;
  ::google::protobuf::RepeatedPtrField<::messenger::GroupChat>* _internal_mutable_chats();
  public:
  const ::messenger::GroupChat& chats(int index) const;
  ::messenger::GroupChat* add_chats();
  const ::google::protobuf::RepeatedPtrField< ::messenger::GroupChat >&
      chats() const;
  // @@protoc_insertion_point(class_scope:messenger.GetGroupChatsConversionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::messenger::GroupChat > chats_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messenger_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RegisterRequest

// string username = 1;
inline void RegisterRequest::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& RegisterRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.RegisterRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.RegisterRequest.username)
}
inline std::string* RegisterRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:messenger.RegisterRequest.username)
  return _s;
}
inline const std::string& RegisterRequest::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void RegisterRequest::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.RegisterRequest.username)
  return _impl_.username_.Release();
}
inline void RegisterRequest::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.RegisterRequest.username)
}

// string password = 2;
inline void RegisterRequest::clear_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& RegisterRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.RegisterRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.RegisterRequest.password)
}
inline std::string* RegisterRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:messenger.RegisterRequest.password)
  return _s;
}
inline const std::string& RegisterRequest::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void RegisterRequest::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* RegisterRequest::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.RegisterRequest.password)
  return _impl_.password_.Release();
}
inline void RegisterRequest::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.RegisterRequest.password)
}

// -------------------------------------------------------------------

// RegisterResponse

// bool success = 1;
inline void RegisterResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool RegisterResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.RegisterResponse.success)
  return _internal_success();
}
inline void RegisterResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.RegisterResponse.success)
}
inline bool RegisterResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void RegisterResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string error = 2;
inline void RegisterResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& RegisterResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.RegisterResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.RegisterResponse.error)
}
inline std::string* RegisterResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:messenger.RegisterResponse.error)
  return _s;
}
inline const std::string& RegisterResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void RegisterResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* RegisterResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* RegisterResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.RegisterResponse.error)
  return _impl_.error_.Release();
}
inline void RegisterResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.RegisterResponse.error)
}

// -------------------------------------------------------------------

// LoginRequest

// string username = 1;
inline void LoginRequest::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& LoginRequest::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.LoginRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.LoginRequest.username)
}
inline std::string* LoginRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:messenger.LoginRequest.username)
  return _s;
}
inline const std::string& LoginRequest::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void LoginRequest::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* LoginRequest::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* LoginRequest::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.LoginRequest.username)
  return _impl_.username_.Release();
}
inline void LoginRequest::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.LoginRequest.username)
}

// string password = 2;
inline void LoginRequest::clear_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& LoginRequest::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.LoginRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.LoginRequest.password)
}
inline std::string* LoginRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:messenger.LoginRequest.password)
  return _s;
}
inline const std::string& LoginRequest::_internal_password() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.password_.Get();
}
inline void LoginRequest::_internal_set_password(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.password_.Set(value, GetArena());
}
inline std::string* LoginRequest::_internal_mutable_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* LoginRequest::release_password() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.LoginRequest.password)
  return _impl_.password_.Release();
}
inline void LoginRequest::set_allocated_password(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.LoginRequest.password)
}

// -------------------------------------------------------------------

// LoginResponse

// bool success = 1;
inline void LoginResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool LoginResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.LoginResponse.success)
  return _internal_success();
}
inline void LoginResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.LoginResponse.success)
}
inline bool LoginResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void LoginResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string error = 2;
inline void LoginResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& LoginResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.LoginResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.LoginResponse.error)
}
inline std::string* LoginResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:messenger.LoginResponse.error)
  return _s;
}
inline const std::string& LoginResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void LoginResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* LoginResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* LoginResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.LoginResponse.error)
  return _impl_.error_.Release();
}
inline void LoginResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.LoginResponse.error)
}

// string token = 3;
inline void LoginResponse::clear_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& LoginResponse::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.LoginResponse.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.LoginResponse.token)
}
inline std::string* LoginResponse::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:messenger.LoginResponse.token)
  return _s;
}
inline const std::string& LoginResponse::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void LoginResponse::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArena());
}
inline std::string* LoginResponse::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* LoginResponse::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.LoginResponse.token)
  return _impl_.token_.Release();
}
inline void LoginResponse::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.LoginResponse.token)
}

// -------------------------------------------------------------------

// LogoutRequest

// string token = 1;
inline void LogoutRequest::clear_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& LogoutRequest::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.LogoutRequest.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogoutRequest::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.LogoutRequest.token)
}
inline std::string* LogoutRequest::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:messenger.LogoutRequest.token)
  return _s;
}
inline const std::string& LogoutRequest::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void LogoutRequest::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArena());
}
inline std::string* LogoutRequest::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* LogoutRequest::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.LogoutRequest.token)
  return _impl_.token_.Release();
}
inline void LogoutRequest::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.LogoutRequest.token)
}

// -------------------------------------------------------------------

// LogoutResponse

// bool success = 1;
inline void LogoutResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool LogoutResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.LogoutResponse.success)
  return _internal_success();
}
inline void LogoutResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.LogoutResponse.success)
}
inline bool LogoutResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void LogoutResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string error = 2;
inline void LogoutResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& LogoutResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.LogoutResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogoutResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.LogoutResponse.error)
}
inline std::string* LogoutResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:messenger.LogoutResponse.error)
  return _s;
}
inline const std::string& LogoutResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void LogoutResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* LogoutResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* LogoutResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.LogoutResponse.error)
  return _impl_.error_.Release();
}
inline void LogoutResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.LogoutResponse.error)
}

// -------------------------------------------------------------------

// UserProfile

// string userId = 1;
inline void UserProfile::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& UserProfile::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.UserProfile.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserProfile::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.UserProfile.userId)
}
inline std::string* UserProfile::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.UserProfile.userId)
  return _s;
}
inline const std::string& UserProfile::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void UserProfile::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* UserProfile::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* UserProfile::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.UserProfile.userId)
  return _impl_.userid_.Release();
}
inline void UserProfile::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.UserProfile.userId)
}

// string username = 2;
inline void UserProfile::clear_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UserProfile::username() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.UserProfile.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UserProfile::set_username(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.UserProfile.username)
}
inline std::string* UserProfile::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:messenger.UserProfile.username)
  return _s;
}
inline const std::string& UserProfile::_internal_username() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.username_.Get();
}
inline void UserProfile::_internal_set_username(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.username_.Set(value, GetArena());
}
inline std::string* UserProfile::_internal_mutable_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.username_.Mutable( GetArena());
}
inline std::string* UserProfile::release_username() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.UserProfile.username)
  return _impl_.username_.Release();
}
inline void UserProfile::set_allocated_username(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.username_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.UserProfile.username)
}

// .messenger.UserStatus status = 3;
inline void UserProfile::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::messenger::UserStatus UserProfile::status() const {
  // @@protoc_insertion_point(field_get:messenger.UserProfile.status)
  return _internal_status();
}
inline void UserProfile::set_status(::messenger::UserStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:messenger.UserProfile.status)
}
inline ::messenger::UserStatus UserProfile::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::messenger::UserStatus>(_impl_.status_);
}
inline void UserProfile::_internal_set_status(::messenger::UserStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// UpdateUserProfileRequest

// .messenger.UserProfile profile = 1;
inline bool UpdateUserProfileRequest::has_profile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.profile_ != nullptr);
  return value;
}
inline void UpdateUserProfileRequest::clear_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.profile_ != nullptr) _impl_.profile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::messenger::UserProfile& UpdateUserProfileRequest::_internal_profile() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::messenger::UserProfile* p = _impl_.profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::messenger::UserProfile&>(::messenger::_UserProfile_default_instance_);
}
inline const ::messenger::UserProfile& UpdateUserProfileRequest::profile() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.UpdateUserProfileRequest.profile)
  return _internal_profile();
}
inline void UpdateUserProfileRequest::unsafe_arena_set_allocated_profile(::messenger::UserProfile* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.profile_);
  }
  _impl_.profile_ = reinterpret_cast<::messenger::UserProfile*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messenger.UpdateUserProfileRequest.profile)
}
inline ::messenger::UserProfile* UpdateUserProfileRequest::release_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::messenger::UserProfile* released = _impl_.profile_;
  _impl_.profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::messenger::UserProfile* UpdateUserProfileRequest::unsafe_arena_release_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.UpdateUserProfileRequest.profile)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::messenger::UserProfile* temp = _impl_.profile_;
  _impl_.profile_ = nullptr;
  return temp;
}
inline ::messenger::UserProfile* UpdateUserProfileRequest::_internal_mutable_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::messenger::UserProfile>(GetArena());
    _impl_.profile_ = reinterpret_cast<::messenger::UserProfile*>(p);
  }
  return _impl_.profile_;
}
inline ::messenger::UserProfile* UpdateUserProfileRequest::mutable_profile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::messenger::UserProfile* _msg = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:messenger.UpdateUserProfileRequest.profile)
  return _msg;
}
inline void UpdateUserProfileRequest::set_allocated_profile(::messenger::UserProfile* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::messenger::UserProfile*>(_impl_.profile_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::messenger::UserProfile*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.profile_ = reinterpret_cast<::messenger::UserProfile*>(value);
  // @@protoc_insertion_point(field_set_allocated:messenger.UpdateUserProfileRequest.profile)
}

// -------------------------------------------------------------------

// UpdateUserProfileResponse

// bool success = 1;
inline void UpdateUserProfileResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool UpdateUserProfileResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.UpdateUserProfileResponse.success)
  return _internal_success();
}
inline void UpdateUserProfileResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.UpdateUserProfileResponse.success)
}
inline bool UpdateUserProfileResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void UpdateUserProfileResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string error = 2;
inline void UpdateUserProfileResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& UpdateUserProfileResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.UpdateUserProfileResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateUserProfileResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.UpdateUserProfileResponse.error)
}
inline std::string* UpdateUserProfileResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:messenger.UpdateUserProfileResponse.error)
  return _s;
}
inline const std::string& UpdateUserProfileResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void UpdateUserProfileResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* UpdateUserProfileResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* UpdateUserProfileResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.UpdateUserProfileResponse.error)
  return _impl_.error_.Release();
}
inline void UpdateUserProfileResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.UpdateUserProfileResponse.error)
}

// -------------------------------------------------------------------

// UpdateMessageStatusRequest

// string messageId = 1;
inline void UpdateMessageStatusRequest::clear_messageid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.messageid_.ClearToEmpty();
}
inline const std::string& UpdateMessageStatusRequest::messageid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.UpdateMessageStatusRequest.messageId)
  return _internal_messageid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateMessageStatusRequest::set_messageid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.messageid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.UpdateMessageStatusRequest.messageId)
}
inline std::string* UpdateMessageStatusRequest::mutable_messageid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_messageid();
  // @@protoc_insertion_point(field_mutable:messenger.UpdateMessageStatusRequest.messageId)
  return _s;
}
inline const std::string& UpdateMessageStatusRequest::_internal_messageid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.messageid_.Get();
}
inline void UpdateMessageStatusRequest::_internal_set_messageid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.messageid_.Set(value, GetArena());
}
inline std::string* UpdateMessageStatusRequest::_internal_mutable_messageid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.messageid_.Mutable( GetArena());
}
inline std::string* UpdateMessageStatusRequest::release_messageid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.UpdateMessageStatusRequest.messageId)
  return _impl_.messageid_.Release();
}
inline void UpdateMessageStatusRequest::set_allocated_messageid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.messageid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.messageid_.IsDefault()) {
          _impl_.messageid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.UpdateMessageStatusRequest.messageId)
}

// .messenger.MessageStatus status = 2;
inline void UpdateMessageStatusRequest::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::messenger::MessageStatus UpdateMessageStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:messenger.UpdateMessageStatusRequest.status)
  return _internal_status();
}
inline void UpdateMessageStatusRequest::set_status(::messenger::MessageStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:messenger.UpdateMessageStatusRequest.status)
}
inline ::messenger::MessageStatus UpdateMessageStatusRequest::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::messenger::MessageStatus>(_impl_.status_);
}
inline void UpdateMessageStatusRequest::_internal_set_status(::messenger::MessageStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// UpdateMessageStatusResponse

// bool success = 1;
inline void UpdateMessageStatusResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool UpdateMessageStatusResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.UpdateMessageStatusResponse.success)
  return _internal_success();
}
inline void UpdateMessageStatusResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.UpdateMessageStatusResponse.success)
}
inline bool UpdateMessageStatusResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void UpdateMessageStatusResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string error = 2;
inline void UpdateMessageStatusResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& UpdateMessageStatusResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.UpdateMessageStatusResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateMessageStatusResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.UpdateMessageStatusResponse.error)
}
inline std::string* UpdateMessageStatusResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:messenger.UpdateMessageStatusResponse.error)
  return _s;
}
inline const std::string& UpdateMessageStatusResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void UpdateMessageStatusResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* UpdateMessageStatusResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* UpdateMessageStatusResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.UpdateMessageStatusResponse.error)
  return _impl_.error_.Release();
}
inline void UpdateMessageStatusResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.UpdateMessageStatusResponse.error)
}

// -------------------------------------------------------------------

// AddContactRequest

// string userId = 1;
inline void AddContactRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& AddContactRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.AddContactRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddContactRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.AddContactRequest.userId)
}
inline std::string* AddContactRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.AddContactRequest.userId)
  return _s;
}
inline const std::string& AddContactRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void AddContactRequest::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* AddContactRequest::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* AddContactRequest::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.AddContactRequest.userId)
  return _impl_.userid_.Release();
}
inline void AddContactRequest::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.AddContactRequest.userId)
}

// string contactId = 2;
inline void AddContactRequest::clear_contactid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contactid_.ClearToEmpty();
}
inline const std::string& AddContactRequest::contactid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.AddContactRequest.contactId)
  return _internal_contactid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddContactRequest::set_contactid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contactid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.AddContactRequest.contactId)
}
inline std::string* AddContactRequest::mutable_contactid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contactid();
  // @@protoc_insertion_point(field_mutable:messenger.AddContactRequest.contactId)
  return _s;
}
inline const std::string& AddContactRequest::_internal_contactid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contactid_.Get();
}
inline void AddContactRequest::_internal_set_contactid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contactid_.Set(value, GetArena());
}
inline std::string* AddContactRequest::_internal_mutable_contactid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.contactid_.Mutable( GetArena());
}
inline std::string* AddContactRequest::release_contactid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.AddContactRequest.contactId)
  return _impl_.contactid_.Release();
}
inline void AddContactRequest::set_allocated_contactid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contactid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contactid_.IsDefault()) {
          _impl_.contactid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.AddContactRequest.contactId)
}

// -------------------------------------------------------------------

// AddContactResponse

// bool success = 1;
inline void AddContactResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool AddContactResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.AddContactResponse.success)
  return _internal_success();
}
inline void AddContactResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.AddContactResponse.success)
}
inline bool AddContactResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void AddContactResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string error = 2;
inline void AddContactResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& AddContactResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.AddContactResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddContactResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.AddContactResponse.error)
}
inline std::string* AddContactResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:messenger.AddContactResponse.error)
  return _s;
}
inline const std::string& AddContactResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void AddContactResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* AddContactResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* AddContactResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.AddContactResponse.error)
  return _impl_.error_.Release();
}
inline void AddContactResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.AddContactResponse.error)
}

// -------------------------------------------------------------------

// RemoveContactRequest

// string userId = 1;
inline void RemoveContactRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& RemoveContactRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.RemoveContactRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveContactRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.RemoveContactRequest.userId)
}
inline std::string* RemoveContactRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.RemoveContactRequest.userId)
  return _s;
}
inline const std::string& RemoveContactRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void RemoveContactRequest::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* RemoveContactRequest::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* RemoveContactRequest::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.RemoveContactRequest.userId)
  return _impl_.userid_.Release();
}
inline void RemoveContactRequest::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.RemoveContactRequest.userId)
}

// string contactId = 2;
inline void RemoveContactRequest::clear_contactid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contactid_.ClearToEmpty();
}
inline const std::string& RemoveContactRequest::contactid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.RemoveContactRequest.contactId)
  return _internal_contactid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveContactRequest::set_contactid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contactid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.RemoveContactRequest.contactId)
}
inline std::string* RemoveContactRequest::mutable_contactid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contactid();
  // @@protoc_insertion_point(field_mutable:messenger.RemoveContactRequest.contactId)
  return _s;
}
inline const std::string& RemoveContactRequest::_internal_contactid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contactid_.Get();
}
inline void RemoveContactRequest::_internal_set_contactid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.contactid_.Set(value, GetArena());
}
inline std::string* RemoveContactRequest::_internal_mutable_contactid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.contactid_.Mutable( GetArena());
}
inline std::string* RemoveContactRequest::release_contactid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.RemoveContactRequest.contactId)
  return _impl_.contactid_.Release();
}
inline void RemoveContactRequest::set_allocated_contactid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contactid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contactid_.IsDefault()) {
          _impl_.contactid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.RemoveContactRequest.contactId)
}

// -------------------------------------------------------------------

// RemoveContactResponse

// bool success = 1;
inline void RemoveContactResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool RemoveContactResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.RemoveContactResponse.success)
  return _internal_success();
}
inline void RemoveContactResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.RemoveContactResponse.success)
}
inline bool RemoveContactResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void RemoveContactResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string error = 2;
inline void RemoveContactResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& RemoveContactResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.RemoveContactResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveContactResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.RemoveContactResponse.error)
}
inline std::string* RemoveContactResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:messenger.RemoveContactResponse.error)
  return _s;
}
inline const std::string& RemoveContactResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void RemoveContactResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* RemoveContactResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* RemoveContactResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.RemoveContactResponse.error)
  return _impl_.error_.Release();
}
inline void RemoveContactResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.RemoveContactResponse.error)
}

// -------------------------------------------------------------------

// ContactList

// string userId = 1;
inline void ContactList::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& ContactList::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.ContactList.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ContactList::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.ContactList.userId)
}
inline std::string* ContactList::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.ContactList.userId)
  return _s;
}
inline const std::string& ContactList::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void ContactList::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* ContactList::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* ContactList::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.ContactList.userId)
  return _impl_.userid_.Release();
}
inline void ContactList::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.ContactList.userId)
}

// repeated string contactIds = 2;
inline int ContactList::_internal_contactids_size() const {
  return _internal_contactids().size();
}
inline int ContactList::contactids_size() const {
  return _internal_contactids_size();
}
inline void ContactList::clear_contactids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.contactids_.Clear();
}
inline std::string* ContactList::add_contactids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_contactids()->Add();
  // @@protoc_insertion_point(field_add_mutable:messenger.ContactList.contactIds)
  return _s;
}
inline const std::string& ContactList::contactids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.ContactList.contactIds)
  return _internal_contactids().Get(index);
}
inline std::string* ContactList::mutable_contactids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:messenger.ContactList.contactIds)
  return _internal_mutable_contactids()->Mutable(index);
}
inline void ContactList::set_contactids(int index, const std::string& value) {
  _internal_mutable_contactids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:messenger.ContactList.contactIds)
}
inline void ContactList::set_contactids(int index, std::string&& value) {
  _internal_mutable_contactids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:messenger.ContactList.contactIds)
}
inline void ContactList::set_contactids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_contactids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:messenger.ContactList.contactIds)
}
inline void ContactList::set_contactids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_contactids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:messenger.ContactList.contactIds)
}
inline void ContactList::set_contactids(int index, absl::string_view value) {
  _internal_mutable_contactids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:messenger.ContactList.contactIds)
}
inline void ContactList::add_contactids(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_contactids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:messenger.ContactList.contactIds)
}
inline void ContactList::add_contactids(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_contactids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:messenger.ContactList.contactIds)
}
inline void ContactList::add_contactids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_contactids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:messenger.ContactList.contactIds)
}
inline void ContactList::add_contactids(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_contactids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:messenger.ContactList.contactIds)
}
inline void ContactList::add_contactids(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_contactids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:messenger.ContactList.contactIds)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ContactList::contactids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:messenger.ContactList.contactIds)
  return _internal_contactids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ContactList::mutable_contactids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:messenger.ContactList.contactIds)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_contactids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ContactList::_internal_contactids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.contactids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ContactList::_internal_mutable_contactids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.contactids_;
}

// -------------------------------------------------------------------

// SentMessage

// string id = 1;
inline void SentMessage::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& SentMessage::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.SentMessage.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SentMessage::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.SentMessage.id)
}
inline std::string* SentMessage::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:messenger.SentMessage.id)
  return _s;
}
inline const std::string& SentMessage::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void SentMessage::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* SentMessage::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* SentMessage::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.SentMessage.id)
  return _impl_.id_.Release();
}
inline void SentMessage::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.SentMessage.id)
}

// .messenger.MessageType type = 2;
inline void SentMessage::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::messenger::MessageType SentMessage::type() const {
  // @@protoc_insertion_point(field_get:messenger.SentMessage.type)
  return _internal_type();
}
inline void SentMessage::set_type(::messenger::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:messenger.SentMessage.type)
}
inline ::messenger::MessageType SentMessage::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::messenger::MessageType>(_impl_.type_);
}
inline void SentMessage::_internal_set_type(::messenger::MessageType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string content = 3;
inline void SentMessage::clear_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& SentMessage::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.SentMessage.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SentMessage::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.SentMessage.content)
}
inline std::string* SentMessage::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:messenger.SentMessage.content)
  return _s;
}
inline const std::string& SentMessage::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void SentMessage::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.Set(value, GetArena());
}
inline std::string* SentMessage::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* SentMessage::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.SentMessage.content)
  return _impl_.content_.Release();
}
inline void SentMessage::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.SentMessage.content)
}

// -------------------------------------------------------------------

// GetMessagesOffsetRequest

// string chatId = 1;
inline void GetMessagesOffsetRequest::clear_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chatid_.ClearToEmpty();
}
inline const std::string& GetMessagesOffsetRequest::chatid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetMessagesOffsetRequest.chatId)
  return _internal_chatid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetMessagesOffsetRequest::set_chatid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chatid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GetMessagesOffsetRequest.chatId)
}
inline std::string* GetMessagesOffsetRequest::mutable_chatid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chatid();
  // @@protoc_insertion_point(field_mutable:messenger.GetMessagesOffsetRequest.chatId)
  return _s;
}
inline const std::string& GetMessagesOffsetRequest::_internal_chatid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chatid_.Get();
}
inline void GetMessagesOffsetRequest::_internal_set_chatid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chatid_.Set(value, GetArena());
}
inline std::string* GetMessagesOffsetRequest::_internal_mutable_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.chatid_.Mutable( GetArena());
}
inline std::string* GetMessagesOffsetRequest::release_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GetMessagesOffsetRequest.chatId)
  return _impl_.chatid_.Release();
}
inline void GetMessagesOffsetRequest::set_allocated_chatid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chatid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chatid_.IsDefault()) {
          _impl_.chatid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GetMessagesOffsetRequest.chatId)
}

// -------------------------------------------------------------------

// GetMessagesOffsetResponse

// int64 offset = 1;
inline void GetMessagesOffsetResponse::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t GetMessagesOffsetResponse::offset() const {
  // @@protoc_insertion_point(field_get:messenger.GetMessagesOffsetResponse.offset)
  return _internal_offset();
}
inline void GetMessagesOffsetResponse::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:messenger.GetMessagesOffsetResponse.offset)
}
inline ::int64_t GetMessagesOffsetResponse::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void GetMessagesOffsetResponse::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// GetMessagesConversionRequest

// string chatId = 1;
inline void GetMessagesConversionRequest::clear_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chatid_.ClearToEmpty();
}
inline const std::string& GetMessagesConversionRequest::chatid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetMessagesConversionRequest.chatId)
  return _internal_chatid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetMessagesConversionRequest::set_chatid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chatid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GetMessagesConversionRequest.chatId)
}
inline std::string* GetMessagesConversionRequest::mutable_chatid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chatid();
  // @@protoc_insertion_point(field_mutable:messenger.GetMessagesConversionRequest.chatId)
  return _s;
}
inline const std::string& GetMessagesConversionRequest::_internal_chatid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chatid_.Get();
}
inline void GetMessagesConversionRequest::_internal_set_chatid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chatid_.Set(value, GetArena());
}
inline std::string* GetMessagesConversionRequest::_internal_mutable_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.chatid_.Mutable( GetArena());
}
inline std::string* GetMessagesConversionRequest::release_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GetMessagesConversionRequest.chatId)
  return _impl_.chatid_.Release();
}
inline void GetMessagesConversionRequest::set_allocated_chatid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chatid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chatid_.IsDefault()) {
          _impl_.chatid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GetMessagesConversionRequest.chatId)
}

// int64 offset = 2;
inline void GetMessagesConversionRequest::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t GetMessagesConversionRequest::offset() const {
  // @@protoc_insertion_point(field_get:messenger.GetMessagesConversionRequest.offset)
  return _internal_offset();
}
inline void GetMessagesConversionRequest::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:messenger.GetMessagesConversionRequest.offset)
}
inline ::int64_t GetMessagesConversionRequest::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void GetMessagesConversionRequest::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// int32 count = 3;
inline void GetMessagesConversionRequest::clear_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = 0;
}
inline ::int32_t GetMessagesConversionRequest::count() const {
  // @@protoc_insertion_point(field_get:messenger.GetMessagesConversionRequest.count)
  return _internal_count();
}
inline void GetMessagesConversionRequest::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:messenger.GetMessagesConversionRequest.count)
}
inline ::int32_t GetMessagesConversionRequest::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void GetMessagesConversionRequest::_internal_set_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// GetMessagesConversionResponse

// repeated .messenger.ChatMessage messages = 1;
inline int GetMessagesConversionResponse::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int GetMessagesConversionResponse::messages_size() const {
  return _internal_messages_size();
}
inline void GetMessagesConversionResponse::clear_messages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.messages_.Clear();
}
inline ::messenger::ChatMessage* GetMessagesConversionResponse::mutable_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:messenger.GetMessagesConversionResponse.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::messenger::ChatMessage>* GetMessagesConversionResponse::mutable_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:messenger.GetMessagesConversionResponse.messages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_messages();
}
inline const ::messenger::ChatMessage& GetMessagesConversionResponse::messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetMessagesConversionResponse.messages)
  return _internal_messages().Get(index);
}
inline ::messenger::ChatMessage* GetMessagesConversionResponse::add_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::messenger::ChatMessage* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:messenger.GetMessagesConversionResponse.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::ChatMessage>& GetMessagesConversionResponse::messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:messenger.GetMessagesConversionResponse.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::ChatMessage>&
GetMessagesConversionResponse::_internal_messages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::messenger::ChatMessage>*
GetMessagesConversionResponse::_internal_mutable_messages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.messages_;
}

// -------------------------------------------------------------------

// ChatMessage

// string id = 1;
inline void ChatMessage::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ChatMessage::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.ChatMessage.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessage::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.ChatMessage.id)
}
inline std::string* ChatMessage::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:messenger.ChatMessage.id)
  return _s;
}
inline const std::string& ChatMessage::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void ChatMessage::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* ChatMessage::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* ChatMessage::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.ChatMessage.id)
  return _impl_.id_.Release();
}
inline void ChatMessage::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.ChatMessage.id)
}

// string senderId = 2;
inline void ChatMessage::clear_senderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.senderid_.ClearToEmpty();
}
inline const std::string& ChatMessage::senderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.ChatMessage.senderId)
  return _internal_senderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessage::set_senderid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.senderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.ChatMessage.senderId)
}
inline std::string* ChatMessage::mutable_senderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_senderid();
  // @@protoc_insertion_point(field_mutable:messenger.ChatMessage.senderId)
  return _s;
}
inline const std::string& ChatMessage::_internal_senderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.senderid_.Get();
}
inline void ChatMessage::_internal_set_senderid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.senderid_.Set(value, GetArena());
}
inline std::string* ChatMessage::_internal_mutable_senderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.senderid_.Mutable( GetArena());
}
inline std::string* ChatMessage::release_senderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.ChatMessage.senderId)
  return _impl_.senderid_.Release();
}
inline void ChatMessage::set_allocated_senderid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.senderid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.senderid_.IsDefault()) {
          _impl_.senderid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.ChatMessage.senderId)
}

// .messenger.MessageType type = 3;
inline void ChatMessage::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::messenger::MessageType ChatMessage::type() const {
  // @@protoc_insertion_point(field_get:messenger.ChatMessage.type)
  return _internal_type();
}
inline void ChatMessage::set_type(::messenger::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:messenger.ChatMessage.type)
}
inline ::messenger::MessageType ChatMessage::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::messenger::MessageType>(_impl_.type_);
}
inline void ChatMessage::_internal_set_type(::messenger::MessageType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// bytes content = 4;
inline void ChatMessage::clear_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& ChatMessage::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.ChatMessage.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessage::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.ChatMessage.content)
}
inline std::string* ChatMessage::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:messenger.ChatMessage.content)
  return _s;
}
inline const std::string& ChatMessage::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void ChatMessage::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.content_.Set(value, GetArena());
}
inline std::string* ChatMessage::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* ChatMessage::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.ChatMessage.content)
  return _impl_.content_.Release();
}
inline void ChatMessage::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.ChatMessage.content)
}

// -------------------------------------------------------------------

// DeleteMessageRequest

// string messageId = 1;
inline void DeleteMessageRequest::clear_messageid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.messageid_.ClearToEmpty();
}
inline const std::string& DeleteMessageRequest::messageid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.DeleteMessageRequest.messageId)
  return _internal_messageid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteMessageRequest::set_messageid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.messageid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.DeleteMessageRequest.messageId)
}
inline std::string* DeleteMessageRequest::mutable_messageid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_messageid();
  // @@protoc_insertion_point(field_mutable:messenger.DeleteMessageRequest.messageId)
  return _s;
}
inline const std::string& DeleteMessageRequest::_internal_messageid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.messageid_.Get();
}
inline void DeleteMessageRequest::_internal_set_messageid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.messageid_.Set(value, GetArena());
}
inline std::string* DeleteMessageRequest::_internal_mutable_messageid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.messageid_.Mutable( GetArena());
}
inline std::string* DeleteMessageRequest::release_messageid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.DeleteMessageRequest.messageId)
  return _impl_.messageid_.Release();
}
inline void DeleteMessageRequest::set_allocated_messageid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.messageid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.messageid_.IsDefault()) {
          _impl_.messageid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.DeleteMessageRequest.messageId)
}

// -------------------------------------------------------------------

// DeleteMessageResponse

// bool success = 1;
inline void DeleteMessageResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool DeleteMessageResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.DeleteMessageResponse.success)
  return _internal_success();
}
inline void DeleteMessageResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.DeleteMessageResponse.success)
}
inline bool DeleteMessageResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void DeleteMessageResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string error = 2;
inline void DeleteMessageResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& DeleteMessageResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.DeleteMessageResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteMessageResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.DeleteMessageResponse.error)
}
inline std::string* DeleteMessageResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:messenger.DeleteMessageResponse.error)
  return _s;
}
inline const std::string& DeleteMessageResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void DeleteMessageResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* DeleteMessageResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* DeleteMessageResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.DeleteMessageResponse.error)
  return _impl_.error_.Release();
}
inline void DeleteMessageResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.DeleteMessageResponse.error)
}

// -------------------------------------------------------------------

// EditMessageRequest

// string messageId = 1;
inline void EditMessageRequest::clear_messageid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.messageid_.ClearToEmpty();
}
inline const std::string& EditMessageRequest::messageid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.EditMessageRequest.messageId)
  return _internal_messageid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditMessageRequest::set_messageid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.messageid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.EditMessageRequest.messageId)
}
inline std::string* EditMessageRequest::mutable_messageid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_messageid();
  // @@protoc_insertion_point(field_mutable:messenger.EditMessageRequest.messageId)
  return _s;
}
inline const std::string& EditMessageRequest::_internal_messageid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.messageid_.Get();
}
inline void EditMessageRequest::_internal_set_messageid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.messageid_.Set(value, GetArena());
}
inline std::string* EditMessageRequest::_internal_mutable_messageid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.messageid_.Mutable( GetArena());
}
inline std::string* EditMessageRequest::release_messageid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.EditMessageRequest.messageId)
  return _impl_.messageid_.Release();
}
inline void EditMessageRequest::set_allocated_messageid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.messageid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.messageid_.IsDefault()) {
          _impl_.messageid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.EditMessageRequest.messageId)
}

// bytes newContent = 2;
inline void EditMessageRequest::clear_newcontent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.newcontent_.ClearToEmpty();
}
inline const std::string& EditMessageRequest::newcontent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.EditMessageRequest.newContent)
  return _internal_newcontent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditMessageRequest::set_newcontent(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.newcontent_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.EditMessageRequest.newContent)
}
inline std::string* EditMessageRequest::mutable_newcontent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_newcontent();
  // @@protoc_insertion_point(field_mutable:messenger.EditMessageRequest.newContent)
  return _s;
}
inline const std::string& EditMessageRequest::_internal_newcontent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.newcontent_.Get();
}
inline void EditMessageRequest::_internal_set_newcontent(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.newcontent_.Set(value, GetArena());
}
inline std::string* EditMessageRequest::_internal_mutable_newcontent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.newcontent_.Mutable( GetArena());
}
inline std::string* EditMessageRequest::release_newcontent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.EditMessageRequest.newContent)
  return _impl_.newcontent_.Release();
}
inline void EditMessageRequest::set_allocated_newcontent(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.newcontent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.newcontent_.IsDefault()) {
          _impl_.newcontent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.EditMessageRequest.newContent)
}

// -------------------------------------------------------------------

// EditMessageResponse

// bool success = 1;
inline void EditMessageResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool EditMessageResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.EditMessageResponse.success)
  return _internal_success();
}
inline void EditMessageResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.EditMessageResponse.success)
}
inline bool EditMessageResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void EditMessageResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string error = 2;
inline void EditMessageResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& EditMessageResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.EditMessageResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditMessageResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.EditMessageResponse.error)
}
inline std::string* EditMessageResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:messenger.EditMessageResponse.error)
  return _s;
}
inline const std::string& EditMessageResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void EditMessageResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* EditMessageResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* EditMessageResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.EditMessageResponse.error)
  return _impl_.error_.Release();
}
inline void EditMessageResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.EditMessageResponse.error)
}

// -------------------------------------------------------------------

// GroupChat

// string id = 1;
inline void GroupChat::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& GroupChat::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GroupChat.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GroupChat::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GroupChat.id)
}
inline std::string* GroupChat::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:messenger.GroupChat.id)
  return _s;
}
inline const std::string& GroupChat::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void GroupChat::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* GroupChat::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* GroupChat::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GroupChat.id)
  return _impl_.id_.Release();
}
inline void GroupChat::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GroupChat.id)
}

// string name = 2;
inline void GroupChat::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GroupChat::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GroupChat.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GroupChat::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GroupChat.name)
}
inline std::string* GroupChat::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:messenger.GroupChat.name)
  return _s;
}
inline const std::string& GroupChat::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GroupChat::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GroupChat::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GroupChat::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GroupChat.name)
  return _impl_.name_.Release();
}
inline void GroupChat::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GroupChat.name)
}

// repeated string memberIds = 3;
inline int GroupChat::_internal_memberids_size() const {
  return _internal_memberids().size();
}
inline int GroupChat::memberids_size() const {
  return _internal_memberids_size();
}
inline void GroupChat::clear_memberids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.memberids_.Clear();
}
inline std::string* GroupChat::add_memberids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_memberids()->Add();
  // @@protoc_insertion_point(field_add_mutable:messenger.GroupChat.memberIds)
  return _s;
}
inline const std::string& GroupChat::memberids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GroupChat.memberIds)
  return _internal_memberids().Get(index);
}
inline std::string* GroupChat::mutable_memberids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:messenger.GroupChat.memberIds)
  return _internal_mutable_memberids()->Mutable(index);
}
inline void GroupChat::set_memberids(int index, const std::string& value) {
  _internal_mutable_memberids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:messenger.GroupChat.memberIds)
}
inline void GroupChat::set_memberids(int index, std::string&& value) {
  _internal_mutable_memberids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:messenger.GroupChat.memberIds)
}
inline void GroupChat::set_memberids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_memberids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:messenger.GroupChat.memberIds)
}
inline void GroupChat::set_memberids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_memberids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:messenger.GroupChat.memberIds)
}
inline void GroupChat::set_memberids(int index, absl::string_view value) {
  _internal_mutable_memberids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:messenger.GroupChat.memberIds)
}
inline void GroupChat::add_memberids(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_memberids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:messenger.GroupChat.memberIds)
}
inline void GroupChat::add_memberids(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_memberids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:messenger.GroupChat.memberIds)
}
inline void GroupChat::add_memberids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_memberids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:messenger.GroupChat.memberIds)
}
inline void GroupChat::add_memberids(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_memberids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:messenger.GroupChat.memberIds)
}
inline void GroupChat::add_memberids(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_memberids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:messenger.GroupChat.memberIds)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GroupChat::memberids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:messenger.GroupChat.memberIds)
  return _internal_memberids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GroupChat::mutable_memberids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:messenger.GroupChat.memberIds)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_memberids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GroupChat::_internal_memberids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.memberids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GroupChat::_internal_mutable_memberids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.memberids_;
}

// repeated .messenger.Role roles = 4;
inline int GroupChat::_internal_roles_size() const {
  return _internal_roles().size();
}
inline int GroupChat::roles_size() const {
  return _internal_roles_size();
}
inline void GroupChat::clear_roles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roles_.Clear();
}
inline ::messenger::Role* GroupChat::mutable_roles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:messenger.GroupChat.roles)
  return _internal_mutable_roles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::messenger::Role>* GroupChat::mutable_roles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:messenger.GroupChat.roles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_roles();
}
inline const ::messenger::Role& GroupChat::roles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GroupChat.roles)
  return _internal_roles().Get(index);
}
inline ::messenger::Role* GroupChat::add_roles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::messenger::Role* _add = _internal_mutable_roles()->Add();
  // @@protoc_insertion_point(field_add:messenger.GroupChat.roles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::Role>& GroupChat::roles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:messenger.GroupChat.roles)
  return _internal_roles();
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::Role>&
GroupChat::_internal_roles() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roles_;
}
inline ::google::protobuf::RepeatedPtrField<::messenger::Role>*
GroupChat::_internal_mutable_roles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.roles_;
}

// string folderId = 5;
inline void GroupChat::clear_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.folderid_.ClearToEmpty();
}
inline const std::string& GroupChat::folderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GroupChat.folderId)
  return _internal_folderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GroupChat::set_folderid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.folderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GroupChat.folderId)
}
inline std::string* GroupChat::mutable_folderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_folderid();
  // @@protoc_insertion_point(field_mutable:messenger.GroupChat.folderId)
  return _s;
}
inline const std::string& GroupChat::_internal_folderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.folderid_.Get();
}
inline void GroupChat::_internal_set_folderid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.folderid_.Set(value, GetArena());
}
inline std::string* GroupChat::_internal_mutable_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.folderid_.Mutable( GetArena());
}
inline std::string* GroupChat::release_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GroupChat.folderId)
  return _impl_.folderid_.Release();
}
inline void GroupChat::set_allocated_folderid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.folderid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.folderid_.IsDefault()) {
          _impl_.folderid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GroupChat.folderId)
}

// -------------------------------------------------------------------

// GetNewMessagesRequest

// string chatId = 1;
inline void GetNewMessagesRequest::clear_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chatid_.ClearToEmpty();
}
inline const std::string& GetNewMessagesRequest::chatid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetNewMessagesRequest.chatId)
  return _internal_chatid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetNewMessagesRequest::set_chatid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chatid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GetNewMessagesRequest.chatId)
}
inline std::string* GetNewMessagesRequest::mutable_chatid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chatid();
  // @@protoc_insertion_point(field_mutable:messenger.GetNewMessagesRequest.chatId)
  return _s;
}
inline const std::string& GetNewMessagesRequest::_internal_chatid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chatid_.Get();
}
inline void GetNewMessagesRequest::_internal_set_chatid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chatid_.Set(value, GetArena());
}
inline std::string* GetNewMessagesRequest::_internal_mutable_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.chatid_.Mutable( GetArena());
}
inline std::string* GetNewMessagesRequest::release_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GetNewMessagesRequest.chatId)
  return _impl_.chatid_.Release();
}
inline void GetNewMessagesRequest::set_allocated_chatid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chatid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chatid_.IsDefault()) {
          _impl_.chatid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GetNewMessagesRequest.chatId)
}

// int64 offset = 2;
inline void GetNewMessagesRequest::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t GetNewMessagesRequest::offset() const {
  // @@protoc_insertion_point(field_get:messenger.GetNewMessagesRequest.offset)
  return _internal_offset();
}
inline void GetNewMessagesRequest::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:messenger.GetNewMessagesRequest.offset)
}
inline ::int64_t GetNewMessagesRequest::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void GetNewMessagesRequest::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// GetGroupChatsOffsetRequest

// string userId = 1;
inline void GetGroupChatsOffsetRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& GetGroupChatsOffsetRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetGroupChatsOffsetRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetGroupChatsOffsetRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GetGroupChatsOffsetRequest.userId)
}
inline std::string* GetGroupChatsOffsetRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.GetGroupChatsOffsetRequest.userId)
  return _s;
}
inline const std::string& GetGroupChatsOffsetRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void GetGroupChatsOffsetRequest::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* GetGroupChatsOffsetRequest::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* GetGroupChatsOffsetRequest::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GetGroupChatsOffsetRequest.userId)
  return _impl_.userid_.Release();
}
inline void GetGroupChatsOffsetRequest::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GetGroupChatsOffsetRequest.userId)
}

// -------------------------------------------------------------------

// GetGroupChatsOffsetResponse

// int64 offset = 1;
inline void GetGroupChatsOffsetResponse::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t GetGroupChatsOffsetResponse::offset() const {
  // @@protoc_insertion_point(field_get:messenger.GetGroupChatsOffsetResponse.offset)
  return _internal_offset();
}
inline void GetGroupChatsOffsetResponse::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:messenger.GetGroupChatsOffsetResponse.offset)
}
inline ::int64_t GetGroupChatsOffsetResponse::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void GetGroupChatsOffsetResponse::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// GetGroupChatsConversionRequest

// string userId = 1;
inline void GetGroupChatsConversionRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& GetGroupChatsConversionRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetGroupChatsConversionRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetGroupChatsConversionRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GetGroupChatsConversionRequest.userId)
}
inline std::string* GetGroupChatsConversionRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.GetGroupChatsConversionRequest.userId)
  return _s;
}
inline const std::string& GetGroupChatsConversionRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void GetGroupChatsConversionRequest::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* GetGroupChatsConversionRequest::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* GetGroupChatsConversionRequest::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GetGroupChatsConversionRequest.userId)
  return _impl_.userid_.Release();
}
inline void GetGroupChatsConversionRequest::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GetGroupChatsConversionRequest.userId)
}

// int64 offset = 2;
inline void GetGroupChatsConversionRequest::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t GetGroupChatsConversionRequest::offset() const {
  // @@protoc_insertion_point(field_get:messenger.GetGroupChatsConversionRequest.offset)
  return _internal_offset();
}
inline void GetGroupChatsConversionRequest::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:messenger.GetGroupChatsConversionRequest.offset)
}
inline ::int64_t GetGroupChatsConversionRequest::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void GetGroupChatsConversionRequest::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// int32 count = 3;
inline void GetGroupChatsConversionRequest::clear_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = 0;
}
inline ::int32_t GetGroupChatsConversionRequest::count() const {
  // @@protoc_insertion_point(field_get:messenger.GetGroupChatsConversionRequest.count)
  return _internal_count();
}
inline void GetGroupChatsConversionRequest::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:messenger.GetGroupChatsConversionRequest.count)
}
inline ::int32_t GetGroupChatsConversionRequest::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void GetGroupChatsConversionRequest::_internal_set_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// GetGroupChatsConversionResponse

// repeated .messenger.GroupChat chats = 1;
inline int GetGroupChatsConversionResponse::_internal_chats_size() const {
  return _internal_chats().size();
}
inline int GetGroupChatsConversionResponse::chats_size() const {
  return _internal_chats_size();
}
inline void GetGroupChatsConversionResponse::clear_chats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chats_.Clear();
}
inline ::messenger::GroupChat* GetGroupChatsConversionResponse::mutable_chats(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:messenger.GetGroupChatsConversionResponse.chats)
  return _internal_mutable_chats()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::messenger::GroupChat>* GetGroupChatsConversionResponse::mutable_chats()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:messenger.GetGroupChatsConversionResponse.chats)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_chats();
}
inline const ::messenger::GroupChat& GetGroupChatsConversionResponse::chats(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetGroupChatsConversionResponse.chats)
  return _internal_chats().Get(index);
}
inline ::messenger::GroupChat* GetGroupChatsConversionResponse::add_chats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::messenger::GroupChat* _add = _internal_mutable_chats()->Add();
  // @@protoc_insertion_point(field_add:messenger.GetGroupChatsConversionResponse.chats)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::GroupChat>& GetGroupChatsConversionResponse::chats() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:messenger.GetGroupChatsConversionResponse.chats)
  return _internal_chats();
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::GroupChat>&
GetGroupChatsConversionResponse::_internal_chats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chats_;
}
inline ::google::protobuf::RepeatedPtrField<::messenger::GroupChat>*
GetGroupChatsConversionResponse::_internal_mutable_chats() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.chats_;
}

// -------------------------------------------------------------------

// GetNewGroupChatsRequest

// string userId = 1;
inline void GetNewGroupChatsRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& GetNewGroupChatsRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetNewGroupChatsRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetNewGroupChatsRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GetNewGroupChatsRequest.userId)
}
inline std::string* GetNewGroupChatsRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.GetNewGroupChatsRequest.userId)
  return _s;
}
inline const std::string& GetNewGroupChatsRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void GetNewGroupChatsRequest::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* GetNewGroupChatsRequest::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* GetNewGroupChatsRequest::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GetNewGroupChatsRequest.userId)
  return _impl_.userid_.Release();
}
inline void GetNewGroupChatsRequest::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GetNewGroupChatsRequest.userId)
}

// int64 offset = 2;
inline void GetNewGroupChatsRequest::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t GetNewGroupChatsRequest::offset() const {
  // @@protoc_insertion_point(field_get:messenger.GetNewGroupChatsRequest.offset)
  return _internal_offset();
}
inline void GetNewGroupChatsRequest::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:messenger.GetNewGroupChatsRequest.offset)
}
inline ::int64_t GetNewGroupChatsRequest::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void GetNewGroupChatsRequest::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// AddGroupMemberRequest

// string groupId = 1;
inline void AddGroupMemberRequest::clear_groupid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.groupid_.ClearToEmpty();
}
inline const std::string& AddGroupMemberRequest::groupid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.AddGroupMemberRequest.groupId)
  return _internal_groupid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddGroupMemberRequest::set_groupid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.groupid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.AddGroupMemberRequest.groupId)
}
inline std::string* AddGroupMemberRequest::mutable_groupid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_groupid();
  // @@protoc_insertion_point(field_mutable:messenger.AddGroupMemberRequest.groupId)
  return _s;
}
inline const std::string& AddGroupMemberRequest::_internal_groupid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.groupid_.Get();
}
inline void AddGroupMemberRequest::_internal_set_groupid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.groupid_.Set(value, GetArena());
}
inline std::string* AddGroupMemberRequest::_internal_mutable_groupid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.groupid_.Mutable( GetArena());
}
inline std::string* AddGroupMemberRequest::release_groupid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.AddGroupMemberRequest.groupId)
  return _impl_.groupid_.Release();
}
inline void AddGroupMemberRequest::set_allocated_groupid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.groupid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.groupid_.IsDefault()) {
          _impl_.groupid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.AddGroupMemberRequest.groupId)
}

// string memberId = 2;
inline void AddGroupMemberRequest::clear_memberid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.memberid_.ClearToEmpty();
}
inline const std::string& AddGroupMemberRequest::memberid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.AddGroupMemberRequest.memberId)
  return _internal_memberid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddGroupMemberRequest::set_memberid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.memberid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.AddGroupMemberRequest.memberId)
}
inline std::string* AddGroupMemberRequest::mutable_memberid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_memberid();
  // @@protoc_insertion_point(field_mutable:messenger.AddGroupMemberRequest.memberId)
  return _s;
}
inline const std::string& AddGroupMemberRequest::_internal_memberid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.memberid_.Get();
}
inline void AddGroupMemberRequest::_internal_set_memberid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.memberid_.Set(value, GetArena());
}
inline std::string* AddGroupMemberRequest::_internal_mutable_memberid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.memberid_.Mutable( GetArena());
}
inline std::string* AddGroupMemberRequest::release_memberid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.AddGroupMemberRequest.memberId)
  return _impl_.memberid_.Release();
}
inline void AddGroupMemberRequest::set_allocated_memberid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.memberid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.memberid_.IsDefault()) {
          _impl_.memberid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.AddGroupMemberRequest.memberId)
}

// -------------------------------------------------------------------

// AddGroupMemberResponse

// bool success = 1;
inline void AddGroupMemberResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool AddGroupMemberResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.AddGroupMemberResponse.success)
  return _internal_success();
}
inline void AddGroupMemberResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.AddGroupMemberResponse.success)
}
inline bool AddGroupMemberResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void AddGroupMemberResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string error = 2;
inline void AddGroupMemberResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& AddGroupMemberResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.AddGroupMemberResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddGroupMemberResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.AddGroupMemberResponse.error)
}
inline std::string* AddGroupMemberResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:messenger.AddGroupMemberResponse.error)
  return _s;
}
inline const std::string& AddGroupMemberResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void AddGroupMemberResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* AddGroupMemberResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* AddGroupMemberResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.AddGroupMemberResponse.error)
  return _impl_.error_.Release();
}
inline void AddGroupMemberResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.AddGroupMemberResponse.error)
}

// -------------------------------------------------------------------

// RemoveGroupMemberRequest

// string groupId = 1;
inline void RemoveGroupMemberRequest::clear_groupid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.groupid_.ClearToEmpty();
}
inline const std::string& RemoveGroupMemberRequest::groupid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.RemoveGroupMemberRequest.groupId)
  return _internal_groupid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveGroupMemberRequest::set_groupid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.groupid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.RemoveGroupMemberRequest.groupId)
}
inline std::string* RemoveGroupMemberRequest::mutable_groupid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_groupid();
  // @@protoc_insertion_point(field_mutable:messenger.RemoveGroupMemberRequest.groupId)
  return _s;
}
inline const std::string& RemoveGroupMemberRequest::_internal_groupid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.groupid_.Get();
}
inline void RemoveGroupMemberRequest::_internal_set_groupid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.groupid_.Set(value, GetArena());
}
inline std::string* RemoveGroupMemberRequest::_internal_mutable_groupid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.groupid_.Mutable( GetArena());
}
inline std::string* RemoveGroupMemberRequest::release_groupid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.RemoveGroupMemberRequest.groupId)
  return _impl_.groupid_.Release();
}
inline void RemoveGroupMemberRequest::set_allocated_groupid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.groupid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.groupid_.IsDefault()) {
          _impl_.groupid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.RemoveGroupMemberRequest.groupId)
}

// string memberId = 2;
inline void RemoveGroupMemberRequest::clear_memberid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.memberid_.ClearToEmpty();
}
inline const std::string& RemoveGroupMemberRequest::memberid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.RemoveGroupMemberRequest.memberId)
  return _internal_memberid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveGroupMemberRequest::set_memberid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.memberid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.RemoveGroupMemberRequest.memberId)
}
inline std::string* RemoveGroupMemberRequest::mutable_memberid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_memberid();
  // @@protoc_insertion_point(field_mutable:messenger.RemoveGroupMemberRequest.memberId)
  return _s;
}
inline const std::string& RemoveGroupMemberRequest::_internal_memberid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.memberid_.Get();
}
inline void RemoveGroupMemberRequest::_internal_set_memberid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.memberid_.Set(value, GetArena());
}
inline std::string* RemoveGroupMemberRequest::_internal_mutable_memberid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.memberid_.Mutable( GetArena());
}
inline std::string* RemoveGroupMemberRequest::release_memberid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.RemoveGroupMemberRequest.memberId)
  return _impl_.memberid_.Release();
}
inline void RemoveGroupMemberRequest::set_allocated_memberid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.memberid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.memberid_.IsDefault()) {
          _impl_.memberid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.RemoveGroupMemberRequest.memberId)
}

// -------------------------------------------------------------------

// RemoveGroupMemberResponse

// bool success = 1;
inline void RemoveGroupMemberResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool RemoveGroupMemberResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.RemoveGroupMemberResponse.success)
  return _internal_success();
}
inline void RemoveGroupMemberResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.RemoveGroupMemberResponse.success)
}
inline bool RemoveGroupMemberResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void RemoveGroupMemberResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string error = 2;
inline void RemoveGroupMemberResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& RemoveGroupMemberResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.RemoveGroupMemberResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveGroupMemberResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.RemoveGroupMemberResponse.error)
}
inline std::string* RemoveGroupMemberResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:messenger.RemoveGroupMemberResponse.error)
  return _s;
}
inline const std::string& RemoveGroupMemberResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void RemoveGroupMemberResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* RemoveGroupMemberResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* RemoveGroupMemberResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.RemoveGroupMemberResponse.error)
  return _impl_.error_.Release();
}
inline void RemoveGroupMemberResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.RemoveGroupMemberResponse.error)
}

// -------------------------------------------------------------------

// ChatFolder

// string id = 1;
inline void ChatFolder::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ChatFolder::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.ChatFolder.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatFolder::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.ChatFolder.id)
}
inline std::string* ChatFolder::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:messenger.ChatFolder.id)
  return _s;
}
inline const std::string& ChatFolder::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void ChatFolder::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* ChatFolder::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* ChatFolder::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.ChatFolder.id)
  return _impl_.id_.Release();
}
inline void ChatFolder::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.ChatFolder.id)
}

// string userId = 2;
inline void ChatFolder::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& ChatFolder::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.ChatFolder.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatFolder::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.ChatFolder.userId)
}
inline std::string* ChatFolder::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.ChatFolder.userId)
  return _s;
}
inline const std::string& ChatFolder::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void ChatFolder::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* ChatFolder::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* ChatFolder::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.ChatFolder.userId)
  return _impl_.userid_.Release();
}
inline void ChatFolder::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.ChatFolder.userId)
}

// string name = 3;
inline void ChatFolder::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ChatFolder::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.ChatFolder.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatFolder::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.ChatFolder.name)
}
inline std::string* ChatFolder::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:messenger.ChatFolder.name)
  return _s;
}
inline const std::string& ChatFolder::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ChatFolder::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ChatFolder::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ChatFolder::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.ChatFolder.name)
  return _impl_.name_.Release();
}
inline void ChatFolder::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.ChatFolder.name)
}

// repeated string groupChatIds = 4;
inline int ChatFolder::_internal_groupchatids_size() const {
  return _internal_groupchatids().size();
}
inline int ChatFolder::groupchatids_size() const {
  return _internal_groupchatids_size();
}
inline void ChatFolder::clear_groupchatids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.groupchatids_.Clear();
}
inline std::string* ChatFolder::add_groupchatids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_groupchatids()->Add();
  // @@protoc_insertion_point(field_add_mutable:messenger.ChatFolder.groupChatIds)
  return _s;
}
inline const std::string& ChatFolder::groupchatids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.ChatFolder.groupChatIds)
  return _internal_groupchatids().Get(index);
}
inline std::string* ChatFolder::mutable_groupchatids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:messenger.ChatFolder.groupChatIds)
  return _internal_mutable_groupchatids()->Mutable(index);
}
inline void ChatFolder::set_groupchatids(int index, const std::string& value) {
  _internal_mutable_groupchatids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:messenger.ChatFolder.groupChatIds)
}
inline void ChatFolder::set_groupchatids(int index, std::string&& value) {
  _internal_mutable_groupchatids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:messenger.ChatFolder.groupChatIds)
}
inline void ChatFolder::set_groupchatids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_groupchatids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:messenger.ChatFolder.groupChatIds)
}
inline void ChatFolder::set_groupchatids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_groupchatids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:messenger.ChatFolder.groupChatIds)
}
inline void ChatFolder::set_groupchatids(int index, absl::string_view value) {
  _internal_mutable_groupchatids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:messenger.ChatFolder.groupChatIds)
}
inline void ChatFolder::add_groupchatids(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_groupchatids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:messenger.ChatFolder.groupChatIds)
}
inline void ChatFolder::add_groupchatids(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_groupchatids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:messenger.ChatFolder.groupChatIds)
}
inline void ChatFolder::add_groupchatids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_groupchatids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:messenger.ChatFolder.groupChatIds)
}
inline void ChatFolder::add_groupchatids(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_groupchatids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:messenger.ChatFolder.groupChatIds)
}
inline void ChatFolder::add_groupchatids(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_groupchatids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:messenger.ChatFolder.groupChatIds)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ChatFolder::groupchatids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:messenger.ChatFolder.groupChatIds)
  return _internal_groupchatids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ChatFolder::mutable_groupchatids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:messenger.ChatFolder.groupChatIds)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_groupchatids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ChatFolder::_internal_groupchatids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.groupchatids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ChatFolder::_internal_mutable_groupchatids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.groupchatids_;
}

// -------------------------------------------------------------------

// CreateChatFolderRequest

// string userId = 1;
inline void CreateChatFolderRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& CreateChatFolderRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.CreateChatFolderRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateChatFolderRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.CreateChatFolderRequest.userId)
}
inline std::string* CreateChatFolderRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.CreateChatFolderRequest.userId)
  return _s;
}
inline const std::string& CreateChatFolderRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void CreateChatFolderRequest::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* CreateChatFolderRequest::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* CreateChatFolderRequest::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.CreateChatFolderRequest.userId)
  return _impl_.userid_.Release();
}
inline void CreateChatFolderRequest::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.CreateChatFolderRequest.userId)
}

// string name = 2;
inline void CreateChatFolderRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateChatFolderRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.CreateChatFolderRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateChatFolderRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.CreateChatFolderRequest.name)
}
inline std::string* CreateChatFolderRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:messenger.CreateChatFolderRequest.name)
  return _s;
}
inline const std::string& CreateChatFolderRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void CreateChatFolderRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CreateChatFolderRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CreateChatFolderRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.CreateChatFolderRequest.name)
  return _impl_.name_.Release();
}
inline void CreateChatFolderRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.CreateChatFolderRequest.name)
}

// -------------------------------------------------------------------

// CreateChatFolderResponse

// .messenger.ChatFolder folder = 1;
inline bool CreateChatFolderResponse::has_folder() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.folder_ != nullptr);
  return value;
}
inline void CreateChatFolderResponse::clear_folder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.folder_ != nullptr) _impl_.folder_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::messenger::ChatFolder& CreateChatFolderResponse::_internal_folder() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::messenger::ChatFolder* p = _impl_.folder_;
  return p != nullptr ? *p : reinterpret_cast<const ::messenger::ChatFolder&>(::messenger::_ChatFolder_default_instance_);
}
inline const ::messenger::ChatFolder& CreateChatFolderResponse::folder() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.CreateChatFolderResponse.folder)
  return _internal_folder();
}
inline void CreateChatFolderResponse::unsafe_arena_set_allocated_folder(::messenger::ChatFolder* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.folder_);
  }
  _impl_.folder_ = reinterpret_cast<::messenger::ChatFolder*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messenger.CreateChatFolderResponse.folder)
}
inline ::messenger::ChatFolder* CreateChatFolderResponse::release_folder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::messenger::ChatFolder* released = _impl_.folder_;
  _impl_.folder_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::messenger::ChatFolder* CreateChatFolderResponse::unsafe_arena_release_folder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.CreateChatFolderResponse.folder)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::messenger::ChatFolder* temp = _impl_.folder_;
  _impl_.folder_ = nullptr;
  return temp;
}
inline ::messenger::ChatFolder* CreateChatFolderResponse::_internal_mutable_folder() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.folder_ == nullptr) {
    auto* p = CreateMaybeMessage<::messenger::ChatFolder>(GetArena());
    _impl_.folder_ = reinterpret_cast<::messenger::ChatFolder*>(p);
  }
  return _impl_.folder_;
}
inline ::messenger::ChatFolder* CreateChatFolderResponse::mutable_folder() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::messenger::ChatFolder* _msg = _internal_mutable_folder();
  // @@protoc_insertion_point(field_mutable:messenger.CreateChatFolderResponse.folder)
  return _msg;
}
inline void CreateChatFolderResponse::set_allocated_folder(::messenger::ChatFolder* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::messenger::ChatFolder*>(_impl_.folder_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::messenger::ChatFolder*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.folder_ = reinterpret_cast<::messenger::ChatFolder*>(value);
  // @@protoc_insertion_point(field_set_allocated:messenger.CreateChatFolderResponse.folder)
}

// -------------------------------------------------------------------

// UpdateChatFolderRequest

// string folderId = 1;
inline void UpdateChatFolderRequest::clear_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.folderid_.ClearToEmpty();
}
inline const std::string& UpdateChatFolderRequest::folderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.UpdateChatFolderRequest.folderId)
  return _internal_folderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateChatFolderRequest::set_folderid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.folderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.UpdateChatFolderRequest.folderId)
}
inline std::string* UpdateChatFolderRequest::mutable_folderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_folderid();
  // @@protoc_insertion_point(field_mutable:messenger.UpdateChatFolderRequest.folderId)
  return _s;
}
inline const std::string& UpdateChatFolderRequest::_internal_folderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.folderid_.Get();
}
inline void UpdateChatFolderRequest::_internal_set_folderid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.folderid_.Set(value, GetArena());
}
inline std::string* UpdateChatFolderRequest::_internal_mutable_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.folderid_.Mutable( GetArena());
}
inline std::string* UpdateChatFolderRequest::release_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.UpdateChatFolderRequest.folderId)
  return _impl_.folderid_.Release();
}
inline void UpdateChatFolderRequest::set_allocated_folderid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.folderid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.folderid_.IsDefault()) {
          _impl_.folderid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.UpdateChatFolderRequest.folderId)
}

// string newName = 2;
inline void UpdateChatFolderRequest::clear_newname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.newname_.ClearToEmpty();
}
inline const std::string& UpdateChatFolderRequest::newname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.UpdateChatFolderRequest.newName)
  return _internal_newname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateChatFolderRequest::set_newname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.newname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.UpdateChatFolderRequest.newName)
}
inline std::string* UpdateChatFolderRequest::mutable_newname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_newname();
  // @@protoc_insertion_point(field_mutable:messenger.UpdateChatFolderRequest.newName)
  return _s;
}
inline const std::string& UpdateChatFolderRequest::_internal_newname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.newname_.Get();
}
inline void UpdateChatFolderRequest::_internal_set_newname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.newname_.Set(value, GetArena());
}
inline std::string* UpdateChatFolderRequest::_internal_mutable_newname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.newname_.Mutable( GetArena());
}
inline std::string* UpdateChatFolderRequest::release_newname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.UpdateChatFolderRequest.newName)
  return _impl_.newname_.Release();
}
inline void UpdateChatFolderRequest::set_allocated_newname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.newname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.newname_.IsDefault()) {
          _impl_.newname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.UpdateChatFolderRequest.newName)
}

// -------------------------------------------------------------------

// UpdateChatFolderResponse

// bool success = 1;
inline void UpdateChatFolderResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool UpdateChatFolderResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.UpdateChatFolderResponse.success)
  return _internal_success();
}
inline void UpdateChatFolderResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.UpdateChatFolderResponse.success)
}
inline bool UpdateChatFolderResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void UpdateChatFolderResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// DeleteChatFolderRequest

// string folderId = 1;
inline void DeleteChatFolderRequest::clear_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.folderid_.ClearToEmpty();
}
inline const std::string& DeleteChatFolderRequest::folderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.DeleteChatFolderRequest.folderId)
  return _internal_folderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteChatFolderRequest::set_folderid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.folderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.DeleteChatFolderRequest.folderId)
}
inline std::string* DeleteChatFolderRequest::mutable_folderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_folderid();
  // @@protoc_insertion_point(field_mutable:messenger.DeleteChatFolderRequest.folderId)
  return _s;
}
inline const std::string& DeleteChatFolderRequest::_internal_folderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.folderid_.Get();
}
inline void DeleteChatFolderRequest::_internal_set_folderid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.folderid_.Set(value, GetArena());
}
inline std::string* DeleteChatFolderRequest::_internal_mutable_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.folderid_.Mutable( GetArena());
}
inline std::string* DeleteChatFolderRequest::release_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.DeleteChatFolderRequest.folderId)
  return _impl_.folderid_.Release();
}
inline void DeleteChatFolderRequest::set_allocated_folderid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.folderid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.folderid_.IsDefault()) {
          _impl_.folderid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.DeleteChatFolderRequest.folderId)
}

// -------------------------------------------------------------------

// DeleteChatFolderResponse

// bool success = 1;
inline void DeleteChatFolderResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool DeleteChatFolderResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.DeleteChatFolderResponse.success)
  return _internal_success();
}
inline void DeleteChatFolderResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.DeleteChatFolderResponse.success)
}
inline bool DeleteChatFolderResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void DeleteChatFolderResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// GetFoldersOffsetRequest

// string userId = 1;
inline void GetFoldersOffsetRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& GetFoldersOffsetRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetFoldersOffsetRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetFoldersOffsetRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GetFoldersOffsetRequest.userId)
}
inline std::string* GetFoldersOffsetRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.GetFoldersOffsetRequest.userId)
  return _s;
}
inline const std::string& GetFoldersOffsetRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void GetFoldersOffsetRequest::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* GetFoldersOffsetRequest::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* GetFoldersOffsetRequest::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GetFoldersOffsetRequest.userId)
  return _impl_.userid_.Release();
}
inline void GetFoldersOffsetRequest::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GetFoldersOffsetRequest.userId)
}

// -------------------------------------------------------------------

// GetFoldersOffsetResponse

// int64 offset = 1;
inline void GetFoldersOffsetResponse::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t GetFoldersOffsetResponse::offset() const {
  // @@protoc_insertion_point(field_get:messenger.GetFoldersOffsetResponse.offset)
  return _internal_offset();
}
inline void GetFoldersOffsetResponse::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:messenger.GetFoldersOffsetResponse.offset)
}
inline ::int64_t GetFoldersOffsetResponse::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void GetFoldersOffsetResponse::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// GetFoldersRequest

// string userId = 1;
inline void GetFoldersRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& GetFoldersRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetFoldersRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetFoldersRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GetFoldersRequest.userId)
}
inline std::string* GetFoldersRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.GetFoldersRequest.userId)
  return _s;
}
inline const std::string& GetFoldersRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void GetFoldersRequest::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* GetFoldersRequest::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* GetFoldersRequest::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GetFoldersRequest.userId)
  return _impl_.userid_.Release();
}
inline void GetFoldersRequest::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GetFoldersRequest.userId)
}

// int64 offset = 2;
inline void GetFoldersRequest::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t GetFoldersRequest::offset() const {
  // @@protoc_insertion_point(field_get:messenger.GetFoldersRequest.offset)
  return _internal_offset();
}
inline void GetFoldersRequest::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:messenger.GetFoldersRequest.offset)
}
inline ::int64_t GetFoldersRequest::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void GetFoldersRequest::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// int32 count = 3;
inline void GetFoldersRequest::clear_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = 0;
}
inline ::int32_t GetFoldersRequest::count() const {
  // @@protoc_insertion_point(field_get:messenger.GetFoldersRequest.count)
  return _internal_count();
}
inline void GetFoldersRequest::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:messenger.GetFoldersRequest.count)
}
inline ::int32_t GetFoldersRequest::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void GetFoldersRequest::_internal_set_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// GetFoldersResponse

// repeated .messenger.ChatFolder folders = 1;
inline int GetFoldersResponse::_internal_folders_size() const {
  return _internal_folders().size();
}
inline int GetFoldersResponse::folders_size() const {
  return _internal_folders_size();
}
inline void GetFoldersResponse::clear_folders() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.folders_.Clear();
}
inline ::messenger::ChatFolder* GetFoldersResponse::mutable_folders(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:messenger.GetFoldersResponse.folders)
  return _internal_mutable_folders()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::messenger::ChatFolder>* GetFoldersResponse::mutable_folders()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:messenger.GetFoldersResponse.folders)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_folders();
}
inline const ::messenger::ChatFolder& GetFoldersResponse::folders(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetFoldersResponse.folders)
  return _internal_folders().Get(index);
}
inline ::messenger::ChatFolder* GetFoldersResponse::add_folders() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::messenger::ChatFolder* _add = _internal_mutable_folders()->Add();
  // @@protoc_insertion_point(field_add:messenger.GetFoldersResponse.folders)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::ChatFolder>& GetFoldersResponse::folders() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:messenger.GetFoldersResponse.folders)
  return _internal_folders();
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::ChatFolder>&
GetFoldersResponse::_internal_folders() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.folders_;
}
inline ::google::protobuf::RepeatedPtrField<::messenger::ChatFolder>*
GetFoldersResponse::_internal_mutable_folders() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.folders_;
}

// -------------------------------------------------------------------

// GetNewFoldersRequest

// string userId = 1;
inline void GetNewFoldersRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& GetNewFoldersRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetNewFoldersRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetNewFoldersRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GetNewFoldersRequest.userId)
}
inline std::string* GetNewFoldersRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.GetNewFoldersRequest.userId)
  return _s;
}
inline const std::string& GetNewFoldersRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void GetNewFoldersRequest::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* GetNewFoldersRequest::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* GetNewFoldersRequest::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GetNewFoldersRequest.userId)
  return _impl_.userid_.Release();
}
inline void GetNewFoldersRequest::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GetNewFoldersRequest.userId)
}

// -------------------------------------------------------------------

// AddChatToFolderRequest

// string folderId = 1;
inline void AddChatToFolderRequest::clear_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.folderid_.ClearToEmpty();
}
inline const std::string& AddChatToFolderRequest::folderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.AddChatToFolderRequest.folderId)
  return _internal_folderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddChatToFolderRequest::set_folderid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.folderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.AddChatToFolderRequest.folderId)
}
inline std::string* AddChatToFolderRequest::mutable_folderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_folderid();
  // @@protoc_insertion_point(field_mutable:messenger.AddChatToFolderRequest.folderId)
  return _s;
}
inline const std::string& AddChatToFolderRequest::_internal_folderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.folderid_.Get();
}
inline void AddChatToFolderRequest::_internal_set_folderid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.folderid_.Set(value, GetArena());
}
inline std::string* AddChatToFolderRequest::_internal_mutable_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.folderid_.Mutable( GetArena());
}
inline std::string* AddChatToFolderRequest::release_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.AddChatToFolderRequest.folderId)
  return _impl_.folderid_.Release();
}
inline void AddChatToFolderRequest::set_allocated_folderid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.folderid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.folderid_.IsDefault()) {
          _impl_.folderid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.AddChatToFolderRequest.folderId)
}

// string chatId = 2;
inline void AddChatToFolderRequest::clear_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chatid_.ClearToEmpty();
}
inline const std::string& AddChatToFolderRequest::chatid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.AddChatToFolderRequest.chatId)
  return _internal_chatid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddChatToFolderRequest::set_chatid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chatid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.AddChatToFolderRequest.chatId)
}
inline std::string* AddChatToFolderRequest::mutable_chatid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chatid();
  // @@protoc_insertion_point(field_mutable:messenger.AddChatToFolderRequest.chatId)
  return _s;
}
inline const std::string& AddChatToFolderRequest::_internal_chatid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chatid_.Get();
}
inline void AddChatToFolderRequest::_internal_set_chatid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chatid_.Set(value, GetArena());
}
inline std::string* AddChatToFolderRequest::_internal_mutable_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.chatid_.Mutable( GetArena());
}
inline std::string* AddChatToFolderRequest::release_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.AddChatToFolderRequest.chatId)
  return _impl_.chatid_.Release();
}
inline void AddChatToFolderRequest::set_allocated_chatid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chatid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chatid_.IsDefault()) {
          _impl_.chatid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.AddChatToFolderRequest.chatId)
}

// -------------------------------------------------------------------

// AddChatToFolderResponse

// bool success = 1;
inline void AddChatToFolderResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool AddChatToFolderResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.AddChatToFolderResponse.success)
  return _internal_success();
}
inline void AddChatToFolderResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.AddChatToFolderResponse.success)
}
inline bool AddChatToFolderResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void AddChatToFolderResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// RemoveChatFromFolderRequest

// string folderId = 1;
inline void RemoveChatFromFolderRequest::clear_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.folderid_.ClearToEmpty();
}
inline const std::string& RemoveChatFromFolderRequest::folderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.RemoveChatFromFolderRequest.folderId)
  return _internal_folderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveChatFromFolderRequest::set_folderid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.folderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.RemoveChatFromFolderRequest.folderId)
}
inline std::string* RemoveChatFromFolderRequest::mutable_folderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_folderid();
  // @@protoc_insertion_point(field_mutable:messenger.RemoveChatFromFolderRequest.folderId)
  return _s;
}
inline const std::string& RemoveChatFromFolderRequest::_internal_folderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.folderid_.Get();
}
inline void RemoveChatFromFolderRequest::_internal_set_folderid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.folderid_.Set(value, GetArena());
}
inline std::string* RemoveChatFromFolderRequest::_internal_mutable_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.folderid_.Mutable( GetArena());
}
inline std::string* RemoveChatFromFolderRequest::release_folderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.RemoveChatFromFolderRequest.folderId)
  return _impl_.folderid_.Release();
}
inline void RemoveChatFromFolderRequest::set_allocated_folderid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.folderid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.folderid_.IsDefault()) {
          _impl_.folderid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.RemoveChatFromFolderRequest.folderId)
}

// string chatId = 2;
inline void RemoveChatFromFolderRequest::clear_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chatid_.ClearToEmpty();
}
inline const std::string& RemoveChatFromFolderRequest::chatid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.RemoveChatFromFolderRequest.chatId)
  return _internal_chatid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RemoveChatFromFolderRequest::set_chatid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chatid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.RemoveChatFromFolderRequest.chatId)
}
inline std::string* RemoveChatFromFolderRequest::mutable_chatid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chatid();
  // @@protoc_insertion_point(field_mutable:messenger.RemoveChatFromFolderRequest.chatId)
  return _s;
}
inline const std::string& RemoveChatFromFolderRequest::_internal_chatid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chatid_.Get();
}
inline void RemoveChatFromFolderRequest::_internal_set_chatid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chatid_.Set(value, GetArena());
}
inline std::string* RemoveChatFromFolderRequest::_internal_mutable_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.chatid_.Mutable( GetArena());
}
inline std::string* RemoveChatFromFolderRequest::release_chatid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.RemoveChatFromFolderRequest.chatId)
  return _impl_.chatid_.Release();
}
inline void RemoveChatFromFolderRequest::set_allocated_chatid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chatid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chatid_.IsDefault()) {
          _impl_.chatid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.RemoveChatFromFolderRequest.chatId)
}

// -------------------------------------------------------------------

// RemoveChatFromFolderResponse

// bool success = 1;
inline void RemoveChatFromFolderResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool RemoveChatFromFolderResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.RemoveChatFromFolderResponse.success)
  return _internal_success();
}
inline void RemoveChatFromFolderResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.RemoveChatFromFolderResponse.success)
}
inline bool RemoveChatFromFolderResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void RemoveChatFromFolderResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// FileMessage

// string id = 1;
inline void FileMessage::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& FileMessage::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.FileMessage.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMessage::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.FileMessage.id)
}
inline std::string* FileMessage::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:messenger.FileMessage.id)
  return _s;
}
inline const std::string& FileMessage::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void FileMessage::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* FileMessage::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* FileMessage::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.FileMessage.id)
  return _impl_.id_.Release();
}
inline void FileMessage::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.FileMessage.id)
}

// string senderId = 2;
inline void FileMessage::clear_senderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.senderid_.ClearToEmpty();
}
inline const std::string& FileMessage::senderid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.FileMessage.senderId)
  return _internal_senderid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMessage::set_senderid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.senderid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.FileMessage.senderId)
}
inline std::string* FileMessage::mutable_senderid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_senderid();
  // @@protoc_insertion_point(field_mutable:messenger.FileMessage.senderId)
  return _s;
}
inline const std::string& FileMessage::_internal_senderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.senderid_.Get();
}
inline void FileMessage::_internal_set_senderid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.senderid_.Set(value, GetArena());
}
inline std::string* FileMessage::_internal_mutable_senderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.senderid_.Mutable( GetArena());
}
inline std::string* FileMessage::release_senderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.FileMessage.senderId)
  return _impl_.senderid_.Release();
}
inline void FileMessage::set_allocated_senderid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.senderid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.senderid_.IsDefault()) {
          _impl_.senderid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.FileMessage.senderId)
}

// .messenger.FileType type = 3;
inline void FileMessage::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::messenger::FileType FileMessage::type() const {
  // @@protoc_insertion_point(field_get:messenger.FileMessage.type)
  return _internal_type();
}
inline void FileMessage::set_type(::messenger::FileType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:messenger.FileMessage.type)
}
inline ::messenger::FileType FileMessage::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::messenger::FileType>(_impl_.type_);
}
inline void FileMessage::_internal_set_type(::messenger::FileType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// string filename = 4;
inline void FileMessage::clear_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& FileMessage::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.FileMessage.filename)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMessage::set_filename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.FileMessage.filename)
}
inline std::string* FileMessage::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:messenger.FileMessage.filename)
  return _s;
}
inline const std::string& FileMessage::_internal_filename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filename_.Get();
}
inline void FileMessage::_internal_set_filename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* FileMessage::_internal_mutable_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* FileMessage::release_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.FileMessage.filename)
  return _impl_.filename_.Release();
}
inline void FileMessage::set_allocated_filename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.FileMessage.filename)
}

// bytes data = 5;
inline void FileMessage::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& FileMessage::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.FileMessage.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileMessage::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.FileMessage.data)
}
inline std::string* FileMessage::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:messenger.FileMessage.data)
  return _s;
}
inline const std::string& FileMessage::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void FileMessage::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* FileMessage::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* FileMessage::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.FileMessage.data)
  return _impl_.data_.Release();
}
inline void FileMessage::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.FileMessage.data)
}

// -------------------------------------------------------------------

// SearchRequest

// string query = 1;
inline void SearchRequest::clear_query() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.query_.ClearToEmpty();
}
inline const std::string& SearchRequest::query() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.SearchRequest.query)
  return _internal_query();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SearchRequest::set_query(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.query_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.SearchRequest.query)
}
inline std::string* SearchRequest::mutable_query() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:messenger.SearchRequest.query)
  return _s;
}
inline const std::string& SearchRequest::_internal_query() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.query_.Get();
}
inline void SearchRequest::_internal_set_query(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.query_.Set(value, GetArena());
}
inline std::string* SearchRequest::_internal_mutable_query() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.query_.Mutable( GetArena());
}
inline std::string* SearchRequest::release_query() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.SearchRequest.query)
  return _impl_.query_.Release();
}
inline void SearchRequest::set_allocated_query(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.query_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.query_.IsDefault()) {
          _impl_.query_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.SearchRequest.query)
}

// string userId = 2;
inline void SearchRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& SearchRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.SearchRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SearchRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.SearchRequest.userId)
}
inline std::string* SearchRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.SearchRequest.userId)
  return _s;
}
inline const std::string& SearchRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void SearchRequest::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* SearchRequest::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* SearchRequest::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.SearchRequest.userId)
  return _impl_.userid_.Release();
}
inline void SearchRequest::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.SearchRequest.userId)
}

// int32 limit = 3;
inline void SearchRequest::clear_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.limit_ = 0;
}
inline ::int32_t SearchRequest::limit() const {
  // @@protoc_insertion_point(field_get:messenger.SearchRequest.limit)
  return _internal_limit();
}
inline void SearchRequest::set_limit(::int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:messenger.SearchRequest.limit)
}
inline ::int32_t SearchRequest::_internal_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.limit_;
}
inline void SearchRequest::_internal_set_limit(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.limit_ = value;
}

// -------------------------------------------------------------------

// SearchMessagesResponse

// repeated .messenger.ChatMessage messages = 1;
inline int SearchMessagesResponse::_internal_messages_size() const {
  return _internal_messages().size();
}
inline int SearchMessagesResponse::messages_size() const {
  return _internal_messages_size();
}
inline void SearchMessagesResponse::clear_messages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.messages_.Clear();
}
inline ::messenger::ChatMessage* SearchMessagesResponse::mutable_messages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:messenger.SearchMessagesResponse.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::messenger::ChatMessage>* SearchMessagesResponse::mutable_messages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:messenger.SearchMessagesResponse.messages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_messages();
}
inline const ::messenger::ChatMessage& SearchMessagesResponse::messages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.SearchMessagesResponse.messages)
  return _internal_messages().Get(index);
}
inline ::messenger::ChatMessage* SearchMessagesResponse::add_messages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::messenger::ChatMessage* _add = _internal_mutable_messages()->Add();
  // @@protoc_insertion_point(field_add:messenger.SearchMessagesResponse.messages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::ChatMessage>& SearchMessagesResponse::messages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:messenger.SearchMessagesResponse.messages)
  return _internal_messages();
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::ChatMessage>&
SearchMessagesResponse::_internal_messages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.messages_;
}
inline ::google::protobuf::RepeatedPtrField<::messenger::ChatMessage>*
SearchMessagesResponse::_internal_mutable_messages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.messages_;
}

// -------------------------------------------------------------------

// SearchChatsResponse

// repeated .messenger.GroupChat chats = 1;
inline int SearchChatsResponse::_internal_chats_size() const {
  return _internal_chats().size();
}
inline int SearchChatsResponse::chats_size() const {
  return _internal_chats_size();
}
inline void SearchChatsResponse::clear_chats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chats_.Clear();
}
inline ::messenger::GroupChat* SearchChatsResponse::mutable_chats(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:messenger.SearchChatsResponse.chats)
  return _internal_mutable_chats()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::messenger::GroupChat>* SearchChatsResponse::mutable_chats()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:messenger.SearchChatsResponse.chats)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_chats();
}
inline const ::messenger::GroupChat& SearchChatsResponse::chats(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.SearchChatsResponse.chats)
  return _internal_chats().Get(index);
}
inline ::messenger::GroupChat* SearchChatsResponse::add_chats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::messenger::GroupChat* _add = _internal_mutable_chats()->Add();
  // @@protoc_insertion_point(field_add:messenger.SearchChatsResponse.chats)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::GroupChat>& SearchChatsResponse::chats() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:messenger.SearchChatsResponse.chats)
  return _internal_chats();
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::GroupChat>&
SearchChatsResponse::_internal_chats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chats_;
}
inline ::google::protobuf::RepeatedPtrField<::messenger::GroupChat>*
SearchChatsResponse::_internal_mutable_chats() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.chats_;
}

// -------------------------------------------------------------------

// Permissions

// bool write = 1;
inline void Permissions::clear_write() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.write_ = false;
}
inline bool Permissions::write() const {
  // @@protoc_insertion_point(field_get:messenger.Permissions.write)
  return _internal_write();
}
inline void Permissions::set_write(bool value) {
  _internal_set_write(value);
  // @@protoc_insertion_point(field_set:messenger.Permissions.write)
}
inline bool Permissions::_internal_write() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.write_;
}
inline void Permissions::_internal_set_write(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.write_ = value;
}

// bool ban = 2;
inline void Permissions::clear_ban() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ban_ = false;
}
inline bool Permissions::ban() const {
  // @@protoc_insertion_point(field_get:messenger.Permissions.ban)
  return _internal_ban();
}
inline void Permissions::set_ban(bool value) {
  _internal_set_ban(value);
  // @@protoc_insertion_point(field_set:messenger.Permissions.ban)
}
inline bool Permissions::_internal_ban() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ban_;
}
inline void Permissions::_internal_set_ban(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ban_ = value;
}

// -------------------------------------------------------------------

// Role

// string name = 1;
inline void Role::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Role::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.Role.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Role::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.Role.name)
}
inline std::string* Role::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:messenger.Role.name)
  return _s;
}
inline const std::string& Role::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Role::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Role::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Role::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.Role.name)
  return _impl_.name_.Release();
}
inline void Role::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.Role.name)
}

// .messenger.Permissions permissions = 2;
inline bool Role::has_permissions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.permissions_ != nullptr);
  return value;
}
inline void Role::clear_permissions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.permissions_ != nullptr) _impl_.permissions_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::messenger::Permissions& Role::_internal_permissions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::messenger::Permissions* p = _impl_.permissions_;
  return p != nullptr ? *p : reinterpret_cast<const ::messenger::Permissions&>(::messenger::_Permissions_default_instance_);
}
inline const ::messenger::Permissions& Role::permissions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.Role.permissions)
  return _internal_permissions();
}
inline void Role::unsafe_arena_set_allocated_permissions(::messenger::Permissions* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.permissions_);
  }
  _impl_.permissions_ = reinterpret_cast<::messenger::Permissions*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messenger.Role.permissions)
}
inline ::messenger::Permissions* Role::release_permissions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::messenger::Permissions* released = _impl_.permissions_;
  _impl_.permissions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::messenger::Permissions* Role::unsafe_arena_release_permissions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.Role.permissions)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::messenger::Permissions* temp = _impl_.permissions_;
  _impl_.permissions_ = nullptr;
  return temp;
}
inline ::messenger::Permissions* Role::_internal_mutable_permissions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.permissions_ == nullptr) {
    auto* p = CreateMaybeMessage<::messenger::Permissions>(GetArena());
    _impl_.permissions_ = reinterpret_cast<::messenger::Permissions*>(p);
  }
  return _impl_.permissions_;
}
inline ::messenger::Permissions* Role::mutable_permissions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::messenger::Permissions* _msg = _internal_mutable_permissions();
  // @@protoc_insertion_point(field_mutable:messenger.Role.permissions)
  return _msg;
}
inline void Role::set_allocated_permissions(::messenger::Permissions* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::messenger::Permissions*>(_impl_.permissions_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::messenger::Permissions*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.permissions_ = reinterpret_cast<::messenger::Permissions*>(value);
  // @@protoc_insertion_point(field_set_allocated:messenger.Role.permissions)
}

// -------------------------------------------------------------------

// Reminder

// string id = 1;
inline void Reminder::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Reminder::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.Reminder.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Reminder::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.Reminder.id)
}
inline std::string* Reminder::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:messenger.Reminder.id)
  return _s;
}
inline const std::string& Reminder::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Reminder::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Reminder::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Reminder::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.Reminder.id)
  return _impl_.id_.Release();
}
inline void Reminder::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.Reminder.id)
}

// string userId = 2;
inline void Reminder::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& Reminder::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.Reminder.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Reminder::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.Reminder.userId)
}
inline std::string* Reminder::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.Reminder.userId)
  return _s;
}
inline const std::string& Reminder::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void Reminder::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* Reminder::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* Reminder::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.Reminder.userId)
  return _impl_.userid_.Release();
}
inline void Reminder::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.Reminder.userId)
}

// string message = 3;
inline void Reminder::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Reminder::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.Reminder.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Reminder::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.Reminder.message)
}
inline std::string* Reminder::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:messenger.Reminder.message)
  return _s;
}
inline const std::string& Reminder::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void Reminder::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* Reminder::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* Reminder::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.Reminder.message)
  return _impl_.message_.Release();
}
inline void Reminder::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.Reminder.message)
}

// int64 timestamp = 4;
inline void Reminder::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t Reminder::timestamp() const {
  // @@protoc_insertion_point(field_get:messenger.Reminder.timestamp)
  return _internal_timestamp();
}
inline void Reminder::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:messenger.Reminder.timestamp)
}
inline ::int64_t Reminder::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void Reminder::_internal_set_timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// NotificationSettings

// string userId = 1;
inline void NotificationSettings::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& NotificationSettings::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.NotificationSettings.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationSettings::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.NotificationSettings.userId)
}
inline std::string* NotificationSettings::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.NotificationSettings.userId)
  return _s;
}
inline const std::string& NotificationSettings::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void NotificationSettings::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* NotificationSettings::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* NotificationSettings::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.NotificationSettings.userId)
  return _impl_.userid_.Release();
}
inline void NotificationSettings::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.NotificationSettings.userId)
}

// bool enableNotifications = 2;
inline void NotificationSettings::clear_enablenotifications() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.enablenotifications_ = false;
}
inline bool NotificationSettings::enablenotifications() const {
  // @@protoc_insertion_point(field_get:messenger.NotificationSettings.enableNotifications)
  return _internal_enablenotifications();
}
inline void NotificationSettings::set_enablenotifications(bool value) {
  _internal_set_enablenotifications(value);
  // @@protoc_insertion_point(field_set:messenger.NotificationSettings.enableNotifications)
}
inline bool NotificationSettings::_internal_enablenotifications() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enablenotifications_;
}
inline void NotificationSettings::_internal_set_enablenotifications(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.enablenotifications_ = value;
}

// -------------------------------------------------------------------

// UpdateNotificationSettingsRequest

// .messenger.NotificationSettings settings = 1;
inline bool UpdateNotificationSettingsRequest::has_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.settings_ != nullptr);
  return value;
}
inline void UpdateNotificationSettingsRequest::clear_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.settings_ != nullptr) _impl_.settings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::messenger::NotificationSettings& UpdateNotificationSettingsRequest::_internal_settings() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::messenger::NotificationSettings* p = _impl_.settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::messenger::NotificationSettings&>(::messenger::_NotificationSettings_default_instance_);
}
inline const ::messenger::NotificationSettings& UpdateNotificationSettingsRequest::settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.UpdateNotificationSettingsRequest.settings)
  return _internal_settings();
}
inline void UpdateNotificationSettingsRequest::unsafe_arena_set_allocated_settings(::messenger::NotificationSettings* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.settings_);
  }
  _impl_.settings_ = reinterpret_cast<::messenger::NotificationSettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messenger.UpdateNotificationSettingsRequest.settings)
}
inline ::messenger::NotificationSettings* UpdateNotificationSettingsRequest::release_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::messenger::NotificationSettings* released = _impl_.settings_;
  _impl_.settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::messenger::NotificationSettings* UpdateNotificationSettingsRequest::unsafe_arena_release_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.UpdateNotificationSettingsRequest.settings)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::messenger::NotificationSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
  return temp;
}
inline ::messenger::NotificationSettings* UpdateNotificationSettingsRequest::_internal_mutable_settings() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::messenger::NotificationSettings>(GetArena());
    _impl_.settings_ = reinterpret_cast<::messenger::NotificationSettings*>(p);
  }
  return _impl_.settings_;
}
inline ::messenger::NotificationSettings* UpdateNotificationSettingsRequest::mutable_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::messenger::NotificationSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:messenger.UpdateNotificationSettingsRequest.settings)
  return _msg;
}
inline void UpdateNotificationSettingsRequest::set_allocated_settings(::messenger::NotificationSettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::messenger::NotificationSettings*>(_impl_.settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::messenger::NotificationSettings*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.settings_ = reinterpret_cast<::messenger::NotificationSettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:messenger.UpdateNotificationSettingsRequest.settings)
}

// -------------------------------------------------------------------

// UpdateNotificationSettingsResponse

// bool success = 1;
inline void UpdateNotificationSettingsResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool UpdateNotificationSettingsResponse::success() const {
  // @@protoc_insertion_point(field_get:messenger.UpdateNotificationSettingsResponse.success)
  return _internal_success();
}
inline void UpdateNotificationSettingsResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messenger.UpdateNotificationSettingsResponse.success)
}
inline bool UpdateNotificationSettingsResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void UpdateNotificationSettingsResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string error = 2;
inline void UpdateNotificationSettingsResponse::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& UpdateNotificationSettingsResponse::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.UpdateNotificationSettingsResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateNotificationSettingsResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.UpdateNotificationSettingsResponse.error)
}
inline std::string* UpdateNotificationSettingsResponse::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:messenger.UpdateNotificationSettingsResponse.error)
  return _s;
}
inline const std::string& UpdateNotificationSettingsResponse::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void UpdateNotificationSettingsResponse::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* UpdateNotificationSettingsResponse::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* UpdateNotificationSettingsResponse::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.UpdateNotificationSettingsResponse.error)
  return _impl_.error_.Release();
}
inline void UpdateNotificationSettingsResponse::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.UpdateNotificationSettingsResponse.error)
}

// -------------------------------------------------------------------

// ToDoItem

// string id = 1;
inline void ToDoItem::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ToDoItem::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.ToDoItem.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ToDoItem::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.ToDoItem.id)
}
inline std::string* ToDoItem::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:messenger.ToDoItem.id)
  return _s;
}
inline const std::string& ToDoItem::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void ToDoItem::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* ToDoItem::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* ToDoItem::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.ToDoItem.id)
  return _impl_.id_.Release();
}
inline void ToDoItem::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.ToDoItem.id)
}

// string userId = 2;
inline void ToDoItem::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& ToDoItem::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.ToDoItem.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ToDoItem::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.ToDoItem.userId)
}
inline std::string* ToDoItem::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.ToDoItem.userId)
  return _s;
}
inline const std::string& ToDoItem::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void ToDoItem::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* ToDoItem::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* ToDoItem::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.ToDoItem.userId)
  return _impl_.userid_.Release();
}
inline void ToDoItem::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.ToDoItem.userId)
}

// string description = 3;
inline void ToDoItem::clear_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& ToDoItem::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.ToDoItem.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ToDoItem::set_description(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.ToDoItem.description)
}
inline std::string* ToDoItem::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:messenger.ToDoItem.description)
  return _s;
}
inline const std::string& ToDoItem::_internal_description() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.description_.Get();
}
inline void ToDoItem::_internal_set_description(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.description_.Set(value, GetArena());
}
inline std::string* ToDoItem::_internal_mutable_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* ToDoItem::release_description() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.ToDoItem.description)
  return _impl_.description_.Release();
}
inline void ToDoItem::set_allocated_description(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.description_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.ToDoItem.description)
}

// bool completed = 4;
inline void ToDoItem::clear_completed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.completed_ = false;
}
inline bool ToDoItem::completed() const {
  // @@protoc_insertion_point(field_get:messenger.ToDoItem.completed)
  return _internal_completed();
}
inline void ToDoItem::set_completed(bool value) {
  _internal_set_completed(value);
  // @@protoc_insertion_point(field_set:messenger.ToDoItem.completed)
}
inline bool ToDoItem::_internal_completed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.completed_;
}
inline void ToDoItem::_internal_set_completed(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.completed_ = value;
}

// -------------------------------------------------------------------

// GetToDoItemsOffsetRequest

// string userId = 1;
inline void GetToDoItemsOffsetRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& GetToDoItemsOffsetRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetToDoItemsOffsetRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetToDoItemsOffsetRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GetToDoItemsOffsetRequest.userId)
}
inline std::string* GetToDoItemsOffsetRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.GetToDoItemsOffsetRequest.userId)
  return _s;
}
inline const std::string& GetToDoItemsOffsetRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void GetToDoItemsOffsetRequest::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* GetToDoItemsOffsetRequest::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* GetToDoItemsOffsetRequest::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GetToDoItemsOffsetRequest.userId)
  return _impl_.userid_.Release();
}
inline void GetToDoItemsOffsetRequest::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GetToDoItemsOffsetRequest.userId)
}

// -------------------------------------------------------------------

// GetToDoItemsOffsetResponse

// int64 offset = 1;
inline void GetToDoItemsOffsetResponse::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t GetToDoItemsOffsetResponse::offset() const {
  // @@protoc_insertion_point(field_get:messenger.GetToDoItemsOffsetResponse.offset)
  return _internal_offset();
}
inline void GetToDoItemsOffsetResponse::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:messenger.GetToDoItemsOffsetResponse.offset)
}
inline ::int64_t GetToDoItemsOffsetResponse::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void GetToDoItemsOffsetResponse::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// GetToDoItemsRequest

// string userId = 1;
inline void GetToDoItemsRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& GetToDoItemsRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetToDoItemsRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetToDoItemsRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GetToDoItemsRequest.userId)
}
inline std::string* GetToDoItemsRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.GetToDoItemsRequest.userId)
  return _s;
}
inline const std::string& GetToDoItemsRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void GetToDoItemsRequest::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* GetToDoItemsRequest::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* GetToDoItemsRequest::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GetToDoItemsRequest.userId)
  return _impl_.userid_.Release();
}
inline void GetToDoItemsRequest::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GetToDoItemsRequest.userId)
}

// int64 offset = 2;
inline void GetToDoItemsRequest::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t GetToDoItemsRequest::offset() const {
  // @@protoc_insertion_point(field_get:messenger.GetToDoItemsRequest.offset)
  return _internal_offset();
}
inline void GetToDoItemsRequest::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:messenger.GetToDoItemsRequest.offset)
}
inline ::int64_t GetToDoItemsRequest::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void GetToDoItemsRequest::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// int32 count = 3;
inline void GetToDoItemsRequest::clear_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = 0;
}
inline ::int32_t GetToDoItemsRequest::count() const {
  // @@protoc_insertion_point(field_get:messenger.GetToDoItemsRequest.count)
  return _internal_count();
}
inline void GetToDoItemsRequest::set_count(::int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:messenger.GetToDoItemsRequest.count)
}
inline ::int32_t GetToDoItemsRequest::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void GetToDoItemsRequest::_internal_set_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.count_ = value;
}

// -------------------------------------------------------------------

// GetToDoItemsResponse

// repeated .messenger.ToDoItem items = 1;
inline int GetToDoItemsResponse::_internal_items_size() const {
  return _internal_items().size();
}
inline int GetToDoItemsResponse::items_size() const {
  return _internal_items_size();
}
inline void GetToDoItemsResponse::clear_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.items_.Clear();
}
inline ::messenger::ToDoItem* GetToDoItemsResponse::mutable_items(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:messenger.GetToDoItemsResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::messenger::ToDoItem>* GetToDoItemsResponse::mutable_items()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:messenger.GetToDoItemsResponse.items)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_items();
}
inline const ::messenger::ToDoItem& GetToDoItemsResponse::items(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetToDoItemsResponse.items)
  return _internal_items().Get(index);
}
inline ::messenger::ToDoItem* GetToDoItemsResponse::add_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::messenger::ToDoItem* _add = _internal_mutable_items()->Add();
  // @@protoc_insertion_point(field_add:messenger.GetToDoItemsResponse.items)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::ToDoItem>& GetToDoItemsResponse::items() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:messenger.GetToDoItemsResponse.items)
  return _internal_items();
}
inline const ::google::protobuf::RepeatedPtrField<::messenger::ToDoItem>&
GetToDoItemsResponse::_internal_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.items_;
}
inline ::google::protobuf::RepeatedPtrField<::messenger::ToDoItem>*
GetToDoItemsResponse::_internal_mutable_items() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// GetNewToDoItemsRequest

// string userId = 1;
inline void GetNewToDoItemsRequest::clear_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.ClearToEmpty();
}
inline const std::string& GetNewToDoItemsRequest::userid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:messenger.GetNewToDoItemsRequest.userId)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetNewToDoItemsRequest::set_userid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:messenger.GetNewToDoItemsRequest.userId)
}
inline std::string* GetNewToDoItemsRequest::mutable_userid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:messenger.GetNewToDoItemsRequest.userId)
  return _s;
}
inline const std::string& GetNewToDoItemsRequest::_internal_userid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.userid_.Get();
}
inline void GetNewToDoItemsRequest::_internal_set_userid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.userid_.Set(value, GetArena());
}
inline std::string* GetNewToDoItemsRequest::_internal_mutable_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.userid_.Mutable( GetArena());
}
inline std::string* GetNewToDoItemsRequest::release_userid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:messenger.GetNewToDoItemsRequest.userId)
  return _impl_.userid_.Release();
}
inline void GetNewToDoItemsRequest::set_allocated_userid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.userid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messenger.GetNewToDoItemsRequest.userId)
}

// int64 offset = 2;
inline void GetNewToDoItemsRequest::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t GetNewToDoItemsRequest::offset() const {
  // @@protoc_insertion_point(field_get:messenger.GetNewToDoItemsRequest.offset)
  return _internal_offset();
}
inline void GetNewToDoItemsRequest::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:messenger.GetNewToDoItemsRequest.offset)
}
inline ::int64_t GetNewToDoItemsRequest::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void GetNewToDoItemsRequest::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace messenger


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::messenger::MessageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::messenger::MessageType>() {
  return ::messenger::MessageType_descriptor();
}
template <>
struct is_proto_enum<::messenger::FileType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::messenger::FileType>() {
  return ::messenger::FileType_descriptor();
}
template <>
struct is_proto_enum<::messenger::MessageStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::messenger::MessageStatus>() {
  return ::messenger::MessageStatus_descriptor();
}
template <>
struct is_proto_enum<::messenger::UserStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::messenger::UserStatus>() {
  return ::messenger::UserStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_messenger_2eproto_2epb_2eh
